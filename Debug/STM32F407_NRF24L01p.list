
STM32F407_NRF24L01p.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005458  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  080055e8  080055e8  000155e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057a0  080057a0  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  080057a0  080057a0  000157a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080057a8  080057a8  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057a8  080057a8  000157a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080057ac  080057ac  000157ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080057b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          000000f8  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000188  20000188  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009bde  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fe7  00000000  00000000  00029c9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000958  00000000  00000000  0002bc88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000840  00000000  00000000  0002c5e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000218d3  00000000  00000000  0002ce20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000adde  00000000  00000000  0004e6f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c429c  00000000  00000000  000594d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011d76d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002cf8  00000000  00000000  0011d7c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080055d0 	.word	0x080055d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	080055d0 	.word	0x080055d0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ac0:	f000 b974 	b.w	8000dac <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9d08      	ldr	r5, [sp, #32]
 8000ae2:	4604      	mov	r4, r0
 8000ae4:	468e      	mov	lr, r1
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d14d      	bne.n	8000b86 <__udivmoddi4+0xaa>
 8000aea:	428a      	cmp	r2, r1
 8000aec:	4694      	mov	ip, r2
 8000aee:	d969      	bls.n	8000bc4 <__udivmoddi4+0xe8>
 8000af0:	fab2 f282 	clz	r2, r2
 8000af4:	b152      	cbz	r2, 8000b0c <__udivmoddi4+0x30>
 8000af6:	fa01 f302 	lsl.w	r3, r1, r2
 8000afa:	f1c2 0120 	rsb	r1, r2, #32
 8000afe:	fa20 f101 	lsr.w	r1, r0, r1
 8000b02:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b06:	ea41 0e03 	orr.w	lr, r1, r3
 8000b0a:	4094      	lsls	r4, r2
 8000b0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b10:	0c21      	lsrs	r1, r4, #16
 8000b12:	fbbe f6f8 	udiv	r6, lr, r8
 8000b16:	fa1f f78c 	uxth.w	r7, ip
 8000b1a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b1e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b22:	fb06 f107 	mul.w	r1, r6, r7
 8000b26:	4299      	cmp	r1, r3
 8000b28:	d90a      	bls.n	8000b40 <__udivmoddi4+0x64>
 8000b2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b2e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000b32:	f080 811f 	bcs.w	8000d74 <__udivmoddi4+0x298>
 8000b36:	4299      	cmp	r1, r3
 8000b38:	f240 811c 	bls.w	8000d74 <__udivmoddi4+0x298>
 8000b3c:	3e02      	subs	r6, #2
 8000b3e:	4463      	add	r3, ip
 8000b40:	1a5b      	subs	r3, r3, r1
 8000b42:	b2a4      	uxth	r4, r4
 8000b44:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b48:	fb08 3310 	mls	r3, r8, r0, r3
 8000b4c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b50:	fb00 f707 	mul.w	r7, r0, r7
 8000b54:	42a7      	cmp	r7, r4
 8000b56:	d90a      	bls.n	8000b6e <__udivmoddi4+0x92>
 8000b58:	eb1c 0404 	adds.w	r4, ip, r4
 8000b5c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b60:	f080 810a 	bcs.w	8000d78 <__udivmoddi4+0x29c>
 8000b64:	42a7      	cmp	r7, r4
 8000b66:	f240 8107 	bls.w	8000d78 <__udivmoddi4+0x29c>
 8000b6a:	4464      	add	r4, ip
 8000b6c:	3802      	subs	r0, #2
 8000b6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b72:	1be4      	subs	r4, r4, r7
 8000b74:	2600      	movs	r6, #0
 8000b76:	b11d      	cbz	r5, 8000b80 <__udivmoddi4+0xa4>
 8000b78:	40d4      	lsrs	r4, r2
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b80:	4631      	mov	r1, r6
 8000b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b86:	428b      	cmp	r3, r1
 8000b88:	d909      	bls.n	8000b9e <__udivmoddi4+0xc2>
 8000b8a:	2d00      	cmp	r5, #0
 8000b8c:	f000 80ef 	beq.w	8000d6e <__udivmoddi4+0x292>
 8000b90:	2600      	movs	r6, #0
 8000b92:	e9c5 0100 	strd	r0, r1, [r5]
 8000b96:	4630      	mov	r0, r6
 8000b98:	4631      	mov	r1, r6
 8000b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9e:	fab3 f683 	clz	r6, r3
 8000ba2:	2e00      	cmp	r6, #0
 8000ba4:	d14a      	bne.n	8000c3c <__udivmoddi4+0x160>
 8000ba6:	428b      	cmp	r3, r1
 8000ba8:	d302      	bcc.n	8000bb0 <__udivmoddi4+0xd4>
 8000baa:	4282      	cmp	r2, r0
 8000bac:	f200 80f9 	bhi.w	8000da2 <__udivmoddi4+0x2c6>
 8000bb0:	1a84      	subs	r4, r0, r2
 8000bb2:	eb61 0303 	sbc.w	r3, r1, r3
 8000bb6:	2001      	movs	r0, #1
 8000bb8:	469e      	mov	lr, r3
 8000bba:	2d00      	cmp	r5, #0
 8000bbc:	d0e0      	beq.n	8000b80 <__udivmoddi4+0xa4>
 8000bbe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bc2:	e7dd      	b.n	8000b80 <__udivmoddi4+0xa4>
 8000bc4:	b902      	cbnz	r2, 8000bc8 <__udivmoddi4+0xec>
 8000bc6:	deff      	udf	#255	; 0xff
 8000bc8:	fab2 f282 	clz	r2, r2
 8000bcc:	2a00      	cmp	r2, #0
 8000bce:	f040 8092 	bne.w	8000cf6 <__udivmoddi4+0x21a>
 8000bd2:	eba1 010c 	sub.w	r1, r1, ip
 8000bd6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bda:	fa1f fe8c 	uxth.w	lr, ip
 8000bde:	2601      	movs	r6, #1
 8000be0:	0c20      	lsrs	r0, r4, #16
 8000be2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000be6:	fb07 1113 	mls	r1, r7, r3, r1
 8000bea:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bee:	fb0e f003 	mul.w	r0, lr, r3
 8000bf2:	4288      	cmp	r0, r1
 8000bf4:	d908      	bls.n	8000c08 <__udivmoddi4+0x12c>
 8000bf6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bfa:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000bfe:	d202      	bcs.n	8000c06 <__udivmoddi4+0x12a>
 8000c00:	4288      	cmp	r0, r1
 8000c02:	f200 80cb 	bhi.w	8000d9c <__udivmoddi4+0x2c0>
 8000c06:	4643      	mov	r3, r8
 8000c08:	1a09      	subs	r1, r1, r0
 8000c0a:	b2a4      	uxth	r4, r4
 8000c0c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c10:	fb07 1110 	mls	r1, r7, r0, r1
 8000c14:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c18:	fb0e fe00 	mul.w	lr, lr, r0
 8000c1c:	45a6      	cmp	lr, r4
 8000c1e:	d908      	bls.n	8000c32 <__udivmoddi4+0x156>
 8000c20:	eb1c 0404 	adds.w	r4, ip, r4
 8000c24:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000c28:	d202      	bcs.n	8000c30 <__udivmoddi4+0x154>
 8000c2a:	45a6      	cmp	lr, r4
 8000c2c:	f200 80bb 	bhi.w	8000da6 <__udivmoddi4+0x2ca>
 8000c30:	4608      	mov	r0, r1
 8000c32:	eba4 040e 	sub.w	r4, r4, lr
 8000c36:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c3a:	e79c      	b.n	8000b76 <__udivmoddi4+0x9a>
 8000c3c:	f1c6 0720 	rsb	r7, r6, #32
 8000c40:	40b3      	lsls	r3, r6
 8000c42:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c46:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c4a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c4e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c52:	431c      	orrs	r4, r3
 8000c54:	40f9      	lsrs	r1, r7
 8000c56:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c5a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c5e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c62:	0c20      	lsrs	r0, r4, #16
 8000c64:	fa1f fe8c 	uxth.w	lr, ip
 8000c68:	fb09 1118 	mls	r1, r9, r8, r1
 8000c6c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c70:	fb08 f00e 	mul.w	r0, r8, lr
 8000c74:	4288      	cmp	r0, r1
 8000c76:	fa02 f206 	lsl.w	r2, r2, r6
 8000c7a:	d90b      	bls.n	8000c94 <__udivmoddi4+0x1b8>
 8000c7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c80:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000c84:	f080 8088 	bcs.w	8000d98 <__udivmoddi4+0x2bc>
 8000c88:	4288      	cmp	r0, r1
 8000c8a:	f240 8085 	bls.w	8000d98 <__udivmoddi4+0x2bc>
 8000c8e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c92:	4461      	add	r1, ip
 8000c94:	1a09      	subs	r1, r1, r0
 8000c96:	b2a4      	uxth	r4, r4
 8000c98:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c9c:	fb09 1110 	mls	r1, r9, r0, r1
 8000ca0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ca4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ca8:	458e      	cmp	lr, r1
 8000caa:	d908      	bls.n	8000cbe <__udivmoddi4+0x1e2>
 8000cac:	eb1c 0101 	adds.w	r1, ip, r1
 8000cb0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000cb4:	d26c      	bcs.n	8000d90 <__udivmoddi4+0x2b4>
 8000cb6:	458e      	cmp	lr, r1
 8000cb8:	d96a      	bls.n	8000d90 <__udivmoddi4+0x2b4>
 8000cba:	3802      	subs	r0, #2
 8000cbc:	4461      	add	r1, ip
 8000cbe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cc2:	fba0 9402 	umull	r9, r4, r0, r2
 8000cc6:	eba1 010e 	sub.w	r1, r1, lr
 8000cca:	42a1      	cmp	r1, r4
 8000ccc:	46c8      	mov	r8, r9
 8000cce:	46a6      	mov	lr, r4
 8000cd0:	d356      	bcc.n	8000d80 <__udivmoddi4+0x2a4>
 8000cd2:	d053      	beq.n	8000d7c <__udivmoddi4+0x2a0>
 8000cd4:	b15d      	cbz	r5, 8000cee <__udivmoddi4+0x212>
 8000cd6:	ebb3 0208 	subs.w	r2, r3, r8
 8000cda:	eb61 010e 	sbc.w	r1, r1, lr
 8000cde:	fa01 f707 	lsl.w	r7, r1, r7
 8000ce2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ce6:	40f1      	lsrs	r1, r6
 8000ce8:	431f      	orrs	r7, r3
 8000cea:	e9c5 7100 	strd	r7, r1, [r5]
 8000cee:	2600      	movs	r6, #0
 8000cf0:	4631      	mov	r1, r6
 8000cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf6:	f1c2 0320 	rsb	r3, r2, #32
 8000cfa:	40d8      	lsrs	r0, r3
 8000cfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d00:	fa21 f303 	lsr.w	r3, r1, r3
 8000d04:	4091      	lsls	r1, r2
 8000d06:	4301      	orrs	r1, r0
 8000d08:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0c:	fa1f fe8c 	uxth.w	lr, ip
 8000d10:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d14:	fb07 3610 	mls	r6, r7, r0, r3
 8000d18:	0c0b      	lsrs	r3, r1, #16
 8000d1a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d1e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d22:	429e      	cmp	r6, r3
 8000d24:	fa04 f402 	lsl.w	r4, r4, r2
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x260>
 8000d2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000d32:	d22f      	bcs.n	8000d94 <__udivmoddi4+0x2b8>
 8000d34:	429e      	cmp	r6, r3
 8000d36:	d92d      	bls.n	8000d94 <__udivmoddi4+0x2b8>
 8000d38:	3802      	subs	r0, #2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	1b9b      	subs	r3, r3, r6
 8000d3e:	b289      	uxth	r1, r1
 8000d40:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d44:	fb07 3316 	mls	r3, r7, r6, r3
 8000d48:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d4c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d50:	428b      	cmp	r3, r1
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x28a>
 8000d54:	eb1c 0101 	adds.w	r1, ip, r1
 8000d58:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000d5c:	d216      	bcs.n	8000d8c <__udivmoddi4+0x2b0>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d914      	bls.n	8000d8c <__udivmoddi4+0x2b0>
 8000d62:	3e02      	subs	r6, #2
 8000d64:	4461      	add	r1, ip
 8000d66:	1ac9      	subs	r1, r1, r3
 8000d68:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d6c:	e738      	b.n	8000be0 <__udivmoddi4+0x104>
 8000d6e:	462e      	mov	r6, r5
 8000d70:	4628      	mov	r0, r5
 8000d72:	e705      	b.n	8000b80 <__udivmoddi4+0xa4>
 8000d74:	4606      	mov	r6, r0
 8000d76:	e6e3      	b.n	8000b40 <__udivmoddi4+0x64>
 8000d78:	4618      	mov	r0, r3
 8000d7a:	e6f8      	b.n	8000b6e <__udivmoddi4+0x92>
 8000d7c:	454b      	cmp	r3, r9
 8000d7e:	d2a9      	bcs.n	8000cd4 <__udivmoddi4+0x1f8>
 8000d80:	ebb9 0802 	subs.w	r8, r9, r2
 8000d84:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d88:	3801      	subs	r0, #1
 8000d8a:	e7a3      	b.n	8000cd4 <__udivmoddi4+0x1f8>
 8000d8c:	4646      	mov	r6, r8
 8000d8e:	e7ea      	b.n	8000d66 <__udivmoddi4+0x28a>
 8000d90:	4620      	mov	r0, r4
 8000d92:	e794      	b.n	8000cbe <__udivmoddi4+0x1e2>
 8000d94:	4640      	mov	r0, r8
 8000d96:	e7d1      	b.n	8000d3c <__udivmoddi4+0x260>
 8000d98:	46d0      	mov	r8, sl
 8000d9a:	e77b      	b.n	8000c94 <__udivmoddi4+0x1b8>
 8000d9c:	3b02      	subs	r3, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	e732      	b.n	8000c08 <__udivmoddi4+0x12c>
 8000da2:	4630      	mov	r0, r6
 8000da4:	e709      	b.n	8000bba <__udivmoddi4+0xde>
 8000da6:	4464      	add	r4, ip
 8000da8:	3802      	subs	r0, #2
 8000daa:	e742      	b.n	8000c32 <__udivmoddi4+0x156>

08000dac <__aeabi_idiv0>:
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop

08000db0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	607b      	str	r3, [r7, #4]
 8000dba:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <MX_DMA_Init+0x3c>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	4a0b      	ldr	r2, [pc, #44]	; (8000dec <MX_DMA_Init+0x3c>)
 8000dc0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc6:	4b09      	ldr	r3, [pc, #36]	; (8000dec <MX_DMA_Init+0x3c>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000dce:	607b      	str	r3, [r7, #4]
 8000dd0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	203b      	movs	r0, #59	; 0x3b
 8000dd8:	f000 fd25 	bl	8001826 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000ddc:	203b      	movs	r0, #59	; 0x3b
 8000dde:	f000 fd3e 	bl	800185e <HAL_NVIC_EnableIRQ>

}
 8000de2:	bf00      	nop
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40023800 	.word	0x40023800

08000df0 <Fast_SPI_Transmit>:
#include "fast_spi.h"

void Fast_SPI_Transmit (SPI_TypeDef *SPI, uint8_t *data, int size, bool include_crc)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b087      	sub	sp, #28
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	60b9      	str	r1, [r7, #8]
 8000dfa:	607a      	str	r2, [r7, #4]
 8000dfc:	70fb      	strb	r3, [r7, #3]
	// Transmit bytes over SPI without using HAL.


	if (include_crc) {
 8000dfe:	78fb      	ldrb	r3, [r7, #3]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d00b      	beq.n	8000e1c <Fast_SPI_Transmit+0x2c>
		SPI->CR1 &= ~SPI_CR1_CRCEN;
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	601a      	str	r2, [r3, #0]
		SPI->CR1 |= SPI_CR1_CRCEN;
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	601a      	str	r2, [r3, #0]
	2. Write the data to the Data Register
	3. After the data has been transmitted, wait for the BSY bit to reset in Status Register
	4. Clear the Overrun flag by reading DR and SR
	 ***********************************************/
	int i;
	for (i = 0; i < size; ++i)
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	617b      	str	r3, [r7, #20]
 8000e20:	e010      	b.n	8000e44 <Fast_SPI_Transmit+0x54>
	{
		// Used to wait for TXE bit to set -> This will indicate that the buffer is empty
		while (!(SPI->SR & SPI_SR_TXE)) {};
 8000e22:	bf00      	nop
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	689b      	ldr	r3, [r3, #8]
 8000e28:	f003 0302 	and.w	r3, r3, #2
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d0f9      	beq.n	8000e24 <Fast_SPI_Transmit+0x34>
		SPI->DR = data[i];  // load the data into the Data Register
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	68ba      	ldr	r2, [r7, #8]
 8000e34:	4413      	add	r3, r2
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	461a      	mov	r2, r3
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	60da      	str	r2, [r3, #12]
	for (i = 0; i < size; ++i)
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	3301      	adds	r3, #1
 8000e42:	617b      	str	r3, [r7, #20]
 8000e44:	697a      	ldr	r2, [r7, #20]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	dbea      	blt.n	8000e22 <Fast_SPI_Transmit+0x32>
	}

	if (include_crc)
 8000e4c:	78fb      	ldrb	r3, [r7, #3]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d005      	beq.n	8000e5e <Fast_SPI_Transmit+0x6e>
	{
		SPI->CR1 |= SPI_CR1_CRCNEXT;
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	601a      	str	r2, [r3, #0]
	 * mandatory to wait first until TXE is set and then until BSY is cleared after writing the last
	 * data.
	 */

	// Used to wait for TXE bit to set -> This will indicate that the buffer is empty
	while (!(SPI->SR & SPI_SR_TXE)) {};
 8000e5e:	bf00      	nop
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	689b      	ldr	r3, [r3, #8]
 8000e64:	f003 0302 	and.w	r3, r3, #2
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d0f9      	beq.n	8000e60 <Fast_SPI_Transmit+0x70>
	while ( SPI->SR & SPI_SR_BSY ) {};  // wait for BSY bit to Reset -> This will indicate that SPI is not busy in communication
 8000e6c:	bf00      	nop
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	689b      	ldr	r3, [r3, #8]
 8000e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d1f9      	bne.n	8000e6e <Fast_SPI_Transmit+0x7e>

	//  Clear the Overrun flag by reading DR and SR
	uint8_t temp = SPI->DR;
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	68db      	ldr	r3, [r3, #12]
 8000e7e:	74fb      	strb	r3, [r7, #19]
	temp = SPI->SR;
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	689b      	ldr	r3, [r3, #8]
 8000e84:	74fb      	strb	r3, [r7, #19]
}
 8000e86:	bf00      	nop
 8000e88:	371c      	adds	r7, #28
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
	...

08000e94 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b088      	sub	sp, #32
 8000e98:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9a:	f107 030c 	add.w	r3, r7, #12
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	605a      	str	r2, [r3, #4]
 8000ea4:	609a      	str	r2, [r3, #8]
 8000ea6:	60da      	str	r2, [r3, #12]
 8000ea8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60bb      	str	r3, [r7, #8]
 8000eae:	4b28      	ldr	r3, [pc, #160]	; (8000f50 <MX_GPIO_Init+0xbc>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	4a27      	ldr	r2, [pc, #156]	; (8000f50 <MX_GPIO_Init+0xbc>)
 8000eb4:	f043 0304 	orr.w	r3, r3, #4
 8000eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eba:	4b25      	ldr	r3, [pc, #148]	; (8000f50 <MX_GPIO_Init+0xbc>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	f003 0304 	and.w	r3, r3, #4
 8000ec2:	60bb      	str	r3, [r7, #8]
 8000ec4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	607b      	str	r3, [r7, #4]
 8000eca:	4b21      	ldr	r3, [pc, #132]	; (8000f50 <MX_GPIO_Init+0xbc>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	4a20      	ldr	r2, [pc, #128]	; (8000f50 <MX_GPIO_Init+0xbc>)
 8000ed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed6:	4b1e      	ldr	r3, [pc, #120]	; (8000f50 <MX_GPIO_Init+0xbc>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ede:	607b      	str	r3, [r7, #4]
 8000ee0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	603b      	str	r3, [r7, #0]
 8000ee6:	4b1a      	ldr	r3, [pc, #104]	; (8000f50 <MX_GPIO_Init+0xbc>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	4a19      	ldr	r2, [pc, #100]	; (8000f50 <MX_GPIO_Init+0xbc>)
 8000eec:	f043 0301 	orr.w	r3, r3, #1
 8000ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef2:	4b17      	ldr	r3, [pc, #92]	; (8000f50 <MX_GPIO_Init+0xbc>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	603b      	str	r3, [r7, #0]
 8000efc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 8000efe:	2200      	movs	r2, #0
 8000f00:	2108      	movs	r1, #8
 8000f02:	4814      	ldr	r0, [pc, #80]	; (8000f54 <MX_GPIO_Init+0xc0>)
 8000f04:	f001 f9f4 	bl	80022f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_SET);
 8000f08:	2201      	movs	r2, #1
 8000f0a:	2110      	movs	r1, #16
 8000f0c:	4811      	ldr	r0, [pc, #68]	; (8000f54 <MX_GPIO_Init+0xc0>)
 8000f0e:	f001 f9ef 	bl	80022f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IRQ_Pin;
 8000f12:	2304      	movs	r3, #4
 8000f14:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f16:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 8000f20:	f107 030c 	add.w	r3, r7, #12
 8000f24:	4619      	mov	r1, r3
 8000f26:	480b      	ldr	r0, [pc, #44]	; (8000f54 <MX_GPIO_Init+0xc0>)
 8000f28:	f001 f846 	bl	8001fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = CE_Pin|SPI1_CSN_Pin;
 8000f2c:	2318      	movs	r3, #24
 8000f2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f30:	2301      	movs	r3, #1
 8000f32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3c:	f107 030c 	add.w	r3, r7, #12
 8000f40:	4619      	mov	r1, r3
 8000f42:	4804      	ldr	r0, [pc, #16]	; (8000f54 <MX_GPIO_Init+0xc0>)
 8000f44:	f001 f838 	bl	8001fb8 <HAL_GPIO_Init>

}
 8000f48:	bf00      	nop
 8000f4a:	3720      	adds	r7, #32
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	40023800 	.word	0x40023800
 8000f54:	40020000 	.word	0x40020000

08000f58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f58:	b5b0      	push	{r4, r5, r7, lr}
 8000f5a:	b088      	sub	sp, #32
 8000f5c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f5e:	f000 faf1 	bl	8001544 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f62:	f000 f89b 	bl	800109c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
    CoreDebug -> DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // TIMING CODE
 8000f66:	4b42      	ldr	r3, [pc, #264]	; (8001070 <main+0x118>)
 8000f68:	68db      	ldr	r3, [r3, #12]
 8000f6a:	4a41      	ldr	r2, [pc, #260]	; (8001070 <main+0x118>)
 8000f6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f70:	60d3      	str	r3, [r2, #12]
  	DWT -> CYCCNT = 0;								  // TIMING CODE
 8000f72:	4b40      	ldr	r3, [pc, #256]	; (8001074 <main+0x11c>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	605a      	str	r2, [r3, #4]
  	DWT -> CTRL = DWT_CTRL_CYCCNTENA_Msk;			  // TIMING CODE
 8000f78:	4b3e      	ldr	r3, [pc, #248]	; (8001074 <main+0x11c>)
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	601a      	str	r2, [r3, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f7e:	f7ff ff89 	bl	8000e94 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f82:	f7ff ff15 	bl	8000db0 <MX_DMA_Init>
  MX_SPI1_Init();
 8000f86:	f000 f8f9 	bl	800117c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  // Disable CRC temporarily - will be re-enabled when transmitting to use hardware CRC calculation
  NRF24L01P_SPI->Instance->CR1 &= ~SPI_CR1_CRCEN;
 8000f8a:	4b3b      	ldr	r3, [pc, #236]	; (8001078 <main+0x120>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	4b39      	ldr	r3, [pc, #228]	; (8001078 <main+0x120>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000f98:	601a      	str	r2, [r3, #0]
  NRF24L01P_SPI->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f9a:	4b37      	ldr	r3, [pc, #220]	; (8001078 <main+0x120>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef RECEIVER
  	nrf24l01p_rx_init(2500, _2Mbps);
#endif

 #ifdef TRANSMITTER
	nrf24l01p_tx_init(2476, _2Mbps, _12dBm, (address){'2','N','o','d','e'}, false);
 8000fa0:	4a36      	ldr	r2, [pc, #216]	; (800107c <main+0x124>)
 8000fa2:	f107 030c 	add.w	r3, r7, #12
 8000fa6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000faa:	6018      	str	r0, [r3, #0]
 8000fac:	3304      	adds	r3, #4
 8000fae:	7019      	strb	r1, [r3, #0]
 8000fb0:	f107 030c 	add.w	r3, r7, #12
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	9200      	str	r2, [sp, #0]
 8000fb8:	2201      	movs	r2, #1
 8000fba:	2101      	movs	r1, #1
 8000fbc:	f640 10ac 	movw	r0, #2476	; 0x9ac
 8000fc0:	f003 f818 	bl	8003ff4 <nrf24l01p_tx_init>
	nrf24l01p_rx_set_address((address){'1','N','o','d','e'}, 1);
 8000fc4:	4a2e      	ldr	r2, [pc, #184]	; (8001080 <main+0x128>)
 8000fc6:	1d3b      	adds	r3, r7, #4
 8000fc8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fcc:	6018      	str	r0, [r3, #0]
 8000fce:	3304      	adds	r3, #4
 8000fd0:	7019      	strb	r1, [r3, #0]
 8000fd2:	1d3b      	adds	r3, r7, #4
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f003 f881 	bl	80040de <nrf24l01p_rx_set_address>
 #endif
	printDetails();
 8000fdc:	f002 ffae 	bl	8003f3c <printDetails>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		START_TICK = DWT -> CYCCNT; // TIMING CODE
 8000fe0:	4b24      	ldr	r3, [pc, #144]	; (8001074 <main+0x11c>)
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	4a27      	ldr	r2, [pc, #156]	; (8001084 <main+0x12c>)
 8000fe6:	6013      	str	r3, [r2, #0]
	  // Nothing to do
#endif

#ifdef TRANSMITTER

	  for(int i= 0; i < 32 - 1; i++)	// 32 - 1 because we need a byte for 8-bit CRC
 8000fe8:	2300      	movs	r3, #0
 8000fea:	617b      	str	r3, [r7, #20]
 8000fec:	e00d      	b.n	800100a <main+0xb2>
	  {
		  tx_data[i]++;
 8000fee:	4a26      	ldr	r2, [pc, #152]	; (8001088 <main+0x130>)
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	b2d9      	uxtb	r1, r3
 8000ffa:	4a23      	ldr	r2, [pc, #140]	; (8001088 <main+0x130>)
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	4413      	add	r3, r2
 8001000:	460a      	mov	r2, r1
 8001002:	701a      	strb	r2, [r3, #0]
	  for(int i= 0; i < 32 - 1; i++)	// 32 - 1 because we need a byte for 8-bit CRC
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	3301      	adds	r3, #1
 8001008:	617b      	str	r3, [r7, #20]
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	2b1e      	cmp	r3, #30
 800100e:	ddee      	ble.n	8000fee <main+0x96>
	  }

	  nrf24l01p_tx_transmit(tx_data, true);
 8001010:	2101      	movs	r1, #1
 8001012:	481d      	ldr	r0, [pc, #116]	; (8001088 <main+0x130>)
 8001014:	f003 f854 	bl	80040c0 <nrf24l01p_tx_transmit>
#endif

	  END_TICK = DWT -> CYCCNT;								 // TIMING CODE
 8001018:	4b16      	ldr	r3, [pc, #88]	; (8001074 <main+0x11c>)
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	4a1b      	ldr	r2, [pc, #108]	; (800108c <main+0x134>)
 800101e:	6013      	str	r3, [r2, #0]
	  dT = (END_TICK - START_TICK)/(SystemCoreClock/1000.0); // TIMING CODE
 8001020:	4b1a      	ldr	r3, [pc, #104]	; (800108c <main+0x134>)
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	4b17      	ldr	r3, [pc, #92]	; (8001084 <main+0x12c>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff fa62 	bl	80004f4 <__aeabi_ui2d>
 8001030:	4604      	mov	r4, r0
 8001032:	460d      	mov	r5, r1
 8001034:	4b16      	ldr	r3, [pc, #88]	; (8001090 <main+0x138>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff fa5b 	bl	80004f4 <__aeabi_ui2d>
 800103e:	f04f 0200 	mov.w	r2, #0
 8001042:	4b14      	ldr	r3, [pc, #80]	; (8001094 <main+0x13c>)
 8001044:	f7ff fbfa 	bl	800083c <__aeabi_ddiv>
 8001048:	4602      	mov	r2, r0
 800104a:	460b      	mov	r3, r1
 800104c:	4620      	mov	r0, r4
 800104e:	4629      	mov	r1, r5
 8001050:	f7ff fbf4 	bl	800083c <__aeabi_ddiv>
 8001054:	4602      	mov	r2, r0
 8001056:	460b      	mov	r3, r1
 8001058:	4610      	mov	r0, r2
 800105a:	4619      	mov	r1, r3
 800105c:	f7ff fcd6 	bl	8000a0c <__aeabi_d2f>
 8001060:	4603      	mov	r3, r0
 8001062:	4a0d      	ldr	r2, [pc, #52]	; (8001098 <main+0x140>)
 8001064:	6013      	str	r3, [r2, #0]
	  HAL_Delay(10);
 8001066:	200a      	movs	r0, #10
 8001068:	f000 fade 	bl	8001628 <HAL_Delay>
		START_TICK = DWT -> CYCCNT; // TIMING CODE
 800106c:	e7b8      	b.n	8000fe0 <main+0x88>
 800106e:	bf00      	nop
 8001070:	e000edf0 	.word	0xe000edf0
 8001074:	e0001000 	.word	0xe0001000
 8001078:	200000b8 	.word	0x200000b8
 800107c:	080055e8 	.word	0x080055e8
 8001080:	080055f0 	.word	0x080055f0
 8001084:	200000ac 	.word	0x200000ac
 8001088:	20000000 	.word	0x20000000
 800108c:	200000b0 	.word	0x200000b0
 8001090:	20000020 	.word	0x20000020
 8001094:	408f4000 	.word	0x408f4000
 8001098:	200000b4 	.word	0x200000b4

0800109c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b094      	sub	sp, #80	; 0x50
 80010a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010a2:	f107 0320 	add.w	r3, r7, #32
 80010a6:	2230      	movs	r2, #48	; 0x30
 80010a8:	2100      	movs	r1, #0
 80010aa:	4618      	mov	r0, r3
 80010ac:	f003 fa84 	bl	80045b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010b0:	f107 030c 	add.w	r3, r7, #12
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010c0:	2300      	movs	r3, #0
 80010c2:	60bb      	str	r3, [r7, #8]
 80010c4:	4b28      	ldr	r3, [pc, #160]	; (8001168 <SystemClock_Config+0xcc>)
 80010c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c8:	4a27      	ldr	r2, [pc, #156]	; (8001168 <SystemClock_Config+0xcc>)
 80010ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ce:	6413      	str	r3, [r2, #64]	; 0x40
 80010d0:	4b25      	ldr	r3, [pc, #148]	; (8001168 <SystemClock_Config+0xcc>)
 80010d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d8:	60bb      	str	r3, [r7, #8]
 80010da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010dc:	2300      	movs	r3, #0
 80010de:	607b      	str	r3, [r7, #4]
 80010e0:	4b22      	ldr	r3, [pc, #136]	; (800116c <SystemClock_Config+0xd0>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a21      	ldr	r2, [pc, #132]	; (800116c <SystemClock_Config+0xd0>)
 80010e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010ea:	6013      	str	r3, [r2, #0]
 80010ec:	4b1f      	ldr	r3, [pc, #124]	; (800116c <SystemClock_Config+0xd0>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010f4:	607b      	str	r3, [r7, #4]
 80010f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010f8:	2301      	movs	r3, #1
 80010fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001100:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001102:	2302      	movs	r3, #2
 8001104:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001106:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800110a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800110c:	2308      	movs	r3, #8
 800110e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001110:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001114:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001116:	2302      	movs	r3, #2
 8001118:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800111a:	2307      	movs	r3, #7
 800111c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800111e:	f107 0320 	add.w	r3, r7, #32
 8001122:	4618      	mov	r0, r3
 8001124:	f001 f8fe 	bl	8002324 <HAL_RCC_OscConfig>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800112e:	f000 f81f 	bl	8001170 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001132:	230f      	movs	r3, #15
 8001134:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001136:	2302      	movs	r3, #2
 8001138:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800113a:	2300      	movs	r3, #0
 800113c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800113e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001142:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001144:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001148:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800114a:	f107 030c 	add.w	r3, r7, #12
 800114e:	2105      	movs	r1, #5
 8001150:	4618      	mov	r0, r3
 8001152:	f001 fb5f 	bl	8002814 <HAL_RCC_ClockConfig>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800115c:	f000 f808 	bl	8001170 <Error_Handler>
  }
}
 8001160:	bf00      	nop
 8001162:	3750      	adds	r7, #80	; 0x50
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	40023800 	.word	0x40023800
 800116c:	40007000 	.word	0x40007000

08001170 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001174:	b672      	cpsid	i
}
 8001176:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001178:	e7fe      	b.n	8001178 <Error_Handler+0x8>
	...

0800117c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001180:	4b18      	ldr	r3, [pc, #96]	; (80011e4 <MX_SPI1_Init+0x68>)
 8001182:	4a19      	ldr	r2, [pc, #100]	; (80011e8 <MX_SPI1_Init+0x6c>)
 8001184:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001186:	4b17      	ldr	r3, [pc, #92]	; (80011e4 <MX_SPI1_Init+0x68>)
 8001188:	f44f 7282 	mov.w	r2, #260	; 0x104
 800118c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800118e:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <MX_SPI1_Init+0x68>)
 8001190:	2200      	movs	r2, #0
 8001192:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001194:	4b13      	ldr	r3, [pc, #76]	; (80011e4 <MX_SPI1_Init+0x68>)
 8001196:	2200      	movs	r2, #0
 8001198:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800119a:	4b12      	ldr	r3, [pc, #72]	; (80011e4 <MX_SPI1_Init+0x68>)
 800119c:	2200      	movs	r2, #0
 800119e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011a0:	4b10      	ldr	r3, [pc, #64]	; (80011e4 <MX_SPI1_Init+0x68>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011a6:	4b0f      	ldr	r3, [pc, #60]	; (80011e4 <MX_SPI1_Init+0x68>)
 80011a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011ac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80011ae:	4b0d      	ldr	r3, [pc, #52]	; (80011e4 <MX_SPI1_Init+0x68>)
 80011b0:	2218      	movs	r2, #24
 80011b2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011b4:	4b0b      	ldr	r3, [pc, #44]	; (80011e4 <MX_SPI1_Init+0x68>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011ba:	4b0a      	ldr	r3, [pc, #40]	; (80011e4 <MX_SPI1_Init+0x68>)
 80011bc:	2200      	movs	r2, #0
 80011be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_ENABLE;
 80011c0:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <MX_SPI1_Init+0x68>)
 80011c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011c6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 137;
 80011c8:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <MX_SPI1_Init+0x68>)
 80011ca:	2289      	movs	r2, #137	; 0x89
 80011cc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011ce:	4805      	ldr	r0, [pc, #20]	; (80011e4 <MX_SPI1_Init+0x68>)
 80011d0:	f001 fd0c 	bl	8002bec <HAL_SPI_Init>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80011da:	f7ff ffc9 	bl	8001170 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	200000b8 	.word	0x200000b8
 80011e8:	40013000 	.word	0x40013000

080011ec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b08a      	sub	sp, #40	; 0x28
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f4:	f107 0314 	add.w	r3, r7, #20
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	60da      	str	r2, [r3, #12]
 8001202:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a34      	ldr	r2, [pc, #208]	; (80012dc <HAL_SPI_MspInit+0xf0>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d161      	bne.n	80012d2 <HAL_SPI_MspInit+0xe6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	613b      	str	r3, [r7, #16]
 8001212:	4b33      	ldr	r3, [pc, #204]	; (80012e0 <HAL_SPI_MspInit+0xf4>)
 8001214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001216:	4a32      	ldr	r2, [pc, #200]	; (80012e0 <HAL_SPI_MspInit+0xf4>)
 8001218:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800121c:	6453      	str	r3, [r2, #68]	; 0x44
 800121e:	4b30      	ldr	r3, [pc, #192]	; (80012e0 <HAL_SPI_MspInit+0xf4>)
 8001220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001222:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001226:	613b      	str	r3, [r7, #16]
 8001228:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	60fb      	str	r3, [r7, #12]
 800122e:	4b2c      	ldr	r3, [pc, #176]	; (80012e0 <HAL_SPI_MspInit+0xf4>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	4a2b      	ldr	r2, [pc, #172]	; (80012e0 <HAL_SPI_MspInit+0xf4>)
 8001234:	f043 0301 	orr.w	r3, r3, #1
 8001238:	6313      	str	r3, [r2, #48]	; 0x30
 800123a:	4b29      	ldr	r3, [pc, #164]	; (80012e0 <HAL_SPI_MspInit+0xf4>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001246:	23e0      	movs	r3, #224	; 0xe0
 8001248:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124a:	2302      	movs	r3, #2
 800124c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124e:	2300      	movs	r3, #0
 8001250:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001252:	2303      	movs	r3, #3
 8001254:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001256:	2305      	movs	r3, #5
 8001258:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125a:	f107 0314 	add.w	r3, r7, #20
 800125e:	4619      	mov	r1, r3
 8001260:	4820      	ldr	r0, [pc, #128]	; (80012e4 <HAL_SPI_MspInit+0xf8>)
 8001262:	f000 fea9 	bl	8001fb8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001266:	4b20      	ldr	r3, [pc, #128]	; (80012e8 <HAL_SPI_MspInit+0xfc>)
 8001268:	4a20      	ldr	r2, [pc, #128]	; (80012ec <HAL_SPI_MspInit+0x100>)
 800126a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800126c:	4b1e      	ldr	r3, [pc, #120]	; (80012e8 <HAL_SPI_MspInit+0xfc>)
 800126e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001272:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001274:	4b1c      	ldr	r3, [pc, #112]	; (80012e8 <HAL_SPI_MspInit+0xfc>)
 8001276:	2240      	movs	r2, #64	; 0x40
 8001278:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800127a:	4b1b      	ldr	r3, [pc, #108]	; (80012e8 <HAL_SPI_MspInit+0xfc>)
 800127c:	2200      	movs	r2, #0
 800127e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001280:	4b19      	ldr	r3, [pc, #100]	; (80012e8 <HAL_SPI_MspInit+0xfc>)
 8001282:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001286:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001288:	4b17      	ldr	r3, [pc, #92]	; (80012e8 <HAL_SPI_MspInit+0xfc>)
 800128a:	2200      	movs	r2, #0
 800128c:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800128e:	4b16      	ldr	r3, [pc, #88]	; (80012e8 <HAL_SPI_MspInit+0xfc>)
 8001290:	2200      	movs	r2, #0
 8001292:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001294:	4b14      	ldr	r3, [pc, #80]	; (80012e8 <HAL_SPI_MspInit+0xfc>)
 8001296:	2200      	movs	r2, #0
 8001298:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800129a:	4b13      	ldr	r3, [pc, #76]	; (80012e8 <HAL_SPI_MspInit+0xfc>)
 800129c:	2200      	movs	r2, #0
 800129e:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012a0:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <HAL_SPI_MspInit+0xfc>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80012a6:	4810      	ldr	r0, [pc, #64]	; (80012e8 <HAL_SPI_MspInit+0xfc>)
 80012a8:	f000 faf4 	bl	8001894 <HAL_DMA_Init>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 80012b2:	f7ff ff5d 	bl	8001170 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a0b      	ldr	r2, [pc, #44]	; (80012e8 <HAL_SPI_MspInit+0xfc>)
 80012ba:	649a      	str	r2, [r3, #72]	; 0x48
 80012bc:	4a0a      	ldr	r2, [pc, #40]	; (80012e8 <HAL_SPI_MspInit+0xfc>)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80012c2:	2200      	movs	r2, #0
 80012c4:	2100      	movs	r1, #0
 80012c6:	2023      	movs	r0, #35	; 0x23
 80012c8:	f000 faad 	bl	8001826 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80012cc:	2023      	movs	r0, #35	; 0x23
 80012ce:	f000 fac6 	bl	800185e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80012d2:	bf00      	nop
 80012d4:	3728      	adds	r7, #40	; 0x28
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40013000 	.word	0x40013000
 80012e0:	40023800 	.word	0x40023800
 80012e4:	40020000 	.word	0x40020000
 80012e8:	20000110 	.word	0x20000110
 80012ec:	40026458 	.word	0x40026458

080012f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	607b      	str	r3, [r7, #4]
 80012fa:	4b10      	ldr	r3, [pc, #64]	; (800133c <HAL_MspInit+0x4c>)
 80012fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fe:	4a0f      	ldr	r2, [pc, #60]	; (800133c <HAL_MspInit+0x4c>)
 8001300:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001304:	6453      	str	r3, [r2, #68]	; 0x44
 8001306:	4b0d      	ldr	r3, [pc, #52]	; (800133c <HAL_MspInit+0x4c>)
 8001308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800130e:	607b      	str	r3, [r7, #4]
 8001310:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	603b      	str	r3, [r7, #0]
 8001316:	4b09      	ldr	r3, [pc, #36]	; (800133c <HAL_MspInit+0x4c>)
 8001318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131a:	4a08      	ldr	r2, [pc, #32]	; (800133c <HAL_MspInit+0x4c>)
 800131c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001320:	6413      	str	r3, [r2, #64]	; 0x40
 8001322:	4b06      	ldr	r3, [pc, #24]	; (800133c <HAL_MspInit+0x4c>)
 8001324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800132a:	603b      	str	r3, [r7, #0]
 800132c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800132e:	2007      	movs	r0, #7
 8001330:	f000 fa6e 	bl	8001810 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001334:	bf00      	nop
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40023800 	.word	0x40023800

08001340 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001344:	e7fe      	b.n	8001344 <NMI_Handler+0x4>

08001346 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800134a:	e7fe      	b.n	800134a <HardFault_Handler+0x4>

0800134c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001350:	e7fe      	b.n	8001350 <MemManage_Handler+0x4>

08001352 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001352:	b480      	push	{r7}
 8001354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001356:	e7fe      	b.n	8001356 <BusFault_Handler+0x4>

08001358 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800135c:	e7fe      	b.n	800135c <UsageFault_Handler+0x4>

0800135e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800135e:	b480      	push	{r7}
 8001360:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr

0800137a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800137a:	b480      	push	{r7}
 800137c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800137e:	bf00      	nop
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800138c:	f000 f92c 	bl	80015e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001390:	bf00      	nop
 8001392:	bd80      	pop	{r7, pc}

08001394 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001398:	4802      	ldr	r0, [pc, #8]	; (80013a4 <SPI1_IRQHandler+0x10>)
 800139a:	f002 f921 	bl	80035e0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	200000b8 	.word	0x200000b8

080013a8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80013ac:	4802      	ldr	r0, [pc, #8]	; (80013b8 <DMA2_Stream3_IRQHandler+0x10>)
 80013ae:	f000 fb99 	bl	8001ae4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000110 	.word	0x20000110

080013bc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b086      	sub	sp, #24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	60f8      	str	r0, [r7, #12]
 80013c4:	60b9      	str	r1, [r7, #8]
 80013c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013c8:	2300      	movs	r3, #0
 80013ca:	617b      	str	r3, [r7, #20]
 80013cc:	e00a      	b.n	80013e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013ce:	f3af 8000 	nop.w
 80013d2:	4601      	mov	r1, r0
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	1c5a      	adds	r2, r3, #1
 80013d8:	60ba      	str	r2, [r7, #8]
 80013da:	b2ca      	uxtb	r2, r1
 80013dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	3301      	adds	r3, #1
 80013e2:	617b      	str	r3, [r7, #20]
 80013e4:	697a      	ldr	r2, [r7, #20]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	dbf0      	blt.n	80013ce <_read+0x12>
  }

  return len;
 80013ec:	687b      	ldr	r3, [r7, #4]
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3718      	adds	r7, #24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <_close>:
  }
  return len;
}

int _close(int file)
{
 80013f6:	b480      	push	{r7}
 80013f8:	b083      	sub	sp, #12
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001402:	4618      	mov	r0, r3
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr

0800140e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800140e:	b480      	push	{r7}
 8001410:	b083      	sub	sp, #12
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
 8001416:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800141e:	605a      	str	r2, [r3, #4]
  return 0;
 8001420:	2300      	movs	r3, #0
}
 8001422:	4618      	mov	r0, r3
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr

0800142e <_isatty>:

int _isatty(int file)
{
 800142e:	b480      	push	{r7}
 8001430:	b083      	sub	sp, #12
 8001432:	af00      	add	r7, sp, #0
 8001434:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001436:	2301      	movs	r3, #1
}
 8001438:	4618      	mov	r0, r3
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	3714      	adds	r7, #20
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
	...

08001460 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001468:	4a14      	ldr	r2, [pc, #80]	; (80014bc <_sbrk+0x5c>)
 800146a:	4b15      	ldr	r3, [pc, #84]	; (80014c0 <_sbrk+0x60>)
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001474:	4b13      	ldr	r3, [pc, #76]	; (80014c4 <_sbrk+0x64>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d102      	bne.n	8001482 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800147c:	4b11      	ldr	r3, [pc, #68]	; (80014c4 <_sbrk+0x64>)
 800147e:	4a12      	ldr	r2, [pc, #72]	; (80014c8 <_sbrk+0x68>)
 8001480:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001482:	4b10      	ldr	r3, [pc, #64]	; (80014c4 <_sbrk+0x64>)
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4413      	add	r3, r2
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	429a      	cmp	r2, r3
 800148e:	d207      	bcs.n	80014a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001490:	f003 f858 	bl	8004544 <__errno>
 8001494:	4603      	mov	r3, r0
 8001496:	220c      	movs	r2, #12
 8001498:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800149a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800149e:	e009      	b.n	80014b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014a0:	4b08      	ldr	r3, [pc, #32]	; (80014c4 <_sbrk+0x64>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014a6:	4b07      	ldr	r3, [pc, #28]	; (80014c4 <_sbrk+0x64>)
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4413      	add	r3, r2
 80014ae:	4a05      	ldr	r2, [pc, #20]	; (80014c4 <_sbrk+0x64>)
 80014b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014b2:	68fb      	ldr	r3, [r7, #12]
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3718      	adds	r7, #24
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20020000 	.word	0x20020000
 80014c0:	00000400 	.word	0x00000400
 80014c4:	20000170 	.word	0x20000170
 80014c8:	20000188 	.word	0x20000188

080014cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014d0:	4b06      	ldr	r3, [pc, #24]	; (80014ec <SystemInit+0x20>)
 80014d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014d6:	4a05      	ldr	r2, [pc, #20]	; (80014ec <SystemInit+0x20>)
 80014d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	e000ed00 	.word	0xe000ed00

080014f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80014f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001528 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014f4:	480d      	ldr	r0, [pc, #52]	; (800152c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014f6:	490e      	ldr	r1, [pc, #56]	; (8001530 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014f8:	4a0e      	ldr	r2, [pc, #56]	; (8001534 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014fc:	e002      	b.n	8001504 <LoopCopyDataInit>

080014fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001500:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001502:	3304      	adds	r3, #4

08001504 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001504:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001506:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001508:	d3f9      	bcc.n	80014fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800150a:	4a0b      	ldr	r2, [pc, #44]	; (8001538 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800150c:	4c0b      	ldr	r4, [pc, #44]	; (800153c <LoopFillZerobss+0x26>)
  movs r3, #0
 800150e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001510:	e001      	b.n	8001516 <LoopFillZerobss>

08001512 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001512:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001514:	3204      	adds	r2, #4

08001516 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001516:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001518:	d3fb      	bcc.n	8001512 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800151a:	f7ff ffd7 	bl	80014cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800151e:	f003 f817 	bl	8004550 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001522:	f7ff fd19 	bl	8000f58 <main>
  bx  lr    
 8001526:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001528:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800152c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001530:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001534:	080057b0 	.word	0x080057b0
  ldr r2, =_sbss
 8001538:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 800153c:	20000188 	.word	0x20000188

08001540 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001540:	e7fe      	b.n	8001540 <ADC_IRQHandler>
	...

08001544 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001548:	4b0e      	ldr	r3, [pc, #56]	; (8001584 <HAL_Init+0x40>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a0d      	ldr	r2, [pc, #52]	; (8001584 <HAL_Init+0x40>)
 800154e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001552:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001554:	4b0b      	ldr	r3, [pc, #44]	; (8001584 <HAL_Init+0x40>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a0a      	ldr	r2, [pc, #40]	; (8001584 <HAL_Init+0x40>)
 800155a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800155e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001560:	4b08      	ldr	r3, [pc, #32]	; (8001584 <HAL_Init+0x40>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a07      	ldr	r2, [pc, #28]	; (8001584 <HAL_Init+0x40>)
 8001566:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800156a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800156c:	2003      	movs	r0, #3
 800156e:	f000 f94f 	bl	8001810 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001572:	2000      	movs	r0, #0
 8001574:	f000 f808 	bl	8001588 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001578:	f7ff feba 	bl	80012f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40023c00 	.word	0x40023c00

08001588 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001590:	4b12      	ldr	r3, [pc, #72]	; (80015dc <HAL_InitTick+0x54>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	4b12      	ldr	r3, [pc, #72]	; (80015e0 <HAL_InitTick+0x58>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	4619      	mov	r1, r3
 800159a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800159e:	fbb3 f3f1 	udiv	r3, r3, r1
 80015a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015a6:	4618      	mov	r0, r3
 80015a8:	f000 f967 	bl	800187a <HAL_SYSTICK_Config>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e00e      	b.n	80015d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2b0f      	cmp	r3, #15
 80015ba:	d80a      	bhi.n	80015d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015bc:	2200      	movs	r2, #0
 80015be:	6879      	ldr	r1, [r7, #4]
 80015c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015c4:	f000 f92f 	bl	8001826 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015c8:	4a06      	ldr	r2, [pc, #24]	; (80015e4 <HAL_InitTick+0x5c>)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015ce:	2300      	movs	r3, #0
 80015d0:	e000      	b.n	80015d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20000020 	.word	0x20000020
 80015e0:	20000028 	.word	0x20000028
 80015e4:	20000024 	.word	0x20000024

080015e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015ec:	4b06      	ldr	r3, [pc, #24]	; (8001608 <HAL_IncTick+0x20>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	461a      	mov	r2, r3
 80015f2:	4b06      	ldr	r3, [pc, #24]	; (800160c <HAL_IncTick+0x24>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4413      	add	r3, r2
 80015f8:	4a04      	ldr	r2, [pc, #16]	; (800160c <HAL_IncTick+0x24>)
 80015fa:	6013      	str	r3, [r2, #0]
}
 80015fc:	bf00      	nop
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	20000028 	.word	0x20000028
 800160c:	20000174 	.word	0x20000174

08001610 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  return uwTick;
 8001614:	4b03      	ldr	r3, [pc, #12]	; (8001624 <HAL_GetTick+0x14>)
 8001616:	681b      	ldr	r3, [r3, #0]
}
 8001618:	4618      	mov	r0, r3
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	20000174 	.word	0x20000174

08001628 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001630:	f7ff ffee 	bl	8001610 <HAL_GetTick>
 8001634:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001640:	d005      	beq.n	800164e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001642:	4b0a      	ldr	r3, [pc, #40]	; (800166c <HAL_Delay+0x44>)
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	461a      	mov	r2, r3
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	4413      	add	r3, r2
 800164c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800164e:	bf00      	nop
 8001650:	f7ff ffde 	bl	8001610 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	68fa      	ldr	r2, [r7, #12]
 800165c:	429a      	cmp	r2, r3
 800165e:	d8f7      	bhi.n	8001650 <HAL_Delay+0x28>
  {
  }
}
 8001660:	bf00      	nop
 8001662:	bf00      	nop
 8001664:	3710      	adds	r7, #16
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20000028 	.word	0x20000028

08001670 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f003 0307 	and.w	r3, r3, #7
 800167e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001680:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001686:	68ba      	ldr	r2, [r7, #8]
 8001688:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800168c:	4013      	ands	r3, r2
 800168e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001698:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800169c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016a2:	4a04      	ldr	r2, [pc, #16]	; (80016b4 <__NVIC_SetPriorityGrouping+0x44>)
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	60d3      	str	r3, [r2, #12]
}
 80016a8:	bf00      	nop
 80016aa:	3714      	adds	r7, #20
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	e000ed00 	.word	0xe000ed00

080016b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016bc:	4b04      	ldr	r3, [pc, #16]	; (80016d0 <__NVIC_GetPriorityGrouping+0x18>)
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	0a1b      	lsrs	r3, r3, #8
 80016c2:	f003 0307 	and.w	r3, r3, #7
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	e000ed00 	.word	0xe000ed00

080016d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	4603      	mov	r3, r0
 80016dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	db0b      	blt.n	80016fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016e6:	79fb      	ldrb	r3, [r7, #7]
 80016e8:	f003 021f 	and.w	r2, r3, #31
 80016ec:	4907      	ldr	r1, [pc, #28]	; (800170c <__NVIC_EnableIRQ+0x38>)
 80016ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f2:	095b      	lsrs	r3, r3, #5
 80016f4:	2001      	movs	r0, #1
 80016f6:	fa00 f202 	lsl.w	r2, r0, r2
 80016fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	e000e100 	.word	0xe000e100

08001710 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	6039      	str	r1, [r7, #0]
 800171a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800171c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001720:	2b00      	cmp	r3, #0
 8001722:	db0a      	blt.n	800173a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	b2da      	uxtb	r2, r3
 8001728:	490c      	ldr	r1, [pc, #48]	; (800175c <__NVIC_SetPriority+0x4c>)
 800172a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172e:	0112      	lsls	r2, r2, #4
 8001730:	b2d2      	uxtb	r2, r2
 8001732:	440b      	add	r3, r1
 8001734:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001738:	e00a      	b.n	8001750 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	b2da      	uxtb	r2, r3
 800173e:	4908      	ldr	r1, [pc, #32]	; (8001760 <__NVIC_SetPriority+0x50>)
 8001740:	79fb      	ldrb	r3, [r7, #7]
 8001742:	f003 030f 	and.w	r3, r3, #15
 8001746:	3b04      	subs	r3, #4
 8001748:	0112      	lsls	r2, r2, #4
 800174a:	b2d2      	uxtb	r2, r2
 800174c:	440b      	add	r3, r1
 800174e:	761a      	strb	r2, [r3, #24]
}
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	e000e100 	.word	0xe000e100
 8001760:	e000ed00 	.word	0xe000ed00

08001764 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001764:	b480      	push	{r7}
 8001766:	b089      	sub	sp, #36	; 0x24
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	60b9      	str	r1, [r7, #8]
 800176e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f003 0307 	and.w	r3, r3, #7
 8001776:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	f1c3 0307 	rsb	r3, r3, #7
 800177e:	2b04      	cmp	r3, #4
 8001780:	bf28      	it	cs
 8001782:	2304      	movcs	r3, #4
 8001784:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	3304      	adds	r3, #4
 800178a:	2b06      	cmp	r3, #6
 800178c:	d902      	bls.n	8001794 <NVIC_EncodePriority+0x30>
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	3b03      	subs	r3, #3
 8001792:	e000      	b.n	8001796 <NVIC_EncodePriority+0x32>
 8001794:	2300      	movs	r3, #0
 8001796:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001798:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	fa02 f303 	lsl.w	r3, r2, r3
 80017a2:	43da      	mvns	r2, r3
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	401a      	ands	r2, r3
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	fa01 f303 	lsl.w	r3, r1, r3
 80017b6:	43d9      	mvns	r1, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017bc:	4313      	orrs	r3, r2
         );
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3724      	adds	r7, #36	; 0x24
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
	...

080017cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	3b01      	subs	r3, #1
 80017d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017dc:	d301      	bcc.n	80017e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017de:	2301      	movs	r3, #1
 80017e0:	e00f      	b.n	8001802 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017e2:	4a0a      	ldr	r2, [pc, #40]	; (800180c <SysTick_Config+0x40>)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	3b01      	subs	r3, #1
 80017e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ea:	210f      	movs	r1, #15
 80017ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017f0:	f7ff ff8e 	bl	8001710 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017f4:	4b05      	ldr	r3, [pc, #20]	; (800180c <SysTick_Config+0x40>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017fa:	4b04      	ldr	r3, [pc, #16]	; (800180c <SysTick_Config+0x40>)
 80017fc:	2207      	movs	r2, #7
 80017fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	e000e010 	.word	0xe000e010

08001810 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f7ff ff29 	bl	8001670 <__NVIC_SetPriorityGrouping>
}
 800181e:	bf00      	nop
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001826:	b580      	push	{r7, lr}
 8001828:	b086      	sub	sp, #24
 800182a:	af00      	add	r7, sp, #0
 800182c:	4603      	mov	r3, r0
 800182e:	60b9      	str	r1, [r7, #8]
 8001830:	607a      	str	r2, [r7, #4]
 8001832:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001834:	2300      	movs	r3, #0
 8001836:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001838:	f7ff ff3e 	bl	80016b8 <__NVIC_GetPriorityGrouping>
 800183c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	68b9      	ldr	r1, [r7, #8]
 8001842:	6978      	ldr	r0, [r7, #20]
 8001844:	f7ff ff8e 	bl	8001764 <NVIC_EncodePriority>
 8001848:	4602      	mov	r2, r0
 800184a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800184e:	4611      	mov	r1, r2
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff ff5d 	bl	8001710 <__NVIC_SetPriority>
}
 8001856:	bf00      	nop
 8001858:	3718      	adds	r7, #24
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800185e:	b580      	push	{r7, lr}
 8001860:	b082      	sub	sp, #8
 8001862:	af00      	add	r7, sp, #0
 8001864:	4603      	mov	r3, r0
 8001866:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff ff31 	bl	80016d4 <__NVIC_EnableIRQ>
}
 8001872:	bf00      	nop
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b082      	sub	sp, #8
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f7ff ffa2 	bl	80017cc <SysTick_Config>
 8001888:	4603      	mov	r3, r0
}
 800188a:	4618      	mov	r0, r3
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
	...

08001894 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b086      	sub	sp, #24
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80018a0:	f7ff feb6 	bl	8001610 <HAL_GetTick>
 80018a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d101      	bne.n	80018b0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e099      	b.n	80019e4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2202      	movs	r2, #2
 80018b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f022 0201 	bic.w	r2, r2, #1
 80018ce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018d0:	e00f      	b.n	80018f2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018d2:	f7ff fe9d 	bl	8001610 <HAL_GetTick>
 80018d6:	4602      	mov	r2, r0
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	2b05      	cmp	r3, #5
 80018de:	d908      	bls.n	80018f2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2220      	movs	r2, #32
 80018e4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2203      	movs	r2, #3
 80018ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e078      	b.n	80019e4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0301 	and.w	r3, r3, #1
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d1e8      	bne.n	80018d2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001908:	697a      	ldr	r2, [r7, #20]
 800190a:	4b38      	ldr	r3, [pc, #224]	; (80019ec <HAL_DMA_Init+0x158>)
 800190c:	4013      	ands	r3, r2
 800190e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685a      	ldr	r2, [r3, #4]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800191e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	691b      	ldr	r3, [r3, #16]
 8001924:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800192a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001936:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6a1b      	ldr	r3, [r3, #32]
 800193c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800193e:	697a      	ldr	r2, [r7, #20]
 8001940:	4313      	orrs	r3, r2
 8001942:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001948:	2b04      	cmp	r3, #4
 800194a:	d107      	bne.n	800195c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001954:	4313      	orrs	r3, r2
 8001956:	697a      	ldr	r2, [r7, #20]
 8001958:	4313      	orrs	r3, r2
 800195a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	697a      	ldr	r2, [r7, #20]
 8001962:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	695b      	ldr	r3, [r3, #20]
 800196a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	f023 0307 	bic.w	r3, r3, #7
 8001972:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001978:	697a      	ldr	r2, [r7, #20]
 800197a:	4313      	orrs	r3, r2
 800197c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001982:	2b04      	cmp	r3, #4
 8001984:	d117      	bne.n	80019b6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800198a:	697a      	ldr	r2, [r7, #20]
 800198c:	4313      	orrs	r3, r2
 800198e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001994:	2b00      	cmp	r3, #0
 8001996:	d00e      	beq.n	80019b6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f000 fa91 	bl	8001ec0 <DMA_CheckFifoParam>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d008      	beq.n	80019b6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2240      	movs	r2, #64	; 0x40
 80019a8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2201      	movs	r2, #1
 80019ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80019b2:	2301      	movs	r3, #1
 80019b4:	e016      	b.n	80019e4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	697a      	ldr	r2, [r7, #20]
 80019bc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f000 fa48 	bl	8001e54 <DMA_CalcBaseAndBitshift>
 80019c4:	4603      	mov	r3, r0
 80019c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019cc:	223f      	movs	r2, #63	; 0x3f
 80019ce:	409a      	lsls	r2, r3
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2201      	movs	r2, #1
 80019de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80019e2:	2300      	movs	r3, #0
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3718      	adds	r7, #24
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	f010803f 	.word	0xf010803f

080019f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b086      	sub	sp, #24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
 80019fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80019fe:	2300      	movs	r3, #0
 8001a00:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a06:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d101      	bne.n	8001a16 <HAL_DMA_Start_IT+0x26>
 8001a12:	2302      	movs	r3, #2
 8001a14:	e040      	b.n	8001a98 <HAL_DMA_Start_IT+0xa8>
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d12f      	bne.n	8001a8a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2202      	movs	r2, #2
 8001a2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2200      	movs	r2, #0
 8001a36:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	68b9      	ldr	r1, [r7, #8]
 8001a3e:	68f8      	ldr	r0, [r7, #12]
 8001a40:	f000 f9da 	bl	8001df8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a48:	223f      	movs	r2, #63	; 0x3f
 8001a4a:	409a      	lsls	r2, r3
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f042 0216 	orr.w	r2, r2, #22
 8001a5e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d007      	beq.n	8001a78 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f042 0208 	orr.w	r2, r2, #8
 8001a76:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f042 0201 	orr.w	r2, r2, #1
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	e005      	b.n	8001a96 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001a92:	2302      	movs	r3, #2
 8001a94:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001a96:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3718      	adds	r7, #24
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d004      	beq.n	8001abe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2280      	movs	r2, #128	; 0x80
 8001ab8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e00c      	b.n	8001ad8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2205      	movs	r2, #5
 8001ac2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f022 0201 	bic.w	r2, r2, #1
 8001ad4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ad6:	2300      	movs	r3, #0
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001aec:	2300      	movs	r3, #0
 8001aee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001af0:	4b8e      	ldr	r3, [pc, #568]	; (8001d2c <HAL_DMA_IRQHandler+0x248>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a8e      	ldr	r2, [pc, #568]	; (8001d30 <HAL_DMA_IRQHandler+0x24c>)
 8001af6:	fba2 2303 	umull	r2, r3, r2, r3
 8001afa:	0a9b      	lsrs	r3, r3, #10
 8001afc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b02:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b0e:	2208      	movs	r2, #8
 8001b10:	409a      	lsls	r2, r3
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	4013      	ands	r3, r2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d01a      	beq.n	8001b50 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0304 	and.w	r3, r3, #4
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d013      	beq.n	8001b50 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f022 0204 	bic.w	r2, r2, #4
 8001b36:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b3c:	2208      	movs	r2, #8
 8001b3e:	409a      	lsls	r2, r3
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b48:	f043 0201 	orr.w	r2, r3, #1
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b54:	2201      	movs	r2, #1
 8001b56:	409a      	lsls	r2, r3
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d012      	beq.n	8001b86 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	695b      	ldr	r3, [r3, #20]
 8001b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d00b      	beq.n	8001b86 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b72:	2201      	movs	r2, #1
 8001b74:	409a      	lsls	r2, r3
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b7e:	f043 0202 	orr.w	r2, r3, #2
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b8a:	2204      	movs	r2, #4
 8001b8c:	409a      	lsls	r2, r3
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	4013      	ands	r3, r2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d012      	beq.n	8001bbc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0302 	and.w	r3, r3, #2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d00b      	beq.n	8001bbc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ba8:	2204      	movs	r2, #4
 8001baa:	409a      	lsls	r2, r3
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bb4:	f043 0204 	orr.w	r2, r3, #4
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bc0:	2210      	movs	r2, #16
 8001bc2:	409a      	lsls	r2, r3
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d043      	beq.n	8001c54 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0308 	and.w	r3, r3, #8
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d03c      	beq.n	8001c54 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bde:	2210      	movs	r2, #16
 8001be0:	409a      	lsls	r2, r3
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d018      	beq.n	8001c26 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d108      	bne.n	8001c14 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d024      	beq.n	8001c54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	4798      	blx	r3
 8001c12:	e01f      	b.n	8001c54 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d01b      	beq.n	8001c54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	4798      	blx	r3
 8001c24:	e016      	b.n	8001c54 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d107      	bne.n	8001c44 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f022 0208 	bic.w	r2, r2, #8
 8001c42:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d003      	beq.n	8001c54 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c58:	2220      	movs	r2, #32
 8001c5a:	409a      	lsls	r2, r3
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	f000 808f 	beq.w	8001d84 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0310 	and.w	r3, r3, #16
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	f000 8087 	beq.w	8001d84 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c7a:	2220      	movs	r2, #32
 8001c7c:	409a      	lsls	r2, r3
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	2b05      	cmp	r3, #5
 8001c8c:	d136      	bne.n	8001cfc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f022 0216 	bic.w	r2, r2, #22
 8001c9c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	695a      	ldr	r2, [r3, #20]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001cac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d103      	bne.n	8001cbe <HAL_DMA_IRQHandler+0x1da>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d007      	beq.n	8001cce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f022 0208 	bic.w	r2, r2, #8
 8001ccc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cd2:	223f      	movs	r2, #63	; 0x3f
 8001cd4:	409a      	lsls	r2, r3
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2201      	movs	r2, #1
 8001cde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d07e      	beq.n	8001df0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	4798      	blx	r3
        }
        return;
 8001cfa:	e079      	b.n	8001df0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d01d      	beq.n	8001d46 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d10d      	bne.n	8001d34 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d031      	beq.n	8001d84 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	4798      	blx	r3
 8001d28:	e02c      	b.n	8001d84 <HAL_DMA_IRQHandler+0x2a0>
 8001d2a:	bf00      	nop
 8001d2c:	20000020 	.word	0x20000020
 8001d30:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d023      	beq.n	8001d84 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	4798      	blx	r3
 8001d44:	e01e      	b.n	8001d84 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d10f      	bne.n	8001d74 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f022 0210 	bic.w	r2, r2, #16
 8001d62:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d003      	beq.n	8001d84 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d032      	beq.n	8001df2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d90:	f003 0301 	and.w	r3, r3, #1
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d022      	beq.n	8001dde <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2205      	movs	r2, #5
 8001d9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f022 0201 	bic.w	r2, r2, #1
 8001dae:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	3301      	adds	r3, #1
 8001db4:	60bb      	str	r3, [r7, #8]
 8001db6:	697a      	ldr	r2, [r7, #20]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d307      	bcc.n	8001dcc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d1f2      	bne.n	8001db0 <HAL_DMA_IRQHandler+0x2cc>
 8001dca:	e000      	b.n	8001dce <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001dcc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d005      	beq.n	8001df2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	4798      	blx	r3
 8001dee:	e000      	b.n	8001df2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001df0:	bf00      	nop
    }
  }
}
 8001df2:	3718      	adds	r7, #24
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b085      	sub	sp, #20
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	60b9      	str	r1, [r7, #8]
 8001e02:	607a      	str	r2, [r7, #4]
 8001e04:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001e14:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	683a      	ldr	r2, [r7, #0]
 8001e1c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	2b40      	cmp	r3, #64	; 0x40
 8001e24:	d108      	bne.n	8001e38 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	68ba      	ldr	r2, [r7, #8]
 8001e34:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001e36:	e007      	b.n	8001e48 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	68ba      	ldr	r2, [r7, #8]
 8001e3e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	60da      	str	r2, [r3, #12]
}
 8001e48:	bf00      	nop
 8001e4a:	3714      	adds	r7, #20
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b085      	sub	sp, #20
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	3b10      	subs	r3, #16
 8001e64:	4a14      	ldr	r2, [pc, #80]	; (8001eb8 <DMA_CalcBaseAndBitshift+0x64>)
 8001e66:	fba2 2303 	umull	r2, r3, r2, r3
 8001e6a:	091b      	lsrs	r3, r3, #4
 8001e6c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001e6e:	4a13      	ldr	r2, [pc, #76]	; (8001ebc <DMA_CalcBaseAndBitshift+0x68>)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	4413      	add	r3, r2
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	461a      	mov	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2b03      	cmp	r3, #3
 8001e80:	d909      	bls.n	8001e96 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001e8a:	f023 0303 	bic.w	r3, r3, #3
 8001e8e:	1d1a      	adds	r2, r3, #4
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	659a      	str	r2, [r3, #88]	; 0x58
 8001e94:	e007      	b.n	8001ea6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001e9e:	f023 0303 	bic.w	r3, r3, #3
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3714      	adds	r7, #20
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	aaaaaaab 	.word	0xaaaaaaab
 8001ebc:	08005700 	.word	0x08005700

08001ec0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	699b      	ldr	r3, [r3, #24]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d11f      	bne.n	8001f1a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	2b03      	cmp	r3, #3
 8001ede:	d856      	bhi.n	8001f8e <DMA_CheckFifoParam+0xce>
 8001ee0:	a201      	add	r2, pc, #4	; (adr r2, 8001ee8 <DMA_CheckFifoParam+0x28>)
 8001ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ee6:	bf00      	nop
 8001ee8:	08001ef9 	.word	0x08001ef9
 8001eec:	08001f0b 	.word	0x08001f0b
 8001ef0:	08001ef9 	.word	0x08001ef9
 8001ef4:	08001f8f 	.word	0x08001f8f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001efc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d046      	beq.n	8001f92 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f08:	e043      	b.n	8001f92 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f0e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f12:	d140      	bne.n	8001f96 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f18:	e03d      	b.n	8001f96 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	699b      	ldr	r3, [r3, #24]
 8001f1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f22:	d121      	bne.n	8001f68 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	2b03      	cmp	r3, #3
 8001f28:	d837      	bhi.n	8001f9a <DMA_CheckFifoParam+0xda>
 8001f2a:	a201      	add	r2, pc, #4	; (adr r2, 8001f30 <DMA_CheckFifoParam+0x70>)
 8001f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f30:	08001f41 	.word	0x08001f41
 8001f34:	08001f47 	.word	0x08001f47
 8001f38:	08001f41 	.word	0x08001f41
 8001f3c:	08001f59 	.word	0x08001f59
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	73fb      	strb	r3, [r7, #15]
      break;
 8001f44:	e030      	b.n	8001fa8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d025      	beq.n	8001f9e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f56:	e022      	b.n	8001f9e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f5c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f60:	d11f      	bne.n	8001fa2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001f66:	e01c      	b.n	8001fa2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d903      	bls.n	8001f76 <DMA_CheckFifoParam+0xb6>
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	2b03      	cmp	r3, #3
 8001f72:	d003      	beq.n	8001f7c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001f74:	e018      	b.n	8001fa8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	73fb      	strb	r3, [r7, #15]
      break;
 8001f7a:	e015      	b.n	8001fa8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d00e      	beq.n	8001fa6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	73fb      	strb	r3, [r7, #15]
      break;
 8001f8c:	e00b      	b.n	8001fa6 <DMA_CheckFifoParam+0xe6>
      break;
 8001f8e:	bf00      	nop
 8001f90:	e00a      	b.n	8001fa8 <DMA_CheckFifoParam+0xe8>
      break;
 8001f92:	bf00      	nop
 8001f94:	e008      	b.n	8001fa8 <DMA_CheckFifoParam+0xe8>
      break;
 8001f96:	bf00      	nop
 8001f98:	e006      	b.n	8001fa8 <DMA_CheckFifoParam+0xe8>
      break;
 8001f9a:	bf00      	nop
 8001f9c:	e004      	b.n	8001fa8 <DMA_CheckFifoParam+0xe8>
      break;
 8001f9e:	bf00      	nop
 8001fa0:	e002      	b.n	8001fa8 <DMA_CheckFifoParam+0xe8>
      break;   
 8001fa2:	bf00      	nop
 8001fa4:	e000      	b.n	8001fa8 <DMA_CheckFifoParam+0xe8>
      break;
 8001fa6:	bf00      	nop
    }
  } 
  
  return status; 
 8001fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3714      	adds	r7, #20
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop

08001fb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b089      	sub	sp, #36	; 0x24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fce:	2300      	movs	r3, #0
 8001fd0:	61fb      	str	r3, [r7, #28]
 8001fd2:	e16b      	b.n	80022ac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	697a      	ldr	r2, [r7, #20]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fe8:	693a      	ldr	r2, [r7, #16]
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	f040 815a 	bne.w	80022a6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f003 0303 	and.w	r3, r3, #3
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d005      	beq.n	800200a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002006:	2b02      	cmp	r3, #2
 8002008:	d130      	bne.n	800206c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	2203      	movs	r2, #3
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	43db      	mvns	r3, r3
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	4013      	ands	r3, r2
 8002020:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	68da      	ldr	r2, [r3, #12]
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	fa02 f303 	lsl.w	r3, r2, r3
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	4313      	orrs	r3, r2
 8002032:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002040:	2201      	movs	r2, #1
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	43db      	mvns	r3, r3
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	4013      	ands	r3, r2
 800204e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	091b      	lsrs	r3, r3, #4
 8002056:	f003 0201 	and.w	r2, r3, #1
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	4313      	orrs	r3, r2
 8002064:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f003 0303 	and.w	r3, r3, #3
 8002074:	2b03      	cmp	r3, #3
 8002076:	d017      	beq.n	80020a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	2203      	movs	r2, #3
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	43db      	mvns	r3, r3
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	4013      	ands	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	689a      	ldr	r2, [r3, #8]
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	4313      	orrs	r3, r2
 80020a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f003 0303 	and.w	r3, r3, #3
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d123      	bne.n	80020fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	08da      	lsrs	r2, r3, #3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	3208      	adds	r2, #8
 80020bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	f003 0307 	and.w	r3, r3, #7
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	220f      	movs	r2, #15
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	43db      	mvns	r3, r3
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	4013      	ands	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	691a      	ldr	r2, [r3, #16]
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	f003 0307 	and.w	r3, r3, #7
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	08da      	lsrs	r2, r3, #3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	3208      	adds	r2, #8
 80020f6:	69b9      	ldr	r1, [r7, #24]
 80020f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	2203      	movs	r2, #3
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	43db      	mvns	r3, r3
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	4013      	ands	r3, r2
 8002112:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f003 0203 	and.w	r2, r3, #3
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	4313      	orrs	r3, r2
 8002128:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002138:	2b00      	cmp	r3, #0
 800213a:	f000 80b4 	beq.w	80022a6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800213e:	2300      	movs	r3, #0
 8002140:	60fb      	str	r3, [r7, #12]
 8002142:	4b60      	ldr	r3, [pc, #384]	; (80022c4 <HAL_GPIO_Init+0x30c>)
 8002144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002146:	4a5f      	ldr	r2, [pc, #380]	; (80022c4 <HAL_GPIO_Init+0x30c>)
 8002148:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800214c:	6453      	str	r3, [r2, #68]	; 0x44
 800214e:	4b5d      	ldr	r3, [pc, #372]	; (80022c4 <HAL_GPIO_Init+0x30c>)
 8002150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002152:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002156:	60fb      	str	r3, [r7, #12]
 8002158:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800215a:	4a5b      	ldr	r2, [pc, #364]	; (80022c8 <HAL_GPIO_Init+0x310>)
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	089b      	lsrs	r3, r3, #2
 8002160:	3302      	adds	r3, #2
 8002162:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002166:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	f003 0303 	and.w	r3, r3, #3
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	220f      	movs	r2, #15
 8002172:	fa02 f303 	lsl.w	r3, r2, r3
 8002176:	43db      	mvns	r3, r3
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	4013      	ands	r3, r2
 800217c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a52      	ldr	r2, [pc, #328]	; (80022cc <HAL_GPIO_Init+0x314>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d02b      	beq.n	80021de <HAL_GPIO_Init+0x226>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a51      	ldr	r2, [pc, #324]	; (80022d0 <HAL_GPIO_Init+0x318>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d025      	beq.n	80021da <HAL_GPIO_Init+0x222>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a50      	ldr	r2, [pc, #320]	; (80022d4 <HAL_GPIO_Init+0x31c>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d01f      	beq.n	80021d6 <HAL_GPIO_Init+0x21e>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a4f      	ldr	r2, [pc, #316]	; (80022d8 <HAL_GPIO_Init+0x320>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d019      	beq.n	80021d2 <HAL_GPIO_Init+0x21a>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a4e      	ldr	r2, [pc, #312]	; (80022dc <HAL_GPIO_Init+0x324>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d013      	beq.n	80021ce <HAL_GPIO_Init+0x216>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a4d      	ldr	r2, [pc, #308]	; (80022e0 <HAL_GPIO_Init+0x328>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d00d      	beq.n	80021ca <HAL_GPIO_Init+0x212>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a4c      	ldr	r2, [pc, #304]	; (80022e4 <HAL_GPIO_Init+0x32c>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d007      	beq.n	80021c6 <HAL_GPIO_Init+0x20e>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a4b      	ldr	r2, [pc, #300]	; (80022e8 <HAL_GPIO_Init+0x330>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d101      	bne.n	80021c2 <HAL_GPIO_Init+0x20a>
 80021be:	2307      	movs	r3, #7
 80021c0:	e00e      	b.n	80021e0 <HAL_GPIO_Init+0x228>
 80021c2:	2308      	movs	r3, #8
 80021c4:	e00c      	b.n	80021e0 <HAL_GPIO_Init+0x228>
 80021c6:	2306      	movs	r3, #6
 80021c8:	e00a      	b.n	80021e0 <HAL_GPIO_Init+0x228>
 80021ca:	2305      	movs	r3, #5
 80021cc:	e008      	b.n	80021e0 <HAL_GPIO_Init+0x228>
 80021ce:	2304      	movs	r3, #4
 80021d0:	e006      	b.n	80021e0 <HAL_GPIO_Init+0x228>
 80021d2:	2303      	movs	r3, #3
 80021d4:	e004      	b.n	80021e0 <HAL_GPIO_Init+0x228>
 80021d6:	2302      	movs	r3, #2
 80021d8:	e002      	b.n	80021e0 <HAL_GPIO_Init+0x228>
 80021da:	2301      	movs	r3, #1
 80021dc:	e000      	b.n	80021e0 <HAL_GPIO_Init+0x228>
 80021de:	2300      	movs	r3, #0
 80021e0:	69fa      	ldr	r2, [r7, #28]
 80021e2:	f002 0203 	and.w	r2, r2, #3
 80021e6:	0092      	lsls	r2, r2, #2
 80021e8:	4093      	lsls	r3, r2
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021f0:	4935      	ldr	r1, [pc, #212]	; (80022c8 <HAL_GPIO_Init+0x310>)
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	089b      	lsrs	r3, r3, #2
 80021f6:	3302      	adds	r3, #2
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021fe:	4b3b      	ldr	r3, [pc, #236]	; (80022ec <HAL_GPIO_Init+0x334>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	43db      	mvns	r3, r3
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	4013      	ands	r3, r2
 800220c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d003      	beq.n	8002222 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	4313      	orrs	r3, r2
 8002220:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002222:	4a32      	ldr	r2, [pc, #200]	; (80022ec <HAL_GPIO_Init+0x334>)
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002228:	4b30      	ldr	r3, [pc, #192]	; (80022ec <HAL_GPIO_Init+0x334>)
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	43db      	mvns	r3, r3
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	4013      	ands	r3, r2
 8002236:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d003      	beq.n	800224c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	4313      	orrs	r3, r2
 800224a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800224c:	4a27      	ldr	r2, [pc, #156]	; (80022ec <HAL_GPIO_Init+0x334>)
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002252:	4b26      	ldr	r3, [pc, #152]	; (80022ec <HAL_GPIO_Init+0x334>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	43db      	mvns	r3, r3
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	4013      	ands	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d003      	beq.n	8002276 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	4313      	orrs	r3, r2
 8002274:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002276:	4a1d      	ldr	r2, [pc, #116]	; (80022ec <HAL_GPIO_Init+0x334>)
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800227c:	4b1b      	ldr	r3, [pc, #108]	; (80022ec <HAL_GPIO_Init+0x334>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	43db      	mvns	r3, r3
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	4013      	ands	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d003      	beq.n	80022a0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	4313      	orrs	r3, r2
 800229e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022a0:	4a12      	ldr	r2, [pc, #72]	; (80022ec <HAL_GPIO_Init+0x334>)
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	3301      	adds	r3, #1
 80022aa:	61fb      	str	r3, [r7, #28]
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	2b0f      	cmp	r3, #15
 80022b0:	f67f ae90 	bls.w	8001fd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022b4:	bf00      	nop
 80022b6:	bf00      	nop
 80022b8:	3724      	adds	r7, #36	; 0x24
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	40023800 	.word	0x40023800
 80022c8:	40013800 	.word	0x40013800
 80022cc:	40020000 	.word	0x40020000
 80022d0:	40020400 	.word	0x40020400
 80022d4:	40020800 	.word	0x40020800
 80022d8:	40020c00 	.word	0x40020c00
 80022dc:	40021000 	.word	0x40021000
 80022e0:	40021400 	.word	0x40021400
 80022e4:	40021800 	.word	0x40021800
 80022e8:	40021c00 	.word	0x40021c00
 80022ec:	40013c00 	.word	0x40013c00

080022f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	460b      	mov	r3, r1
 80022fa:	807b      	strh	r3, [r7, #2]
 80022fc:	4613      	mov	r3, r2
 80022fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002300:	787b      	ldrb	r3, [r7, #1]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d003      	beq.n	800230e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002306:	887a      	ldrh	r2, [r7, #2]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800230c:	e003      	b.n	8002316 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800230e:	887b      	ldrh	r3, [r7, #2]
 8002310:	041a      	lsls	r2, r3, #16
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	619a      	str	r2, [r3, #24]
}
 8002316:	bf00      	nop
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
	...

08002324 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b086      	sub	sp, #24
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d101      	bne.n	8002336 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e267      	b.n	8002806 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	2b00      	cmp	r3, #0
 8002340:	d075      	beq.n	800242e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002342:	4b88      	ldr	r3, [pc, #544]	; (8002564 <HAL_RCC_OscConfig+0x240>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f003 030c 	and.w	r3, r3, #12
 800234a:	2b04      	cmp	r3, #4
 800234c:	d00c      	beq.n	8002368 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800234e:	4b85      	ldr	r3, [pc, #532]	; (8002564 <HAL_RCC_OscConfig+0x240>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002356:	2b08      	cmp	r3, #8
 8002358:	d112      	bne.n	8002380 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800235a:	4b82      	ldr	r3, [pc, #520]	; (8002564 <HAL_RCC_OscConfig+0x240>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002362:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002366:	d10b      	bne.n	8002380 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002368:	4b7e      	ldr	r3, [pc, #504]	; (8002564 <HAL_RCC_OscConfig+0x240>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d05b      	beq.n	800242c <HAL_RCC_OscConfig+0x108>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d157      	bne.n	800242c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e242      	b.n	8002806 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002388:	d106      	bne.n	8002398 <HAL_RCC_OscConfig+0x74>
 800238a:	4b76      	ldr	r3, [pc, #472]	; (8002564 <HAL_RCC_OscConfig+0x240>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a75      	ldr	r2, [pc, #468]	; (8002564 <HAL_RCC_OscConfig+0x240>)
 8002390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002394:	6013      	str	r3, [r2, #0]
 8002396:	e01d      	b.n	80023d4 <HAL_RCC_OscConfig+0xb0>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023a0:	d10c      	bne.n	80023bc <HAL_RCC_OscConfig+0x98>
 80023a2:	4b70      	ldr	r3, [pc, #448]	; (8002564 <HAL_RCC_OscConfig+0x240>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a6f      	ldr	r2, [pc, #444]	; (8002564 <HAL_RCC_OscConfig+0x240>)
 80023a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023ac:	6013      	str	r3, [r2, #0]
 80023ae:	4b6d      	ldr	r3, [pc, #436]	; (8002564 <HAL_RCC_OscConfig+0x240>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a6c      	ldr	r2, [pc, #432]	; (8002564 <HAL_RCC_OscConfig+0x240>)
 80023b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023b8:	6013      	str	r3, [r2, #0]
 80023ba:	e00b      	b.n	80023d4 <HAL_RCC_OscConfig+0xb0>
 80023bc:	4b69      	ldr	r3, [pc, #420]	; (8002564 <HAL_RCC_OscConfig+0x240>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a68      	ldr	r2, [pc, #416]	; (8002564 <HAL_RCC_OscConfig+0x240>)
 80023c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023c6:	6013      	str	r3, [r2, #0]
 80023c8:	4b66      	ldr	r3, [pc, #408]	; (8002564 <HAL_RCC_OscConfig+0x240>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a65      	ldr	r2, [pc, #404]	; (8002564 <HAL_RCC_OscConfig+0x240>)
 80023ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d013      	beq.n	8002404 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023dc:	f7ff f918 	bl	8001610 <HAL_GetTick>
 80023e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023e2:	e008      	b.n	80023f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023e4:	f7ff f914 	bl	8001610 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b64      	cmp	r3, #100	; 0x64
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e207      	b.n	8002806 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f6:	4b5b      	ldr	r3, [pc, #364]	; (8002564 <HAL_RCC_OscConfig+0x240>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d0f0      	beq.n	80023e4 <HAL_RCC_OscConfig+0xc0>
 8002402:	e014      	b.n	800242e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002404:	f7ff f904 	bl	8001610 <HAL_GetTick>
 8002408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800240a:	e008      	b.n	800241e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800240c:	f7ff f900 	bl	8001610 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b64      	cmp	r3, #100	; 0x64
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e1f3      	b.n	8002806 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800241e:	4b51      	ldr	r3, [pc, #324]	; (8002564 <HAL_RCC_OscConfig+0x240>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1f0      	bne.n	800240c <HAL_RCC_OscConfig+0xe8>
 800242a:	e000      	b.n	800242e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800242c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d063      	beq.n	8002502 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800243a:	4b4a      	ldr	r3, [pc, #296]	; (8002564 <HAL_RCC_OscConfig+0x240>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f003 030c 	and.w	r3, r3, #12
 8002442:	2b00      	cmp	r3, #0
 8002444:	d00b      	beq.n	800245e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002446:	4b47      	ldr	r3, [pc, #284]	; (8002564 <HAL_RCC_OscConfig+0x240>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800244e:	2b08      	cmp	r3, #8
 8002450:	d11c      	bne.n	800248c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002452:	4b44      	ldr	r3, [pc, #272]	; (8002564 <HAL_RCC_OscConfig+0x240>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d116      	bne.n	800248c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800245e:	4b41      	ldr	r3, [pc, #260]	; (8002564 <HAL_RCC_OscConfig+0x240>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	2b00      	cmp	r3, #0
 8002468:	d005      	beq.n	8002476 <HAL_RCC_OscConfig+0x152>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d001      	beq.n	8002476 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e1c7      	b.n	8002806 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002476:	4b3b      	ldr	r3, [pc, #236]	; (8002564 <HAL_RCC_OscConfig+0x240>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	4937      	ldr	r1, [pc, #220]	; (8002564 <HAL_RCC_OscConfig+0x240>)
 8002486:	4313      	orrs	r3, r2
 8002488:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800248a:	e03a      	b.n	8002502 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d020      	beq.n	80024d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002494:	4b34      	ldr	r3, [pc, #208]	; (8002568 <HAL_RCC_OscConfig+0x244>)
 8002496:	2201      	movs	r2, #1
 8002498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800249a:	f7ff f8b9 	bl	8001610 <HAL_GetTick>
 800249e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024a0:	e008      	b.n	80024b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024a2:	f7ff f8b5 	bl	8001610 <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d901      	bls.n	80024b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e1a8      	b.n	8002806 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b4:	4b2b      	ldr	r3, [pc, #172]	; (8002564 <HAL_RCC_OscConfig+0x240>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d0f0      	beq.n	80024a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024c0:	4b28      	ldr	r3, [pc, #160]	; (8002564 <HAL_RCC_OscConfig+0x240>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	691b      	ldr	r3, [r3, #16]
 80024cc:	00db      	lsls	r3, r3, #3
 80024ce:	4925      	ldr	r1, [pc, #148]	; (8002564 <HAL_RCC_OscConfig+0x240>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	600b      	str	r3, [r1, #0]
 80024d4:	e015      	b.n	8002502 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024d6:	4b24      	ldr	r3, [pc, #144]	; (8002568 <HAL_RCC_OscConfig+0x244>)
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024dc:	f7ff f898 	bl	8001610 <HAL_GetTick>
 80024e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024e2:	e008      	b.n	80024f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024e4:	f7ff f894 	bl	8001610 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e187      	b.n	8002806 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024f6:	4b1b      	ldr	r3, [pc, #108]	; (8002564 <HAL_RCC_OscConfig+0x240>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1f0      	bne.n	80024e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0308 	and.w	r3, r3, #8
 800250a:	2b00      	cmp	r3, #0
 800250c:	d036      	beq.n	800257c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	695b      	ldr	r3, [r3, #20]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d016      	beq.n	8002544 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002516:	4b15      	ldr	r3, [pc, #84]	; (800256c <HAL_RCC_OscConfig+0x248>)
 8002518:	2201      	movs	r2, #1
 800251a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800251c:	f7ff f878 	bl	8001610 <HAL_GetTick>
 8002520:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002522:	e008      	b.n	8002536 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002524:	f7ff f874 	bl	8001610 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b02      	cmp	r3, #2
 8002530:	d901      	bls.n	8002536 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e167      	b.n	8002806 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002536:	4b0b      	ldr	r3, [pc, #44]	; (8002564 <HAL_RCC_OscConfig+0x240>)
 8002538:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d0f0      	beq.n	8002524 <HAL_RCC_OscConfig+0x200>
 8002542:	e01b      	b.n	800257c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002544:	4b09      	ldr	r3, [pc, #36]	; (800256c <HAL_RCC_OscConfig+0x248>)
 8002546:	2200      	movs	r2, #0
 8002548:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800254a:	f7ff f861 	bl	8001610 <HAL_GetTick>
 800254e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002550:	e00e      	b.n	8002570 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002552:	f7ff f85d 	bl	8001610 <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d907      	bls.n	8002570 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e150      	b.n	8002806 <HAL_RCC_OscConfig+0x4e2>
 8002564:	40023800 	.word	0x40023800
 8002568:	42470000 	.word	0x42470000
 800256c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002570:	4b88      	ldr	r3, [pc, #544]	; (8002794 <HAL_RCC_OscConfig+0x470>)
 8002572:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002574:	f003 0302 	and.w	r3, r3, #2
 8002578:	2b00      	cmp	r3, #0
 800257a:	d1ea      	bne.n	8002552 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0304 	and.w	r3, r3, #4
 8002584:	2b00      	cmp	r3, #0
 8002586:	f000 8097 	beq.w	80026b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800258a:	2300      	movs	r3, #0
 800258c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800258e:	4b81      	ldr	r3, [pc, #516]	; (8002794 <HAL_RCC_OscConfig+0x470>)
 8002590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d10f      	bne.n	80025ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800259a:	2300      	movs	r3, #0
 800259c:	60bb      	str	r3, [r7, #8]
 800259e:	4b7d      	ldr	r3, [pc, #500]	; (8002794 <HAL_RCC_OscConfig+0x470>)
 80025a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a2:	4a7c      	ldr	r2, [pc, #496]	; (8002794 <HAL_RCC_OscConfig+0x470>)
 80025a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025a8:	6413      	str	r3, [r2, #64]	; 0x40
 80025aa:	4b7a      	ldr	r3, [pc, #488]	; (8002794 <HAL_RCC_OscConfig+0x470>)
 80025ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025b2:	60bb      	str	r3, [r7, #8]
 80025b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025b6:	2301      	movs	r3, #1
 80025b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ba:	4b77      	ldr	r3, [pc, #476]	; (8002798 <HAL_RCC_OscConfig+0x474>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d118      	bne.n	80025f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025c6:	4b74      	ldr	r3, [pc, #464]	; (8002798 <HAL_RCC_OscConfig+0x474>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a73      	ldr	r2, [pc, #460]	; (8002798 <HAL_RCC_OscConfig+0x474>)
 80025cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025d2:	f7ff f81d 	bl	8001610 <HAL_GetTick>
 80025d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025d8:	e008      	b.n	80025ec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025da:	f7ff f819 	bl	8001610 <HAL_GetTick>
 80025de:	4602      	mov	r2, r0
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d901      	bls.n	80025ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e10c      	b.n	8002806 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ec:	4b6a      	ldr	r3, [pc, #424]	; (8002798 <HAL_RCC_OscConfig+0x474>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d0f0      	beq.n	80025da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d106      	bne.n	800260e <HAL_RCC_OscConfig+0x2ea>
 8002600:	4b64      	ldr	r3, [pc, #400]	; (8002794 <HAL_RCC_OscConfig+0x470>)
 8002602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002604:	4a63      	ldr	r2, [pc, #396]	; (8002794 <HAL_RCC_OscConfig+0x470>)
 8002606:	f043 0301 	orr.w	r3, r3, #1
 800260a:	6713      	str	r3, [r2, #112]	; 0x70
 800260c:	e01c      	b.n	8002648 <HAL_RCC_OscConfig+0x324>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	2b05      	cmp	r3, #5
 8002614:	d10c      	bne.n	8002630 <HAL_RCC_OscConfig+0x30c>
 8002616:	4b5f      	ldr	r3, [pc, #380]	; (8002794 <HAL_RCC_OscConfig+0x470>)
 8002618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800261a:	4a5e      	ldr	r2, [pc, #376]	; (8002794 <HAL_RCC_OscConfig+0x470>)
 800261c:	f043 0304 	orr.w	r3, r3, #4
 8002620:	6713      	str	r3, [r2, #112]	; 0x70
 8002622:	4b5c      	ldr	r3, [pc, #368]	; (8002794 <HAL_RCC_OscConfig+0x470>)
 8002624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002626:	4a5b      	ldr	r2, [pc, #364]	; (8002794 <HAL_RCC_OscConfig+0x470>)
 8002628:	f043 0301 	orr.w	r3, r3, #1
 800262c:	6713      	str	r3, [r2, #112]	; 0x70
 800262e:	e00b      	b.n	8002648 <HAL_RCC_OscConfig+0x324>
 8002630:	4b58      	ldr	r3, [pc, #352]	; (8002794 <HAL_RCC_OscConfig+0x470>)
 8002632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002634:	4a57      	ldr	r2, [pc, #348]	; (8002794 <HAL_RCC_OscConfig+0x470>)
 8002636:	f023 0301 	bic.w	r3, r3, #1
 800263a:	6713      	str	r3, [r2, #112]	; 0x70
 800263c:	4b55      	ldr	r3, [pc, #340]	; (8002794 <HAL_RCC_OscConfig+0x470>)
 800263e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002640:	4a54      	ldr	r2, [pc, #336]	; (8002794 <HAL_RCC_OscConfig+0x470>)
 8002642:	f023 0304 	bic.w	r3, r3, #4
 8002646:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d015      	beq.n	800267c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002650:	f7fe ffde 	bl	8001610 <HAL_GetTick>
 8002654:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002656:	e00a      	b.n	800266e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002658:	f7fe ffda 	bl	8001610 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	f241 3288 	movw	r2, #5000	; 0x1388
 8002666:	4293      	cmp	r3, r2
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e0cb      	b.n	8002806 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800266e:	4b49      	ldr	r3, [pc, #292]	; (8002794 <HAL_RCC_OscConfig+0x470>)
 8002670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	2b00      	cmp	r3, #0
 8002678:	d0ee      	beq.n	8002658 <HAL_RCC_OscConfig+0x334>
 800267a:	e014      	b.n	80026a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800267c:	f7fe ffc8 	bl	8001610 <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002682:	e00a      	b.n	800269a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002684:	f7fe ffc4 	bl	8001610 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002692:	4293      	cmp	r3, r2
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e0b5      	b.n	8002806 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800269a:	4b3e      	ldr	r3, [pc, #248]	; (8002794 <HAL_RCC_OscConfig+0x470>)
 800269c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1ee      	bne.n	8002684 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026a6:	7dfb      	ldrb	r3, [r7, #23]
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d105      	bne.n	80026b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026ac:	4b39      	ldr	r3, [pc, #228]	; (8002794 <HAL_RCC_OscConfig+0x470>)
 80026ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b0:	4a38      	ldr	r2, [pc, #224]	; (8002794 <HAL_RCC_OscConfig+0x470>)
 80026b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026b6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	699b      	ldr	r3, [r3, #24]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	f000 80a1 	beq.w	8002804 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026c2:	4b34      	ldr	r3, [pc, #208]	; (8002794 <HAL_RCC_OscConfig+0x470>)
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f003 030c 	and.w	r3, r3, #12
 80026ca:	2b08      	cmp	r3, #8
 80026cc:	d05c      	beq.n	8002788 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d141      	bne.n	800275a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026d6:	4b31      	ldr	r3, [pc, #196]	; (800279c <HAL_RCC_OscConfig+0x478>)
 80026d8:	2200      	movs	r2, #0
 80026da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026dc:	f7fe ff98 	bl	8001610 <HAL_GetTick>
 80026e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026e2:	e008      	b.n	80026f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026e4:	f7fe ff94 	bl	8001610 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e087      	b.n	8002806 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026f6:	4b27      	ldr	r3, [pc, #156]	; (8002794 <HAL_RCC_OscConfig+0x470>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d1f0      	bne.n	80026e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	69da      	ldr	r2, [r3, #28]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a1b      	ldr	r3, [r3, #32]
 800270a:	431a      	orrs	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002710:	019b      	lsls	r3, r3, #6
 8002712:	431a      	orrs	r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002718:	085b      	lsrs	r3, r3, #1
 800271a:	3b01      	subs	r3, #1
 800271c:	041b      	lsls	r3, r3, #16
 800271e:	431a      	orrs	r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002724:	061b      	lsls	r3, r3, #24
 8002726:	491b      	ldr	r1, [pc, #108]	; (8002794 <HAL_RCC_OscConfig+0x470>)
 8002728:	4313      	orrs	r3, r2
 800272a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800272c:	4b1b      	ldr	r3, [pc, #108]	; (800279c <HAL_RCC_OscConfig+0x478>)
 800272e:	2201      	movs	r2, #1
 8002730:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002732:	f7fe ff6d 	bl	8001610 <HAL_GetTick>
 8002736:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002738:	e008      	b.n	800274c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800273a:	f7fe ff69 	bl	8001610 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	2b02      	cmp	r3, #2
 8002746:	d901      	bls.n	800274c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e05c      	b.n	8002806 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800274c:	4b11      	ldr	r3, [pc, #68]	; (8002794 <HAL_RCC_OscConfig+0x470>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d0f0      	beq.n	800273a <HAL_RCC_OscConfig+0x416>
 8002758:	e054      	b.n	8002804 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800275a:	4b10      	ldr	r3, [pc, #64]	; (800279c <HAL_RCC_OscConfig+0x478>)
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002760:	f7fe ff56 	bl	8001610 <HAL_GetTick>
 8002764:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002766:	e008      	b.n	800277a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002768:	f7fe ff52 	bl	8001610 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b02      	cmp	r3, #2
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e045      	b.n	8002806 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800277a:	4b06      	ldr	r3, [pc, #24]	; (8002794 <HAL_RCC_OscConfig+0x470>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d1f0      	bne.n	8002768 <HAL_RCC_OscConfig+0x444>
 8002786:	e03d      	b.n	8002804 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	2b01      	cmp	r3, #1
 800278e:	d107      	bne.n	80027a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e038      	b.n	8002806 <HAL_RCC_OscConfig+0x4e2>
 8002794:	40023800 	.word	0x40023800
 8002798:	40007000 	.word	0x40007000
 800279c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027a0:	4b1b      	ldr	r3, [pc, #108]	; (8002810 <HAL_RCC_OscConfig+0x4ec>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d028      	beq.n	8002800 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d121      	bne.n	8002800 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d11a      	bne.n	8002800 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80027d0:	4013      	ands	r3, r2
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027d8:	4293      	cmp	r3, r2
 80027da:	d111      	bne.n	8002800 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e6:	085b      	lsrs	r3, r3, #1
 80027e8:	3b01      	subs	r3, #1
 80027ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d107      	bne.n	8002800 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d001      	beq.n	8002804 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e000      	b.n	8002806 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3718      	adds	r7, #24
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	40023800 	.word	0x40023800

08002814 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d101      	bne.n	8002828 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e0cc      	b.n	80029c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002828:	4b68      	ldr	r3, [pc, #416]	; (80029cc <HAL_RCC_ClockConfig+0x1b8>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0307 	and.w	r3, r3, #7
 8002830:	683a      	ldr	r2, [r7, #0]
 8002832:	429a      	cmp	r2, r3
 8002834:	d90c      	bls.n	8002850 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002836:	4b65      	ldr	r3, [pc, #404]	; (80029cc <HAL_RCC_ClockConfig+0x1b8>)
 8002838:	683a      	ldr	r2, [r7, #0]
 800283a:	b2d2      	uxtb	r2, r2
 800283c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800283e:	4b63      	ldr	r3, [pc, #396]	; (80029cc <HAL_RCC_ClockConfig+0x1b8>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0307 	and.w	r3, r3, #7
 8002846:	683a      	ldr	r2, [r7, #0]
 8002848:	429a      	cmp	r2, r3
 800284a:	d001      	beq.n	8002850 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e0b8      	b.n	80029c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0302 	and.w	r3, r3, #2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d020      	beq.n	800289e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0304 	and.w	r3, r3, #4
 8002864:	2b00      	cmp	r3, #0
 8002866:	d005      	beq.n	8002874 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002868:	4b59      	ldr	r3, [pc, #356]	; (80029d0 <HAL_RCC_ClockConfig+0x1bc>)
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	4a58      	ldr	r2, [pc, #352]	; (80029d0 <HAL_RCC_ClockConfig+0x1bc>)
 800286e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002872:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0308 	and.w	r3, r3, #8
 800287c:	2b00      	cmp	r3, #0
 800287e:	d005      	beq.n	800288c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002880:	4b53      	ldr	r3, [pc, #332]	; (80029d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	4a52      	ldr	r2, [pc, #328]	; (80029d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002886:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800288a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800288c:	4b50      	ldr	r3, [pc, #320]	; (80029d0 <HAL_RCC_ClockConfig+0x1bc>)
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	494d      	ldr	r1, [pc, #308]	; (80029d0 <HAL_RCC_ClockConfig+0x1bc>)
 800289a:	4313      	orrs	r3, r2
 800289c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d044      	beq.n	8002934 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d107      	bne.n	80028c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028b2:	4b47      	ldr	r3, [pc, #284]	; (80029d0 <HAL_RCC_ClockConfig+0x1bc>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d119      	bne.n	80028f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e07f      	b.n	80029c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d003      	beq.n	80028d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028ce:	2b03      	cmp	r3, #3
 80028d0:	d107      	bne.n	80028e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028d2:	4b3f      	ldr	r3, [pc, #252]	; (80029d0 <HAL_RCC_ClockConfig+0x1bc>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d109      	bne.n	80028f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e06f      	b.n	80029c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028e2:	4b3b      	ldr	r3, [pc, #236]	; (80029d0 <HAL_RCC_ClockConfig+0x1bc>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d101      	bne.n	80028f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e067      	b.n	80029c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028f2:	4b37      	ldr	r3, [pc, #220]	; (80029d0 <HAL_RCC_ClockConfig+0x1bc>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f023 0203 	bic.w	r2, r3, #3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	4934      	ldr	r1, [pc, #208]	; (80029d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002900:	4313      	orrs	r3, r2
 8002902:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002904:	f7fe fe84 	bl	8001610 <HAL_GetTick>
 8002908:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800290a:	e00a      	b.n	8002922 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800290c:	f7fe fe80 	bl	8001610 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	f241 3288 	movw	r2, #5000	; 0x1388
 800291a:	4293      	cmp	r3, r2
 800291c:	d901      	bls.n	8002922 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e04f      	b.n	80029c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002922:	4b2b      	ldr	r3, [pc, #172]	; (80029d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f003 020c 	and.w	r2, r3, #12
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	429a      	cmp	r2, r3
 8002932:	d1eb      	bne.n	800290c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002934:	4b25      	ldr	r3, [pc, #148]	; (80029cc <HAL_RCC_ClockConfig+0x1b8>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0307 	and.w	r3, r3, #7
 800293c:	683a      	ldr	r2, [r7, #0]
 800293e:	429a      	cmp	r2, r3
 8002940:	d20c      	bcs.n	800295c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002942:	4b22      	ldr	r3, [pc, #136]	; (80029cc <HAL_RCC_ClockConfig+0x1b8>)
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	b2d2      	uxtb	r2, r2
 8002948:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800294a:	4b20      	ldr	r3, [pc, #128]	; (80029cc <HAL_RCC_ClockConfig+0x1b8>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0307 	and.w	r3, r3, #7
 8002952:	683a      	ldr	r2, [r7, #0]
 8002954:	429a      	cmp	r2, r3
 8002956:	d001      	beq.n	800295c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e032      	b.n	80029c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0304 	and.w	r3, r3, #4
 8002964:	2b00      	cmp	r3, #0
 8002966:	d008      	beq.n	800297a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002968:	4b19      	ldr	r3, [pc, #100]	; (80029d0 <HAL_RCC_ClockConfig+0x1bc>)
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	4916      	ldr	r1, [pc, #88]	; (80029d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002976:	4313      	orrs	r3, r2
 8002978:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0308 	and.w	r3, r3, #8
 8002982:	2b00      	cmp	r3, #0
 8002984:	d009      	beq.n	800299a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002986:	4b12      	ldr	r3, [pc, #72]	; (80029d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	00db      	lsls	r3, r3, #3
 8002994:	490e      	ldr	r1, [pc, #56]	; (80029d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002996:	4313      	orrs	r3, r2
 8002998:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800299a:	f000 f821 	bl	80029e0 <HAL_RCC_GetSysClockFreq>
 800299e:	4602      	mov	r2, r0
 80029a0:	4b0b      	ldr	r3, [pc, #44]	; (80029d0 <HAL_RCC_ClockConfig+0x1bc>)
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	091b      	lsrs	r3, r3, #4
 80029a6:	f003 030f 	and.w	r3, r3, #15
 80029aa:	490a      	ldr	r1, [pc, #40]	; (80029d4 <HAL_RCC_ClockConfig+0x1c0>)
 80029ac:	5ccb      	ldrb	r3, [r1, r3]
 80029ae:	fa22 f303 	lsr.w	r3, r2, r3
 80029b2:	4a09      	ldr	r2, [pc, #36]	; (80029d8 <HAL_RCC_ClockConfig+0x1c4>)
 80029b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80029b6:	4b09      	ldr	r3, [pc, #36]	; (80029dc <HAL_RCC_ClockConfig+0x1c8>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7fe fde4 	bl	8001588 <HAL_InitTick>

  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3710      	adds	r7, #16
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	40023c00 	.word	0x40023c00
 80029d0:	40023800 	.word	0x40023800
 80029d4:	080056f0 	.word	0x080056f0
 80029d8:	20000020 	.word	0x20000020
 80029dc:	20000024 	.word	0x20000024

080029e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029e4:	b094      	sub	sp, #80	; 0x50
 80029e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80029e8:	2300      	movs	r3, #0
 80029ea:	647b      	str	r3, [r7, #68]	; 0x44
 80029ec:	2300      	movs	r3, #0
 80029ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029f0:	2300      	movs	r3, #0
 80029f2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80029f4:	2300      	movs	r3, #0
 80029f6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029f8:	4b79      	ldr	r3, [pc, #484]	; (8002be0 <HAL_RCC_GetSysClockFreq+0x200>)
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f003 030c 	and.w	r3, r3, #12
 8002a00:	2b08      	cmp	r3, #8
 8002a02:	d00d      	beq.n	8002a20 <HAL_RCC_GetSysClockFreq+0x40>
 8002a04:	2b08      	cmp	r3, #8
 8002a06:	f200 80e1 	bhi.w	8002bcc <HAL_RCC_GetSysClockFreq+0x1ec>
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d002      	beq.n	8002a14 <HAL_RCC_GetSysClockFreq+0x34>
 8002a0e:	2b04      	cmp	r3, #4
 8002a10:	d003      	beq.n	8002a1a <HAL_RCC_GetSysClockFreq+0x3a>
 8002a12:	e0db      	b.n	8002bcc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a14:	4b73      	ldr	r3, [pc, #460]	; (8002be4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a16:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002a18:	e0db      	b.n	8002bd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a1a:	4b73      	ldr	r3, [pc, #460]	; (8002be8 <HAL_RCC_GetSysClockFreq+0x208>)
 8002a1c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a1e:	e0d8      	b.n	8002bd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a20:	4b6f      	ldr	r3, [pc, #444]	; (8002be0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a28:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a2a:	4b6d      	ldr	r3, [pc, #436]	; (8002be0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d063      	beq.n	8002afe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a36:	4b6a      	ldr	r3, [pc, #424]	; (8002be0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	099b      	lsrs	r3, r3, #6
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a40:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a48:	633b      	str	r3, [r7, #48]	; 0x30
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	637b      	str	r3, [r7, #52]	; 0x34
 8002a4e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002a52:	4622      	mov	r2, r4
 8002a54:	462b      	mov	r3, r5
 8002a56:	f04f 0000 	mov.w	r0, #0
 8002a5a:	f04f 0100 	mov.w	r1, #0
 8002a5e:	0159      	lsls	r1, r3, #5
 8002a60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a64:	0150      	lsls	r0, r2, #5
 8002a66:	4602      	mov	r2, r0
 8002a68:	460b      	mov	r3, r1
 8002a6a:	4621      	mov	r1, r4
 8002a6c:	1a51      	subs	r1, r2, r1
 8002a6e:	6139      	str	r1, [r7, #16]
 8002a70:	4629      	mov	r1, r5
 8002a72:	eb63 0301 	sbc.w	r3, r3, r1
 8002a76:	617b      	str	r3, [r7, #20]
 8002a78:	f04f 0200 	mov.w	r2, #0
 8002a7c:	f04f 0300 	mov.w	r3, #0
 8002a80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a84:	4659      	mov	r1, fp
 8002a86:	018b      	lsls	r3, r1, #6
 8002a88:	4651      	mov	r1, sl
 8002a8a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a8e:	4651      	mov	r1, sl
 8002a90:	018a      	lsls	r2, r1, #6
 8002a92:	4651      	mov	r1, sl
 8002a94:	ebb2 0801 	subs.w	r8, r2, r1
 8002a98:	4659      	mov	r1, fp
 8002a9a:	eb63 0901 	sbc.w	r9, r3, r1
 8002a9e:	f04f 0200 	mov.w	r2, #0
 8002aa2:	f04f 0300 	mov.w	r3, #0
 8002aa6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002aaa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002aae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ab2:	4690      	mov	r8, r2
 8002ab4:	4699      	mov	r9, r3
 8002ab6:	4623      	mov	r3, r4
 8002ab8:	eb18 0303 	adds.w	r3, r8, r3
 8002abc:	60bb      	str	r3, [r7, #8]
 8002abe:	462b      	mov	r3, r5
 8002ac0:	eb49 0303 	adc.w	r3, r9, r3
 8002ac4:	60fb      	str	r3, [r7, #12]
 8002ac6:	f04f 0200 	mov.w	r2, #0
 8002aca:	f04f 0300 	mov.w	r3, #0
 8002ace:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002ad2:	4629      	mov	r1, r5
 8002ad4:	024b      	lsls	r3, r1, #9
 8002ad6:	4621      	mov	r1, r4
 8002ad8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002adc:	4621      	mov	r1, r4
 8002ade:	024a      	lsls	r2, r1, #9
 8002ae0:	4610      	mov	r0, r2
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002aea:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002aec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002af0:	f7fd ffdc 	bl	8000aac <__aeabi_uldivmod>
 8002af4:	4602      	mov	r2, r0
 8002af6:	460b      	mov	r3, r1
 8002af8:	4613      	mov	r3, r2
 8002afa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002afc:	e058      	b.n	8002bb0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002afe:	4b38      	ldr	r3, [pc, #224]	; (8002be0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	099b      	lsrs	r3, r3, #6
 8002b04:	2200      	movs	r2, #0
 8002b06:	4618      	mov	r0, r3
 8002b08:	4611      	mov	r1, r2
 8002b0a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b0e:	623b      	str	r3, [r7, #32]
 8002b10:	2300      	movs	r3, #0
 8002b12:	627b      	str	r3, [r7, #36]	; 0x24
 8002b14:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002b18:	4642      	mov	r2, r8
 8002b1a:	464b      	mov	r3, r9
 8002b1c:	f04f 0000 	mov.w	r0, #0
 8002b20:	f04f 0100 	mov.w	r1, #0
 8002b24:	0159      	lsls	r1, r3, #5
 8002b26:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b2a:	0150      	lsls	r0, r2, #5
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	460b      	mov	r3, r1
 8002b30:	4641      	mov	r1, r8
 8002b32:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b36:	4649      	mov	r1, r9
 8002b38:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b3c:	f04f 0200 	mov.w	r2, #0
 8002b40:	f04f 0300 	mov.w	r3, #0
 8002b44:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b48:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b4c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002b50:	ebb2 040a 	subs.w	r4, r2, sl
 8002b54:	eb63 050b 	sbc.w	r5, r3, fp
 8002b58:	f04f 0200 	mov.w	r2, #0
 8002b5c:	f04f 0300 	mov.w	r3, #0
 8002b60:	00eb      	lsls	r3, r5, #3
 8002b62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b66:	00e2      	lsls	r2, r4, #3
 8002b68:	4614      	mov	r4, r2
 8002b6a:	461d      	mov	r5, r3
 8002b6c:	4643      	mov	r3, r8
 8002b6e:	18e3      	adds	r3, r4, r3
 8002b70:	603b      	str	r3, [r7, #0]
 8002b72:	464b      	mov	r3, r9
 8002b74:	eb45 0303 	adc.w	r3, r5, r3
 8002b78:	607b      	str	r3, [r7, #4]
 8002b7a:	f04f 0200 	mov.w	r2, #0
 8002b7e:	f04f 0300 	mov.w	r3, #0
 8002b82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b86:	4629      	mov	r1, r5
 8002b88:	028b      	lsls	r3, r1, #10
 8002b8a:	4621      	mov	r1, r4
 8002b8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b90:	4621      	mov	r1, r4
 8002b92:	028a      	lsls	r2, r1, #10
 8002b94:	4610      	mov	r0, r2
 8002b96:	4619      	mov	r1, r3
 8002b98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	61bb      	str	r3, [r7, #24]
 8002b9e:	61fa      	str	r2, [r7, #28]
 8002ba0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ba4:	f7fd ff82 	bl	8000aac <__aeabi_uldivmod>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	460b      	mov	r3, r1
 8002bac:	4613      	mov	r3, r2
 8002bae:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002bb0:	4b0b      	ldr	r3, [pc, #44]	; (8002be0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	0c1b      	lsrs	r3, r3, #16
 8002bb6:	f003 0303 	and.w	r3, r3, #3
 8002bba:	3301      	adds	r3, #1
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002bc0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002bc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002bca:	e002      	b.n	8002bd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bcc:	4b05      	ldr	r3, [pc, #20]	; (8002be4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002bce:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002bd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3750      	adds	r7, #80	; 0x50
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bde:	bf00      	nop
 8002be0:	40023800 	.word	0x40023800
 8002be4:	00f42400 	.word	0x00f42400
 8002be8:	007a1200 	.word	0x007a1200

08002bec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d101      	bne.n	8002bfe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e083      	b.n	8002d06 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d108      	bne.n	8002c18 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c0e:	d009      	beq.n	8002c24 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	61da      	str	r2, [r3, #28]
 8002c16:	e005      	b.n	8002c24 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d106      	bne.n	8002c3e <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f7fe fad7 	bl	80011ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2202      	movs	r2, #2
 8002c42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c54:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002c66:	431a      	orrs	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c70:	431a      	orrs	r2, r3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	431a      	orrs	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	695b      	ldr	r3, [r3, #20]
 8002c80:	f003 0301 	and.w	r3, r3, #1
 8002c84:	431a      	orrs	r2, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c8e:	431a      	orrs	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	69db      	ldr	r3, [r3, #28]
 8002c94:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c98:	431a      	orrs	r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
 8002c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ca2:	ea42 0103 	orr.w	r1, r2, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002caa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	699b      	ldr	r3, [r3, #24]
 8002cba:	0c1b      	lsrs	r3, r3, #16
 8002cbc:	f003 0104 	and.w	r1, r3, #4
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc4:	f003 0210 	and.w	r2, r3, #16
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	430a      	orrs	r2, r1
 8002cce:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cd8:	d105      	bne.n	8002ce6 <HAL_SPI_Init+0xfa>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	b292      	uxth	r2, r2
 8002ce4:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	69da      	ldr	r2, [r3, #28]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cf4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b08a      	sub	sp, #40	; 0x28
 8002d12:	af02      	add	r7, sp, #8
 8002d14:	60f8      	str	r0, [r7, #12]
 8002d16:	60b9      	str	r1, [r7, #8]
 8002d18:	603b      	str	r3, [r7, #0]
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	617b      	str	r3, [r7, #20]
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d22:	2300      	movs	r3, #0
 8002d24:	77fb      	strb	r3, [r7, #31]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d2e:	d112      	bne.n	8002d56 <HAL_SPI_Receive+0x48>
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d10e      	bne.n	8002d56 <HAL_SPI_Receive+0x48>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2204      	movs	r2, #4
 8002d3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002d40:	88fa      	ldrh	r2, [r7, #6]
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	9300      	str	r3, [sp, #0]
 8002d46:	4613      	mov	r3, r2
 8002d48:	68ba      	ldr	r2, [r7, #8]
 8002d4a:	68b9      	ldr	r1, [r7, #8]
 8002d4c:	68f8      	ldr	r0, [r7, #12]
 8002d4e:	f000 f969 	bl	8003024 <HAL_SPI_TransmitReceive>
 8002d52:	4603      	mov	r3, r0
 8002d54:	e162      	b.n	800301c <HAL_SPI_Receive+0x30e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d101      	bne.n	8002d64 <HAL_SPI_Receive+0x56>
 8002d60:	2302      	movs	r3, #2
 8002d62:	e15b      	b.n	800301c <HAL_SPI_Receive+0x30e>
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d6c:	f7fe fc50 	bl	8001610 <HAL_GetTick>
 8002d70:	61b8      	str	r0, [r7, #24]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d002      	beq.n	8002d84 <HAL_SPI_Receive+0x76>
  {
    errorcode = HAL_BUSY;
 8002d7e:	2302      	movs	r3, #2
 8002d80:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d82:	e142      	b.n	800300a <HAL_SPI_Receive+0x2fc>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d002      	beq.n	8002d90 <HAL_SPI_Receive+0x82>
 8002d8a:	88fb      	ldrh	r3, [r7, #6]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d102      	bne.n	8002d96 <HAL_SPI_Receive+0x88>
  {
    errorcode = HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d94:	e139      	b.n	800300a <HAL_SPI_Receive+0x2fc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2204      	movs	r2, #4
 8002d9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2200      	movs	r2, #0
 8002da2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	68ba      	ldr	r2, [r7, #8]
 8002da8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	88fa      	ldrh	r2, [r7, #6]
 8002dae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	88fa      	ldrh	r2, [r7, #6]
 8002db4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2200      	movs	r2, #0
 8002dba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ddc:	d116      	bne.n	8002e0c <HAL_SPI_Receive+0xfe>
  {
    SPI_RESET_CRC(hspi);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002dec:	601a      	str	r2, [r3, #0]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002dfc:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	3b01      	subs	r3, #1
 8002e06:	b29a      	uxth	r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	87da      	strh	r2, [r3, #62]	; 0x3e
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e14:	d10f      	bne.n	8002e36 <HAL_SPI_Receive+0x128>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e24:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002e34:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e40:	2b40      	cmp	r3, #64	; 0x40
 8002e42:	d007      	beq.n	8002e54 <HAL_SPI_Receive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e52:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d162      	bne.n	8002f22 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002e5c:	e02e      	b.n	8002ebc <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f003 0301 	and.w	r3, r3, #1
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d115      	bne.n	8002e98 <HAL_SPI_Receive+0x18a>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f103 020c 	add.w	r2, r3, #12
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e78:	7812      	ldrb	r2, [r2, #0]
 8002e7a:	b2d2      	uxtb	r2, r2
 8002e7c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e82:	1c5a      	adds	r2, r3, #1
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	b29a      	uxth	r2, r3
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002e96:	e011      	b.n	8002ebc <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e98:	f7fe fbba 	bl	8001610 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	683a      	ldr	r2, [r7, #0]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d803      	bhi.n	8002eb0 <HAL_SPI_Receive+0x1a2>
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002eae:	d102      	bne.n	8002eb6 <HAL_SPI_Receive+0x1a8>
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d102      	bne.n	8002ebc <HAL_SPI_Receive+0x1ae>
        {
          errorcode = HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002eba:	e0a6      	b.n	800300a <HAL_SPI_Receive+0x2fc>
    while (hspi->RxXferCount > 0U)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d1cb      	bne.n	8002e5e <HAL_SPI_Receive+0x150>
 8002ec6:	e031      	b.n	8002f2c <HAL_SPI_Receive+0x21e>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f003 0301 	and.w	r3, r3, #1
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d113      	bne.n	8002efe <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68da      	ldr	r2, [r3, #12]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee0:	b292      	uxth	r2, r2
 8002ee2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee8:	1c9a      	adds	r2, r3, #2
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	3b01      	subs	r3, #1
 8002ef6:	b29a      	uxth	r2, r3
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002efc:	e011      	b.n	8002f22 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002efe:	f7fe fb87 	bl	8001610 <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	683a      	ldr	r2, [r7, #0]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d803      	bhi.n	8002f16 <HAL_SPI_Receive+0x208>
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f14:	d102      	bne.n	8002f1c <HAL_SPI_Receive+0x20e>
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d102      	bne.n	8002f22 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002f20:	e073      	b.n	800300a <HAL_SPI_Receive+0x2fc>
    while (hspi->RxXferCount > 0U)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d1cd      	bne.n	8002ec8 <HAL_SPI_Receive+0x1ba>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f34:	d144      	bne.n	8002fc0 <HAL_SPI_Receive+0x2b2>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002f44:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	9300      	str	r3, [sp, #0]
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	2101      	movs	r1, #1
 8002f50:	68f8      	ldr	r0, [r7, #12]
 8002f52:	f000 fcef 	bl	8003934 <SPI_WaitFlagStateUntilTimeout>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d002      	beq.n	8002f62 <HAL_SPI_Receive+0x254>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	77fb      	strb	r3, [r7, #31]
      goto error;
 8002f60:	e053      	b.n	800300a <HAL_SPI_Receive+0x2fc>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f6a:	d107      	bne.n	8002f7c <HAL_SPI_Receive+0x26e>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68da      	ldr	r2, [r3, #12]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f76:	b292      	uxth	r2, r2
 8002f78:	801a      	strh	r2, [r3, #0]
 8002f7a:	e008      	b.n	8002f8e <HAL_SPI_Receive+0x280>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f103 020c 	add.w	r2, r3, #12
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f88:	7812      	ldrb	r2, [r2, #0]
 8002f8a:	b2d2      	uxtb	r2, r2
 8002f8c:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	9300      	str	r3, [sp, #0]
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	2201      	movs	r2, #1
 8002f96:	2101      	movs	r1, #1
 8002f98:	68f8      	ldr	r0, [r7, #12]
 8002f9a:	f000 fccb 	bl	8003934 <SPI_WaitFlagStateUntilTimeout>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d008      	beq.n	8002fb6 <HAL_SPI_Receive+0x2a8>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fa8:	f043 0202 	orr.w	r2, r3, #2
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	77fb      	strb	r3, [r7, #31]
      goto error;
 8002fb4:	e029      	b.n	800300a <HAL_SPI_Receive+0x2fc>
    }

    /* Read CRC to Flush DR and RXNE flag */
    tmpreg = READ_REG(hspi->Instance->DR);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	617b      	str	r3, [r7, #20]
    /* To avoid GCC warning */
    UNUSED(tmpreg);
 8002fbe:	697b      	ldr	r3, [r7, #20]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	6839      	ldr	r1, [r7, #0]
 8002fc4:	68f8      	ldr	r0, [r7, #12]
 8002fc6:	f000 fd3d 	bl	8003a44 <SPI_EndRxTransaction>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d002      	beq.n	8002fd6 <HAL_SPI_Receive+0x2c8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2220      	movs	r2, #32
 8002fd4:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f003 0310 	and.w	r3, r3, #16
 8002fe0:	2b10      	cmp	r3, #16
 8002fe2:	d10a      	bne.n	8002ffa <HAL_SPI_Receive+0x2ec>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fe8:	f043 0202 	orr.w	r2, r3, #2
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8002ff8:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d002      	beq.n	8003008 <HAL_SPI_Receive+0x2fa>
  {
    errorcode = HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	77fb      	strb	r3, [r7, #31]
 8003006:	e000      	b.n	800300a <HAL_SPI_Receive+0x2fc>
  }

error :
 8003008:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2201      	movs	r2, #1
 800300e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800301a:	7ffb      	ldrb	r3, [r7, #31]
}
 800301c:	4618      	mov	r0, r3
 800301e:	3720      	adds	r7, #32
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b08e      	sub	sp, #56	; 0x38
 8003028:	af02      	add	r7, sp, #8
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	607a      	str	r2, [r7, #4]
 8003030:	807b      	strh	r3, [r7, #2]
  uint16_t             initial_TxXferCount;
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8003032:	2300      	movs	r3, #0
 8003034:	617b      	str	r3, [r7, #20]
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003036:	2301      	movs	r3, #1
 8003038:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800303a:	2300      	movs	r3, #0
 800303c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003046:	2b01      	cmp	r3, #1
 8003048:	d101      	bne.n	800304e <HAL_SPI_TransmitReceive+0x2a>
 800304a:	2302      	movs	r3, #2
 800304c:	e1f8      	b.n	8003440 <HAL_SPI_TransmitReceive+0x41c>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2201      	movs	r2, #1
 8003052:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003056:	f7fe fadb 	bl	8001610 <HAL_GetTick>
 800305a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003062:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800306c:	887b      	ldrh	r3, [r7, #2]
 800306e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003070:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003074:	2b01      	cmp	r3, #1
 8003076:	d00f      	beq.n	8003098 <HAL_SPI_TransmitReceive+0x74>
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800307e:	d107      	bne.n	8003090 <HAL_SPI_TransmitReceive+0x6c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d103      	bne.n	8003090 <HAL_SPI_TransmitReceive+0x6c>
 8003088:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800308c:	2b04      	cmp	r3, #4
 800308e:	d003      	beq.n	8003098 <HAL_SPI_TransmitReceive+0x74>
  {
    errorcode = HAL_BUSY;
 8003090:	2302      	movs	r3, #2
 8003092:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003096:	e1c9      	b.n	800342c <HAL_SPI_TransmitReceive+0x408>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d005      	beq.n	80030aa <HAL_SPI_TransmitReceive+0x86>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d002      	beq.n	80030aa <HAL_SPI_TransmitReceive+0x86>
 80030a4:	887b      	ldrh	r3, [r7, #2]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d103      	bne.n	80030b2 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80030b0:	e1bc      	b.n	800342c <HAL_SPI_TransmitReceive+0x408>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b04      	cmp	r3, #4
 80030bc:	d003      	beq.n	80030c6 <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2205      	movs	r2, #5
 80030c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2200      	movs	r2, #0
 80030ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	887a      	ldrh	r2, [r7, #2]
 80030d6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	887a      	ldrh	r2, [r7, #2]
 80030dc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	68ba      	ldr	r2, [r7, #8]
 80030e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	887a      	ldrh	r2, [r7, #2]
 80030e8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	887a      	ldrh	r2, [r7, #2]
 80030ee:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2200      	movs	r2, #0
 80030f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2200      	movs	r2, #0
 80030fa:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003100:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003104:	d10f      	bne.n	8003126 <HAL_SPI_TransmitReceive+0x102>
  {
    SPI_RESET_CRC(hspi);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003114:	601a      	str	r2, [r3, #0]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003124:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003130:	2b40      	cmp	r3, #64	; 0x40
 8003132:	d007      	beq.n	8003144 <HAL_SPI_TransmitReceive+0x120>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003142:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800314c:	f040 808b 	bne.w	8003266 <HAL_SPI_TransmitReceive+0x242>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d002      	beq.n	800315e <HAL_SPI_TransmitReceive+0x13a>
 8003158:	8b7b      	ldrh	r3, [r7, #26]
 800315a:	2b01      	cmp	r3, #1
 800315c:	d178      	bne.n	8003250 <HAL_SPI_TransmitReceive+0x22c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003162:	881a      	ldrh	r2, [r3, #0]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316e:	1c9a      	adds	r2, r3, #2
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003178:	b29b      	uxth	r3, r3
 800317a:	3b01      	subs	r3, #1
 800317c:	b29a      	uxth	r2, r3
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003182:	e065      	b.n	8003250 <HAL_SPI_TransmitReceive+0x22c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b02      	cmp	r3, #2
 8003190:	d12d      	bne.n	80031ee <HAL_SPI_TransmitReceive+0x1ca>
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003196:	b29b      	uxth	r3, r3
 8003198:	2b00      	cmp	r3, #0
 800319a:	d028      	beq.n	80031ee <HAL_SPI_TransmitReceive+0x1ca>
 800319c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d125      	bne.n	80031ee <HAL_SPI_TransmitReceive+0x1ca>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a6:	881a      	ldrh	r2, [r3, #0]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b2:	1c9a      	adds	r2, r3, #2
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031bc:	b29b      	uxth	r3, r3
 80031be:	3b01      	subs	r3, #1
 80031c0:	b29a      	uxth	r2, r3
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80031c6:	2300      	movs	r3, #0
 80031c8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d10c      	bne.n	80031ee <HAL_SPI_TransmitReceive+0x1ca>
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031dc:	d107      	bne.n	80031ee <HAL_SPI_TransmitReceive+0x1ca>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80031ec:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	f003 0301 	and.w	r3, r3, #1
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d119      	bne.n	8003230 <HAL_SPI_TransmitReceive+0x20c>
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003200:	b29b      	uxth	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d014      	beq.n	8003230 <HAL_SPI_TransmitReceive+0x20c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68da      	ldr	r2, [r3, #12]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003210:	b292      	uxth	r2, r2
 8003212:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003218:	1c9a      	adds	r2, r3, #2
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003222:	b29b      	uxth	r3, r3
 8003224:	3b01      	subs	r3, #1
 8003226:	b29a      	uxth	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800322c:	2301      	movs	r3, #1
 800322e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003230:	f7fe f9ee 	bl	8001610 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800323c:	429a      	cmp	r2, r3
 800323e:	d807      	bhi.n	8003250 <HAL_SPI_TransmitReceive+0x22c>
 8003240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003242:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003246:	d003      	beq.n	8003250 <HAL_SPI_TransmitReceive+0x22c>
      {
        errorcode = HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800324e:	e0ed      	b.n	800342c <HAL_SPI_TransmitReceive+0x408>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003254:	b29b      	uxth	r3, r3
 8003256:	2b00      	cmp	r3, #0
 8003258:	d194      	bne.n	8003184 <HAL_SPI_TransmitReceive+0x160>
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800325e:	b29b      	uxth	r3, r3
 8003260:	2b00      	cmp	r3, #0
 8003262:	d18f      	bne.n	8003184 <HAL_SPI_TransmitReceive+0x160>
 8003264:	e08e      	b.n	8003384 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d002      	beq.n	8003274 <HAL_SPI_TransmitReceive+0x250>
 800326e:	8b7b      	ldrh	r3, [r7, #26]
 8003270:	2b01      	cmp	r3, #1
 8003272:	d17d      	bne.n	8003370 <HAL_SPI_TransmitReceive+0x34c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	330c      	adds	r3, #12
 800327e:	7812      	ldrb	r2, [r2, #0]
 8003280:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003286:	1c5a      	adds	r2, r3, #1
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003290:	b29b      	uxth	r3, r3
 8003292:	3b01      	subs	r3, #1
 8003294:	b29a      	uxth	r2, r3
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800329a:	e069      	b.n	8003370 <HAL_SPI_TransmitReceive+0x34c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d12e      	bne.n	8003308 <HAL_SPI_TransmitReceive+0x2e4>
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d029      	beq.n	8003308 <HAL_SPI_TransmitReceive+0x2e4>
 80032b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d126      	bne.n	8003308 <HAL_SPI_TransmitReceive+0x2e4>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	330c      	adds	r3, #12
 80032c4:	7812      	ldrb	r2, [r2, #0]
 80032c6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032cc:	1c5a      	adds	r2, r3, #1
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	3b01      	subs	r3, #1
 80032da:	b29a      	uxth	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80032e0:	2300      	movs	r3, #0
 80032e2:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d10c      	bne.n	8003308 <HAL_SPI_TransmitReceive+0x2e4>
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032f6:	d107      	bne.n	8003308 <HAL_SPI_TransmitReceive+0x2e4>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003306:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f003 0301 	and.w	r3, r3, #1
 8003312:	2b01      	cmp	r3, #1
 8003314:	d119      	bne.n	800334a <HAL_SPI_TransmitReceive+0x326>
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800331a:	b29b      	uxth	r3, r3
 800331c:	2b00      	cmp	r3, #0
 800331e:	d014      	beq.n	800334a <HAL_SPI_TransmitReceive+0x326>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68da      	ldr	r2, [r3, #12]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800332a:	b2d2      	uxtb	r2, r2
 800332c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003332:	1c5a      	adds	r2, r3, #1
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800333c:	b29b      	uxth	r3, r3
 800333e:	3b01      	subs	r3, #1
 8003340:	b29a      	uxth	r2, r3
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003346:	2301      	movs	r3, #1
 8003348:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800334a:	f7fe f961 	bl	8001610 <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003356:	429a      	cmp	r2, r3
 8003358:	d803      	bhi.n	8003362 <HAL_SPI_TransmitReceive+0x33e>
 800335a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800335c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003360:	d102      	bne.n	8003368 <HAL_SPI_TransmitReceive+0x344>
 8003362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003364:	2b00      	cmp	r3, #0
 8003366:	d103      	bne.n	8003370 <HAL_SPI_TransmitReceive+0x34c>
      {
        errorcode = HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800336e:	e05d      	b.n	800342c <HAL_SPI_TransmitReceive+0x408>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003374:	b29b      	uxth	r3, r3
 8003376:	2b00      	cmp	r3, #0
 8003378:	d190      	bne.n	800329c <HAL_SPI_TransmitReceive+0x278>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800337e:	b29b      	uxth	r3, r3
 8003380:	2b00      	cmp	r3, #0
 8003382:	d18b      	bne.n	800329c <HAL_SPI_TransmitReceive+0x278>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003388:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800338c:	d119      	bne.n	80033c2 <HAL_SPI_TransmitReceive+0x39e>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800338e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003390:	9300      	str	r3, [sp, #0]
 8003392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003394:	2201      	movs	r2, #1
 8003396:	2101      	movs	r1, #1
 8003398:	68f8      	ldr	r0, [r7, #12]
 800339a:	f000 facb 	bl	8003934 <SPI_WaitFlagStateUntilTimeout>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d009      	beq.n	80033b8 <HAL_SPI_TransmitReceive+0x394>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a8:	f043 0202 	orr.w	r2, r3, #2
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      goto error;
 80033b6:	e039      	b.n	800342c <HAL_SPI_TransmitReceive+0x408>
    }
    /* Read CRC */
    tmpreg = READ_REG(hspi->Instance->DR);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	617b      	str	r3, [r7, #20]
    /* To avoid GCC warning */
    UNUSED(tmpreg);
 80033c0:	697b      	ldr	r3, [r7, #20]
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f003 0310 	and.w	r3, r3, #16
 80033cc:	2b10      	cmp	r3, #16
 80033ce:	d10d      	bne.n	80033ec <HAL_SPI_TransmitReceive+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d4:	f043 0202 	orr.w	r2, r3, #2
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	655a      	str	r2, [r3, #84]	; 0x54
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80033e4:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80033f0:	68f8      	ldr	r0, [r7, #12]
 80033f2:	f000 fb8d 	bl	8003b10 <SPI_EndRxTxTransaction>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d006      	beq.n	800340a <HAL_SPI_TransmitReceive+0x3e6>
  {
    errorcode = HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2220      	movs	r2, #32
 8003406:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003408:	e010      	b.n	800342c <HAL_SPI_TransmitReceive+0x408>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d10b      	bne.n	800342a <HAL_SPI_TransmitReceive+0x406>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003412:	2300      	movs	r3, #0
 8003414:	613b      	str	r3, [r7, #16]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	613b      	str	r3, [r7, #16]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	613b      	str	r3, [r7, #16]
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	e000      	b.n	800342c <HAL_SPI_TransmitReceive+0x408>
  }

error :
 800342a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800343c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003440:	4618      	mov	r0, r3
 8003442:	3730      	adds	r7, #48	; 0x30
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b086      	sub	sp, #24
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	4613      	mov	r3, r2
 8003454:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003456:	2300      	movs	r3, #0
 8003458:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003460:	2b01      	cmp	r3, #1
 8003462:	d101      	bne.n	8003468 <HAL_SPI_Transmit_DMA+0x20>
 8003464:	2302      	movs	r3, #2
 8003466:	e0b0      	b.n	80035ca <HAL_SPI_Transmit_DMA+0x182>
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003476:	b2db      	uxtb	r3, r3
 8003478:	2b01      	cmp	r3, #1
 800347a:	d002      	beq.n	8003482 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800347c:	2302      	movs	r3, #2
 800347e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003480:	e09e      	b.n	80035c0 <HAL_SPI_Transmit_DMA+0x178>
  }

  if ((pData == NULL) || (Size == 0U))
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d002      	beq.n	800348e <HAL_SPI_Transmit_DMA+0x46>
 8003488:	88fb      	ldrh	r3, [r7, #6]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d102      	bne.n	8003494 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003492:	e095      	b.n	80035c0 <HAL_SPI_Transmit_DMA+0x178>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2203      	movs	r2, #3
 8003498:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2200      	movs	r2, #0
 80034a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	68ba      	ldr	r2, [r7, #8]
 80034a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	88fa      	ldrh	r2, [r7, #6]
 80034ac:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	88fa      	ldrh	r2, [r7, #6]
 80034b2:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2200      	movs	r2, #0
 80034be:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2200      	movs	r2, #0
 80034c4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2200      	movs	r2, #0
 80034ca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2200      	movs	r2, #0
 80034d0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034da:	d10f      	bne.n	80034fc <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034ea:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034fa:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003500:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003504:	d10f      	bne.n	8003526 <HAL_SPI_Transmit_DMA+0xde>
  {
    SPI_RESET_CRC(hspi);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003514:	601a      	str	r2, [r3, #0]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003524:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800352a:	4a2a      	ldr	r2, [pc, #168]	; (80035d4 <HAL_SPI_Transmit_DMA+0x18c>)
 800352c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003532:	4a29      	ldr	r2, [pc, #164]	; (80035d8 <HAL_SPI_Transmit_DMA+0x190>)
 8003534:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800353a:	4a28      	ldr	r2, [pc, #160]	; (80035dc <HAL_SPI_Transmit_DMA+0x194>)
 800353c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003542:	2200      	movs	r2, #0
 8003544:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354e:	4619      	mov	r1, r3
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	330c      	adds	r3, #12
 8003556:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800355c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800355e:	f7fe fa47 	bl	80019f0 <HAL_DMA_Start_IT>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d00c      	beq.n	8003582 <HAL_SPI_Transmit_DMA+0x13a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800356c:	f043 0210 	orr.w	r2, r3, #16
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8003580:	e01e      	b.n	80035c0 <HAL_SPI_Transmit_DMA+0x178>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800358c:	2b40      	cmp	r3, #64	; 0x40
 800358e:	d007      	beq.n	80035a0 <HAL_SPI_Transmit_DMA+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800359e:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	685a      	ldr	r2, [r3, #4]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f042 0220 	orr.w	r2, r2, #32
 80035ae:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	685a      	ldr	r2, [r3, #4]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f042 0202 	orr.w	r2, r2, #2
 80035be:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80035c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3718      	adds	r7, #24
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	080038b1 	.word	0x080038b1
 80035d8:	08003809 	.word	0x08003809
 80035dc:	080038cd 	.word	0x080038cd

080035e0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b088      	sub	sp, #32
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	099b      	lsrs	r3, r3, #6
 80035fc:	f003 0301 	and.w	r3, r3, #1
 8003600:	2b00      	cmp	r3, #0
 8003602:	d10f      	bne.n	8003624 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00a      	beq.n	8003624 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	099b      	lsrs	r3, r3, #6
 8003612:	f003 0301 	and.w	r3, r3, #1
 8003616:	2b00      	cmp	r3, #0
 8003618:	d004      	beq.n	8003624 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	4798      	blx	r3
    return;
 8003622:	e0d7      	b.n	80037d4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	085b      	lsrs	r3, r3, #1
 8003628:	f003 0301 	and.w	r3, r3, #1
 800362c:	2b00      	cmp	r3, #0
 800362e:	d00a      	beq.n	8003646 <HAL_SPI_IRQHandler+0x66>
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	09db      	lsrs	r3, r3, #7
 8003634:	f003 0301 	and.w	r3, r3, #1
 8003638:	2b00      	cmp	r3, #0
 800363a:	d004      	beq.n	8003646 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	4798      	blx	r3
    return;
 8003644:	e0c6      	b.n	80037d4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	095b      	lsrs	r3, r3, #5
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	2b00      	cmp	r3, #0
 8003650:	d10c      	bne.n	800366c <HAL_SPI_IRQHandler+0x8c>
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	099b      	lsrs	r3, r3, #6
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	2b00      	cmp	r3, #0
 800365c:	d106      	bne.n	800366c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	0a1b      	lsrs	r3, r3, #8
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	2b00      	cmp	r3, #0
 8003668:	f000 80b4 	beq.w	80037d4 <HAL_SPI_IRQHandler+0x1f4>
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	095b      	lsrs	r3, r3, #5
 8003670:	f003 0301 	and.w	r3, r3, #1
 8003674:	2b00      	cmp	r3, #0
 8003676:	f000 80ad 	beq.w	80037d4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	099b      	lsrs	r3, r3, #6
 800367e:	f003 0301 	and.w	r3, r3, #1
 8003682:	2b00      	cmp	r3, #0
 8003684:	d023      	beq.n	80036ce <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b03      	cmp	r3, #3
 8003690:	d011      	beq.n	80036b6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003696:	f043 0204 	orr.w	r2, r3, #4
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800369e:	2300      	movs	r3, #0
 80036a0:	617b      	str	r3, [r7, #20]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	617b      	str	r3, [r7, #20]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	617b      	str	r3, [r7, #20]
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	e00b      	b.n	80036ce <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80036b6:	2300      	movs	r3, #0
 80036b8:	613b      	str	r3, [r7, #16]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	613b      	str	r3, [r7, #16]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	613b      	str	r3, [r7, #16]
 80036ca:	693b      	ldr	r3, [r7, #16]
        return;
 80036cc:	e082      	b.n	80037d4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	095b      	lsrs	r3, r3, #5
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d014      	beq.n	8003704 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036de:	f043 0201 	orr.w	r2, r3, #1
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80036e6:	2300      	movs	r3, #0
 80036e8:	60fb      	str	r3, [r7, #12]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	60fb      	str	r3, [r7, #12]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003700:	601a      	str	r2, [r3, #0]
 8003702:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	0a1b      	lsrs	r3, r3, #8
 8003708:	f003 0301 	and.w	r3, r3, #1
 800370c:	2b00      	cmp	r3, #0
 800370e:	d00c      	beq.n	800372a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003714:	f043 0208 	orr.w	r2, r3, #8
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800371c:	2300      	movs	r3, #0
 800371e:	60bb      	str	r3, [r7, #8]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	60bb      	str	r3, [r7, #8]
 8003728:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800372e:	2b00      	cmp	r3, #0
 8003730:	d04f      	beq.n	80037d2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	685a      	ldr	r2, [r3, #4]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003740:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	f003 0302 	and.w	r3, r3, #2
 8003750:	2b00      	cmp	r3, #0
 8003752:	d104      	bne.n	800375e <HAL_SPI_IRQHandler+0x17e>
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	2b00      	cmp	r3, #0
 800375c:	d034      	beq.n	80037c8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	685a      	ldr	r2, [r3, #4]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f022 0203 	bic.w	r2, r2, #3
 800376c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003772:	2b00      	cmp	r3, #0
 8003774:	d011      	beq.n	800379a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800377a:	4a18      	ldr	r2, [pc, #96]	; (80037dc <HAL_SPI_IRQHandler+0x1fc>)
 800377c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003782:	4618      	mov	r0, r3
 8003784:	f7fe f98c 	bl	8001aa0 <HAL_DMA_Abort_IT>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d005      	beq.n	800379a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003792:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d016      	beq.n	80037d0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037a6:	4a0d      	ldr	r2, [pc, #52]	; (80037dc <HAL_SPI_IRQHandler+0x1fc>)
 80037a8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037ae:	4618      	mov	r0, r3
 80037b0:	f7fe f976 	bl	8001aa0 <HAL_DMA_Abort_IT>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00a      	beq.n	80037d0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80037c6:	e003      	b.n	80037d0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 f813 	bl	80037f4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80037ce:	e000      	b.n	80037d2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80037d0:	bf00      	nop
    return;
 80037d2:	bf00      	nop
  }
}
 80037d4:	3720      	adds	r7, #32
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	0800390d 	.word	0x0800390d

080037e0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80037e8:	bf00      	nop
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80037fc:	bf00      	nop
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b086      	sub	sp, #24
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003814:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003816:	f7fd fefb 	bl	8001610 <HAL_GetTick>
 800381a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003826:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800382a:	d03b      	beq.n	80038a4 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	685a      	ldr	r2, [r3, #4]
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f022 0220 	bic.w	r2, r2, #32
 800383a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	685a      	ldr	r2, [r3, #4]
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f022 0202 	bic.w	r2, r2, #2
 800384a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800384c:	693a      	ldr	r2, [r7, #16]
 800384e:	2164      	movs	r1, #100	; 0x64
 8003850:	6978      	ldr	r0, [r7, #20]
 8003852:	f000 f95d 	bl	8003b10 <SPI_EndRxTxTransaction>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d005      	beq.n	8003868 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003860:	f043 0220 	orr.w	r2, r3, #32
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d10a      	bne.n	8003886 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003870:	2300      	movs	r3, #0
 8003872:	60fb      	str	r3, [r7, #12]
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	60fb      	str	r3, [r7, #12]
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	60fb      	str	r3, [r7, #12]
 8003884:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	2200      	movs	r2, #0
 800388a:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003898:	2b00      	cmp	r3, #0
 800389a:	d003      	beq.n	80038a4 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800389c:	6978      	ldr	r0, [r7, #20]
 800389e:	f7ff ffa9 	bl	80037f4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80038a2:	e002      	b.n	80038aa <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80038a4:	6978      	ldr	r0, [r7, #20]
 80038a6:	f000 fcec 	bl	8004282 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80038aa:	3718      	adds	r7, #24
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038bc:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80038be:	68f8      	ldr	r0, [r7, #12]
 80038c0:	f7ff ff8e 	bl	80037e0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80038c4:	bf00      	nop
 80038c6:	3710      	adds	r7, #16
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d8:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	685a      	ldr	r2, [r3, #4]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f022 0203 	bic.w	r2, r2, #3
 80038e8:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ee:	f043 0210 	orr.w	r2, r3, #16
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2201      	movs	r2, #1
 80038fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80038fe:	68f8      	ldr	r0, [r7, #12]
 8003900:	f7ff ff78 	bl	80037f4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003904:	bf00      	nop
 8003906:	3710      	adds	r7, #16
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003918:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2200      	movs	r2, #0
 800391e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2200      	movs	r2, #0
 8003924:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003926:	68f8      	ldr	r0, [r7, #12]
 8003928:	f7ff ff64 	bl	80037f4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800392c:	bf00      	nop
 800392e:	3710      	adds	r7, #16
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b088      	sub	sp, #32
 8003938:	af00      	add	r7, sp, #0
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	60b9      	str	r1, [r7, #8]
 800393e:	603b      	str	r3, [r7, #0]
 8003940:	4613      	mov	r3, r2
 8003942:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003944:	f7fd fe64 	bl	8001610 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800394c:	1a9b      	subs	r3, r3, r2
 800394e:	683a      	ldr	r2, [r7, #0]
 8003950:	4413      	add	r3, r2
 8003952:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003954:	f7fd fe5c 	bl	8001610 <HAL_GetTick>
 8003958:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800395a:	4b39      	ldr	r3, [pc, #228]	; (8003a40 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	015b      	lsls	r3, r3, #5
 8003960:	0d1b      	lsrs	r3, r3, #20
 8003962:	69fa      	ldr	r2, [r7, #28]
 8003964:	fb02 f303 	mul.w	r3, r2, r3
 8003968:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800396a:	e054      	b.n	8003a16 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003972:	d050      	beq.n	8003a16 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003974:	f7fd fe4c 	bl	8001610 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	69fa      	ldr	r2, [r7, #28]
 8003980:	429a      	cmp	r2, r3
 8003982:	d902      	bls.n	800398a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d13d      	bne.n	8003a06 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	685a      	ldr	r2, [r3, #4]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003998:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039a2:	d111      	bne.n	80039c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039ac:	d004      	beq.n	80039b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039b6:	d107      	bne.n	80039c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039d0:	d10f      	bne.n	80039f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039e0:	601a      	str	r2, [r3, #0]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2201      	movs	r2, #1
 80039f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e017      	b.n	8003a36 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d101      	bne.n	8003a10 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	3b01      	subs	r3, #1
 8003a14:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	689a      	ldr	r2, [r3, #8]
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	4013      	ands	r3, r2
 8003a20:	68ba      	ldr	r2, [r7, #8]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	bf0c      	ite	eq
 8003a26:	2301      	moveq	r3, #1
 8003a28:	2300      	movne	r3, #0
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	79fb      	ldrb	r3, [r7, #7]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d19b      	bne.n	800396c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3720      	adds	r7, #32
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	20000020 	.word	0x20000020

08003a44 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b086      	sub	sp, #24
 8003a48:	af02      	add	r7, sp, #8
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a58:	d111      	bne.n	8003a7e <SPI_EndRxTransaction+0x3a>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a62:	d004      	beq.n	8003a6e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a6c:	d107      	bne.n	8003a7e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a7c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a86:	d12a      	bne.n	8003ade <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a90:	d012      	beq.n	8003ab8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	9300      	str	r3, [sp, #0]
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	2180      	movs	r1, #128	; 0x80
 8003a9c:	68f8      	ldr	r0, [r7, #12]
 8003a9e:	f7ff ff49 	bl	8003934 <SPI_WaitFlagStateUntilTimeout>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d02d      	beq.n	8003b04 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aac:	f043 0220 	orr.w	r2, r3, #32
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e026      	b.n	8003b06 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	9300      	str	r3, [sp, #0]
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	2101      	movs	r1, #1
 8003ac2:	68f8      	ldr	r0, [r7, #12]
 8003ac4:	f7ff ff36 	bl	8003934 <SPI_WaitFlagStateUntilTimeout>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d01a      	beq.n	8003b04 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ad2:	f043 0220 	orr.w	r2, r3, #32
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e013      	b.n	8003b06 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	9300      	str	r3, [sp, #0]
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	2101      	movs	r1, #1
 8003ae8:	68f8      	ldr	r0, [r7, #12]
 8003aea:	f7ff ff23 	bl	8003934 <SPI_WaitFlagStateUntilTimeout>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d007      	beq.n	8003b04 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003af8:	f043 0220 	orr.w	r2, r3, #32
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e000      	b.n	8003b06 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3710      	adds	r7, #16
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
	...

08003b10 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b088      	sub	sp, #32
 8003b14:	af02      	add	r7, sp, #8
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003b1c:	4b1b      	ldr	r3, [pc, #108]	; (8003b8c <SPI_EndRxTxTransaction+0x7c>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a1b      	ldr	r2, [pc, #108]	; (8003b90 <SPI_EndRxTxTransaction+0x80>)
 8003b22:	fba2 2303 	umull	r2, r3, r2, r3
 8003b26:	0d5b      	lsrs	r3, r3, #21
 8003b28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003b2c:	fb02 f303 	mul.w	r3, r2, r3
 8003b30:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b3a:	d112      	bne.n	8003b62 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	9300      	str	r3, [sp, #0]
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	2200      	movs	r2, #0
 8003b44:	2180      	movs	r1, #128	; 0x80
 8003b46:	68f8      	ldr	r0, [r7, #12]
 8003b48:	f7ff fef4 	bl	8003934 <SPI_WaitFlagStateUntilTimeout>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d016      	beq.n	8003b80 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b56:	f043 0220 	orr.w	r2, r3, #32
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e00f      	b.n	8003b82 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d00a      	beq.n	8003b7e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b78:	2b80      	cmp	r3, #128	; 0x80
 8003b7a:	d0f2      	beq.n	8003b62 <SPI_EndRxTxTransaction+0x52>
 8003b7c:	e000      	b.n	8003b80 <SPI_EndRxTxTransaction+0x70>
        break;
 8003b7e:	bf00      	nop
  }

  return HAL_OK;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3718      	adds	r7, #24
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	20000020 	.word	0x20000020
 8003b90:	165e9f81 	.word	0x165e9f81

08003b94 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003b9c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003ba0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8003ba4:	f003 0301 	and.w	r3, r3, #1
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d013      	beq.n	8003bd4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8003bac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003bb0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8003bb4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d00b      	beq.n	8003bd4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8003bbc:	e000      	b.n	8003bc0 <ITM_SendChar+0x2c>
    {
      __NOP();
 8003bbe:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8003bc0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d0f9      	beq.n	8003bbe <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8003bca:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	b2d2      	uxtb	r2, r2
 8003bd2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8003bd4:	687b      	ldr	r3, [r7, #4]
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	370c      	adds	r7, #12
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
	...

08003be4 <cs_high>:

#include "nrf24l01p.h"


static void cs_high()
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_SET);
 8003be8:	2201      	movs	r2, #1
 8003bea:	2110      	movs	r1, #16
 8003bec:	4802      	ldr	r0, [pc, #8]	; (8003bf8 <cs_high+0x14>)
 8003bee:	f7fe fb7f 	bl	80022f0 <HAL_GPIO_WritePin>
}
 8003bf2:	bf00      	nop
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	40020000 	.word	0x40020000

08003bfc <cs_low>:

static void cs_low()
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_RESET);
 8003c00:	2200      	movs	r2, #0
 8003c02:	2110      	movs	r1, #16
 8003c04:	4802      	ldr	r0, [pc, #8]	; (8003c10 <cs_low+0x14>)
 8003c06:	f7fe fb73 	bl	80022f0 <HAL_GPIO_WritePin>
}
 8003c0a:	bf00      	nop
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	40020000 	.word	0x40020000

08003c14 <ce_high>:

static void ce_high()
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, GPIO_PIN_SET);
 8003c18:	2201      	movs	r2, #1
 8003c1a:	2108      	movs	r1, #8
 8003c1c:	4802      	ldr	r0, [pc, #8]	; (8003c28 <ce_high+0x14>)
 8003c1e:	f7fe fb67 	bl	80022f0 <HAL_GPIO_WritePin>
}
 8003c22:	bf00      	nop
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	40020000 	.word	0x40020000

08003c2c <ce_low>:

static void ce_low()
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, GPIO_PIN_RESET);
 8003c30:	2200      	movs	r2, #0
 8003c32:	2108      	movs	r1, #8
 8003c34:	4802      	ldr	r0, [pc, #8]	; (8003c40 <ce_low+0x14>)
 8003c36:	f7fe fb5b 	bl	80022f0 <HAL_GPIO_WritePin>
}
 8003c3a:	bf00      	nop
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	40020000 	.word	0x40020000

08003c44 <read_register>:

static uint8_t read_register(uint8_t reg)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b086      	sub	sp, #24
 8003c48:	af02      	add	r7, sp, #8
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	71fb      	strb	r3, [r7, #7]
    uint8_t command = NRF24L01P_CMD_R_REGISTER | reg;
 8003c4e:	79fb      	ldrb	r3, [r7, #7]
 8003c50:	73fb      	strb	r3, [r7, #15]
    uint8_t status;
    uint8_t read_val;

    cs_low();
 8003c52:	f7ff ffd3 	bl	8003bfc <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8003c56:	f107 020e 	add.w	r2, r7, #14
 8003c5a:	f107 010f 	add.w	r1, r7, #15
 8003c5e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003c62:	9300      	str	r3, [sp, #0]
 8003c64:	2301      	movs	r3, #1
 8003c66:	4809      	ldr	r0, [pc, #36]	; (8003c8c <read_register+0x48>)
 8003c68:	f7ff f9dc 	bl	8003024 <HAL_SPI_TransmitReceive>
    HAL_SPI_Receive(NRF24L01P_SPI, &read_val, 1, 2000);
 8003c6c:	f107 010d 	add.w	r1, r7, #13
 8003c70:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003c74:	2201      	movs	r2, #1
 8003c76:	4805      	ldr	r0, [pc, #20]	; (8003c8c <read_register+0x48>)
 8003c78:	f7ff f849 	bl	8002d0e <HAL_SPI_Receive>
    cs_high();
 8003c7c:	f7ff ffb2 	bl	8003be4 <cs_high>

    return read_val;
 8003c80:	7b7b      	ldrb	r3, [r7, #13]
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3710      	adds	r7, #16
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	200000b8 	.word	0x200000b8

08003c90 <read_register_multiple>:

static void read_register_multiple(uint8_t reg, uint8_t* buf, uint8_t len)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b086      	sub	sp, #24
 8003c94:	af02      	add	r7, sp, #8
 8003c96:	4603      	mov	r3, r0
 8003c98:	6039      	str	r1, [r7, #0]
 8003c9a:	71fb      	strb	r3, [r7, #7]
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	71bb      	strb	r3, [r7, #6]
    uint8_t command = NRF24L01P_CMD_R_REGISTER | reg;
 8003ca0:	79fb      	ldrb	r3, [r7, #7]
 8003ca2:	73fb      	strb	r3, [r7, #15]
    uint8_t status;

    cs_low();
 8003ca4:	f7ff ffaa 	bl	8003bfc <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8003ca8:	f107 020e 	add.w	r2, r7, #14
 8003cac:	f107 010f 	add.w	r1, r7, #15
 8003cb0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003cb4:	9300      	str	r3, [sp, #0]
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	4808      	ldr	r0, [pc, #32]	; (8003cdc <read_register_multiple+0x4c>)
 8003cba:	f7ff f9b3 	bl	8003024 <HAL_SPI_TransmitReceive>
    HAL_SPI_Receive(NRF24L01P_SPI, buf, len, 2000);
 8003cbe:	79bb      	ldrb	r3, [r7, #6]
 8003cc0:	b29a      	uxth	r2, r3
 8003cc2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003cc6:	6839      	ldr	r1, [r7, #0]
 8003cc8:	4804      	ldr	r0, [pc, #16]	; (8003cdc <read_register_multiple+0x4c>)
 8003cca:	f7ff f820 	bl	8002d0e <HAL_SPI_Receive>
    cs_high();
 8003cce:	f7ff ff89 	bl	8003be4 <cs_high>
}
 8003cd2:	bf00      	nop
 8003cd4:	3710      	adds	r7, #16
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	200000b8 	.word	0x200000b8

08003ce0 <write_register>:

static uint8_t write_register(uint8_t reg, uint8_t value)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b086      	sub	sp, #24
 8003ce4:	af02      	add	r7, sp, #8
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	460a      	mov	r2, r1
 8003cea:	71fb      	strb	r3, [r7, #7]
 8003cec:	4613      	mov	r3, r2
 8003cee:	71bb      	strb	r3, [r7, #6]
    uint8_t command = NRF24L01P_CMD_W_REGISTER | reg;
 8003cf0:	79fb      	ldrb	r3, [r7, #7]
 8003cf2:	f043 0320 	orr.w	r3, r3, #32
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	73fb      	strb	r3, [r7, #15]
    uint8_t status;
    uint8_t write_val = value;
 8003cfa:	79bb      	ldrb	r3, [r7, #6]
 8003cfc:	737b      	strb	r3, [r7, #13]

    cs_low();
 8003cfe:	f7ff ff7d 	bl	8003bfc <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8003d02:	f107 020e 	add.w	r2, r7, #14
 8003d06:	f107 010f 	add.w	r1, r7, #15
 8003d0a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003d0e:	9300      	str	r3, [sp, #0]
 8003d10:	2301      	movs	r3, #1
 8003d12:	4809      	ldr	r0, [pc, #36]	; (8003d38 <write_register+0x58>)
 8003d14:	f7ff f986 	bl	8003024 <HAL_SPI_TransmitReceive>
    Fast_SPI_Transmit(NRF24L01P_SPI->Instance, &write_val, 1, false);
 8003d18:	4b07      	ldr	r3, [pc, #28]	; (8003d38 <write_register+0x58>)
 8003d1a:	6818      	ldr	r0, [r3, #0]
 8003d1c:	f107 010d 	add.w	r1, r7, #13
 8003d20:	2300      	movs	r3, #0
 8003d22:	2201      	movs	r2, #1
 8003d24:	f7fd f864 	bl	8000df0 <Fast_SPI_Transmit>
    cs_high();
 8003d28:	f7ff ff5c 	bl	8003be4 <cs_high>

    return write_val;
 8003d2c:	7b7b      	ldrb	r3, [r7, #13]
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3710      	adds	r7, #16
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	200000b8 	.word	0x200000b8

08003d3c <write_address>:

static void write_address(uint8_t addr, uint8_t value[5])
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b086      	sub	sp, #24
 8003d40:	af02      	add	r7, sp, #8
 8003d42:	4603      	mov	r3, r0
 8003d44:	6039      	str	r1, [r7, #0]
 8003d46:	71fb      	strb	r3, [r7, #7]
    uint8_t command = NRF24L01P_CMD_W_REGISTER | addr;
 8003d48:	79fb      	ldrb	r3, [r7, #7]
 8003d4a:	f043 0320 	orr.w	r3, r3, #32
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	73fb      	strb	r3, [r7, #15]
    uint8_t status;

    cs_low();
 8003d52:	f7ff ff53 	bl	8003bfc <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8003d56:	f107 020e 	add.w	r2, r7, #14
 8003d5a:	f107 010f 	add.w	r1, r7, #15
 8003d5e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003d62:	9300      	str	r3, [sp, #0]
 8003d64:	2301      	movs	r3, #1
 8003d66:	4808      	ldr	r0, [pc, #32]	; (8003d88 <write_address+0x4c>)
 8003d68:	f7ff f95c 	bl	8003024 <HAL_SPI_TransmitReceive>
    Fast_SPI_Transmit(NRF24L01P_SPI->Instance, value, 5, false);
 8003d6c:	4b06      	ldr	r3, [pc, #24]	; (8003d88 <write_address+0x4c>)
 8003d6e:	6818      	ldr	r0, [r3, #0]
 8003d70:	2300      	movs	r3, #0
 8003d72:	2205      	movs	r2, #5
 8003d74:	6839      	ldr	r1, [r7, #0]
 8003d76:	f7fd f83b 	bl	8000df0 <Fast_SPI_Transmit>
    cs_high();
 8003d7a:	f7ff ff33 	bl	8003be4 <cs_high>
}
 8003d7e:	bf00      	nop
 8003d80:	3710      	adds	r7, #16
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	200000b8 	.word	0x200000b8

08003d8c <_write>:

int _write(int file, char *ptr, int len)

{   int DataIdx;
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b086      	sub	sp, #24
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	607a      	str	r2, [r7, #4]

    for(DataIdx = 0; DataIdx < len; DataIdx++)
 8003d98:	2300      	movs	r3, #0
 8003d9a:	617b      	str	r3, [r7, #20]
 8003d9c:	e009      	b.n	8003db2 <_write+0x26>
    {
    	ITM_SendChar(*ptr++);
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	1c5a      	adds	r2, r3, #1
 8003da2:	60ba      	str	r2, [r7, #8]
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7ff fef4 	bl	8003b94 <ITM_SendChar>
    for(DataIdx = 0; DataIdx < len; DataIdx++)
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	3301      	adds	r3, #1
 8003db0:	617b      	str	r3, [r7, #20]
 8003db2:	697a      	ldr	r2, [r7, #20]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	dbf1      	blt.n	8003d9e <_write+0x12>
    }

     return len;
 8003dba:	687b      	ldr	r3, [r7, #4]

}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3718      	adds	r7, #24
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <print_byte_register>:

void print_byte_register(const char* name, uint8_t reg, uint8_t qty)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	460b      	mov	r3, r1
 8003dce:	70fb      	strb	r3, [r7, #3]
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	70bb      	strb	r3, [r7, #2]
    printf("%s\t=", name);
 8003dd4:	6879      	ldr	r1, [r7, #4]
 8003dd6:	480d      	ldr	r0, [pc, #52]	; (8003e0c <print_byte_register+0x48>)
 8003dd8:	f000 fcd6 	bl	8004788 <iprintf>
    while (qty--) {
 8003ddc:	e00a      	b.n	8003df4 <print_byte_register+0x30>
        printf(" 0x%02x", read_register(reg++));
 8003dde:	78fb      	ldrb	r3, [r7, #3]
 8003de0:	1c5a      	adds	r2, r3, #1
 8003de2:	70fa      	strb	r2, [r7, #3]
 8003de4:	4618      	mov	r0, r3
 8003de6:	f7ff ff2d 	bl	8003c44 <read_register>
 8003dea:	4603      	mov	r3, r0
 8003dec:	4619      	mov	r1, r3
 8003dee:	4808      	ldr	r0, [pc, #32]	; (8003e10 <print_byte_register+0x4c>)
 8003df0:	f000 fcca 	bl	8004788 <iprintf>
    while (qty--) {
 8003df4:	78bb      	ldrb	r3, [r7, #2]
 8003df6:	1e5a      	subs	r2, r3, #1
 8003df8:	70ba      	strb	r2, [r7, #2]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d1ef      	bne.n	8003dde <print_byte_register+0x1a>
    }
    printf("\r\n");
 8003dfe:	4805      	ldr	r0, [pc, #20]	; (8003e14 <print_byte_register+0x50>)
 8003e00:	f000 fd48 	bl	8004894 <puts>
}
 8003e04:	bf00      	nop
 8003e06:	3708      	adds	r7, #8
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	080055f8 	.word	0x080055f8
 8003e10:	08005600 	.word	0x08005600
 8003e14:	08005608 	.word	0x08005608

08003e18 <print_address_register>:

void print_address_register(const char* name, uint8_t reg, uint8_t qty)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b086      	sub	sp, #24
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	460b      	mov	r3, r1
 8003e22:	70fb      	strb	r3, [r7, #3]
 8003e24:	4613      	mov	r3, r2
 8003e26:	70bb      	strb	r3, [r7, #2]
    printf("%s\t=", name);
 8003e28:	6879      	ldr	r1, [r7, #4]
 8003e2a:	481e      	ldr	r0, [pc, #120]	; (8003ea4 <print_address_register+0x8c>)
 8003e2c:	f000 fcac 	bl	8004788 <iprintf>
    const int addr_width = 5;
 8003e30:	2305      	movs	r3, #5
 8003e32:	613b      	str	r3, [r7, #16]
    while (qty--) {
 8003e34:	e029      	b.n	8003e8a <print_address_register+0x72>
        uint8_t* buffer = (uint8_t*)malloc(addr_width * sizeof(uint8_t));
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f000 fbad 	bl	8004598 <malloc>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	60fb      	str	r3, [r7, #12]
        read_register_multiple(reg++ & NRF24L01P_REG_MASK, buffer, addr_width);
 8003e42:	78fb      	ldrb	r3, [r7, #3]
 8003e44:	1c5a      	adds	r2, r3, #1
 8003e46:	70fa      	strb	r2, [r7, #3]
 8003e48:	f003 031f 	and.w	r3, r3, #31
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	693a      	ldr	r2, [r7, #16]
 8003e50:	b2d2      	uxtb	r2, r2
 8003e52:	68f9      	ldr	r1, [r7, #12]
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7ff ff1b 	bl	8003c90 <read_register_multiple>

        printf(" 0x");
 8003e5a:	4813      	ldr	r0, [pc, #76]	; (8003ea8 <print_address_register+0x90>)
 8003e5c:	f000 fc94 	bl	8004788 <iprintf>
        uint8_t* bufptr = buffer + addr_width;
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	68fa      	ldr	r2, [r7, #12]
 8003e64:	4413      	add	r3, r2
 8003e66:	617b      	str	r3, [r7, #20]
        while (--bufptr >= buffer) {
 8003e68:	e005      	b.n	8003e76 <print_address_register+0x5e>
            printf("%02x", *bufptr);
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	4619      	mov	r1, r3
 8003e70:	480e      	ldr	r0, [pc, #56]	; (8003eac <print_address_register+0x94>)
 8003e72:	f000 fc89 	bl	8004788 <iprintf>
        while (--bufptr >= buffer) {
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	617b      	str	r3, [r7, #20]
 8003e7c:	697a      	ldr	r2, [r7, #20]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d2f2      	bcs.n	8003e6a <print_address_register+0x52>
        }
        free(buffer);
 8003e84:	68f8      	ldr	r0, [r7, #12]
 8003e86:	f000 fb8f 	bl	80045a8 <free>
    while (qty--) {
 8003e8a:	78bb      	ldrb	r3, [r7, #2]
 8003e8c:	1e5a      	subs	r2, r3, #1
 8003e8e:	70ba      	strb	r2, [r7, #2]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1d0      	bne.n	8003e36 <print_address_register+0x1e>
    }
    printf("\r\n");
 8003e94:	4806      	ldr	r0, [pc, #24]	; (8003eb0 <print_address_register+0x98>)
 8003e96:	f000 fcfd 	bl	8004894 <puts>
}
 8003e9a:	bf00      	nop
 8003e9c:	3718      	adds	r7, #24
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	080055f8 	.word	0x080055f8
 8003ea8:	0800560c 	.word	0x0800560c
 8003eac:	08005610 	.word	0x08005610
 8003eb0:	08005608 	.word	0x08005608

08003eb4 <getDataRate>:

#define _BV(x) (1 << (x))

air_data_rate getDataRate()
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
	air_data_rate result;
	uint8_t dr = read_register(NRF24L01P_REG_RF_SETUP) & (_BV(NRF24L01P_RF_DR_LOW) | _BV(NRF24L01P_RF_DR_HIGH));
 8003eba:	2006      	movs	r0, #6
 8003ebc:	f7ff fec2 	bl	8003c44 <read_register>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ec6:	71bb      	strb	r3, [r7, #6]

	// switch uses RAM (evil!)
	// Order matters in our case below
	if (dr == _BV(NRF24L01P_RF_DR_LOW)) {
 8003ec8:	79bb      	ldrb	r3, [r7, #6]
 8003eca:	2b20      	cmp	r3, #32
 8003ecc:	d102      	bne.n	8003ed4 <getDataRate+0x20>
		// '10' = 250KBPS
		result = _250kbps;
 8003ece:	2302      	movs	r3, #2
 8003ed0:	71fb      	strb	r3, [r7, #7]
 8003ed2:	e007      	b.n	8003ee4 <getDataRate+0x30>
	}
	else if (dr == _BV(NRF24L01P_RF_DR_HIGH)) {
 8003ed4:	79bb      	ldrb	r3, [r7, #6]
 8003ed6:	2b08      	cmp	r3, #8
 8003ed8:	d102      	bne.n	8003ee0 <getDataRate+0x2c>
		// '01' = 2MBPS
		result = _2Mbps;
 8003eda:	2301      	movs	r3, #1
 8003edc:	71fb      	strb	r3, [r7, #7]
 8003ede:	e001      	b.n	8003ee4 <getDataRate+0x30>
	}
	else {
		// '00' = 1MBPS
		result = _1Mbps;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	71fb      	strb	r3, [r7, #7]
	}
	return result;
 8003ee4:	79fb      	ldrb	r3, [r7, #7]
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3708      	adds	r7, #8
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}

08003eee <getCRCLength>:

rf24_crclength_e getCRCLength()
{
 8003eee:	b580      	push	{r7, lr}
 8003ef0:	b082      	sub	sp, #8
 8003ef2:	af00      	add	r7, sp, #0
    rf24_crclength_e result = RF24_CRC_DISABLED;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	71fb      	strb	r3, [r7, #7]
    uint8_t AA = read_register(NRF24L01P_REG_EN_AA);
 8003ef8:	2001      	movs	r0, #1
 8003efa:	f7ff fea3 	bl	8003c44 <read_register>
 8003efe:	4603      	mov	r3, r0
 8003f00:	71bb      	strb	r3, [r7, #6]
    uint8_t config_reg = read_register(NRF24L01P_REG_CONFIG);
 8003f02:	2000      	movs	r0, #0
 8003f04:	f7ff fe9e 	bl	8003c44 <read_register>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	717b      	strb	r3, [r7, #5]

    if (config_reg & _BV(NRF24L01P_EN_CRC) || AA) {
 8003f0c:	797b      	ldrb	r3, [r7, #5]
 8003f0e:	f003 0308 	and.w	r3, r3, #8
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d102      	bne.n	8003f1c <getCRCLength+0x2e>
 8003f16:	79bb      	ldrb	r3, [r7, #6]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d009      	beq.n	8003f30 <getCRCLength+0x42>
        if (config_reg & _BV(NRF24L01P_CRCO)) {
 8003f1c:	797b      	ldrb	r3, [r7, #5]
 8003f1e:	f003 0304 	and.w	r3, r3, #4
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d002      	beq.n	8003f2c <getCRCLength+0x3e>
            result = RF24_CRC_16;
 8003f26:	2302      	movs	r3, #2
 8003f28:	71fb      	strb	r3, [r7, #7]
 8003f2a:	e001      	b.n	8003f30 <getCRCLength+0x42>
        }
        else {
            result = RF24_CRC_8;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	71fb      	strb	r3, [r7, #7]
        }
    }

    return result;
 8003f30:	79fb      	ldrb	r3, [r7, #7]
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3708      	adds	r7, #8
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
	...

08003f3c <printDetails>:

void printDetails()
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	af00      	add	r7, sp, #0
    //print_status(get_status());

    print_address_register("RX_ADDR_P0-1", NRF24L01P_REG_RX_ADDR_P0, 2);
 8003f40:	2202      	movs	r2, #2
 8003f42:	210a      	movs	r1, #10
 8003f44:	481f      	ldr	r0, [pc, #124]	; (8003fc4 <printDetails+0x88>)
 8003f46:	f7ff ff67 	bl	8003e18 <print_address_register>
    print_byte_register("RX_ADDR_P2-5", NRF24L01P_REG_RX_ADDR_P2, 4);
 8003f4a:	2204      	movs	r2, #4
 8003f4c:	210c      	movs	r1, #12
 8003f4e:	481e      	ldr	r0, [pc, #120]	; (8003fc8 <printDetails+0x8c>)
 8003f50:	f7ff ff38 	bl	8003dc4 <print_byte_register>
    print_address_register("TX_ADDR\t", NRF24L01P_REG_TX_ADDR, 1);
 8003f54:	2201      	movs	r2, #1
 8003f56:	2110      	movs	r1, #16
 8003f58:	481c      	ldr	r0, [pc, #112]	; (8003fcc <printDetails+0x90>)
 8003f5a:	f7ff ff5d 	bl	8003e18 <print_address_register>

    print_byte_register("RX_PW_P0-6", NRF24L01P_REG_RX_PW_P0, 6);
 8003f5e:	2206      	movs	r2, #6
 8003f60:	2111      	movs	r1, #17
 8003f62:	481b      	ldr	r0, [pc, #108]	; (8003fd0 <printDetails+0x94>)
 8003f64:	f7ff ff2e 	bl	8003dc4 <print_byte_register>
    print_byte_register("EN_AA\t", NRF24L01P_REG_EN_AA, 1);
 8003f68:	2201      	movs	r2, #1
 8003f6a:	2101      	movs	r1, #1
 8003f6c:	4819      	ldr	r0, [pc, #100]	; (8003fd4 <printDetails+0x98>)
 8003f6e:	f7ff ff29 	bl	8003dc4 <print_byte_register>
    print_byte_register("EN_RXADDR", NRF24L01P_REG_EN_RXADDR, 1);
 8003f72:	2201      	movs	r2, #1
 8003f74:	2102      	movs	r1, #2
 8003f76:	4818      	ldr	r0, [pc, #96]	; (8003fd8 <printDetails+0x9c>)
 8003f78:	f7ff ff24 	bl	8003dc4 <print_byte_register>
    print_byte_register("RF_CH\t", NRF24L01P_REG_RF_CH, 1);
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	2105      	movs	r1, #5
 8003f80:	4816      	ldr	r0, [pc, #88]	; (8003fdc <printDetails+0xa0>)
 8003f82:	f7ff ff1f 	bl	8003dc4 <print_byte_register>
    print_byte_register("RF_SETUP", NRF24L01P_REG_RF_SETUP, 1);
 8003f86:	2201      	movs	r2, #1
 8003f88:	2106      	movs	r1, #6
 8003f8a:	4815      	ldr	r0, [pc, #84]	; (8003fe0 <printDetails+0xa4>)
 8003f8c:	f7ff ff1a 	bl	8003dc4 <print_byte_register>
    print_byte_register("CONFIG\t", NRF24L01P_REG_CONFIG, 1);
 8003f90:	2201      	movs	r2, #1
 8003f92:	2100      	movs	r1, #0
 8003f94:	4813      	ldr	r0, [pc, #76]	; (8003fe4 <printDetails+0xa8>)
 8003f96:	f7ff ff15 	bl	8003dc4 <print_byte_register>
    print_byte_register("DYNPD/FEATURE", NRF24L01P_REG_DYNPD, 2);
 8003f9a:	2202      	movs	r2, #2
 8003f9c:	211c      	movs	r1, #28
 8003f9e:	4812      	ldr	r0, [pc, #72]	; (8003fe8 <printDetails+0xac>)
 8003fa0:	f7ff ff10 	bl	8003dc4 <print_byte_register>

    printf("Data Rate\t%d\r\n", getDataRate());
 8003fa4:	f7ff ff86 	bl	8003eb4 <getDataRate>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	4619      	mov	r1, r3
 8003fac:	480f      	ldr	r0, [pc, #60]	; (8003fec <printDetails+0xb0>)
 8003fae:	f000 fbeb 	bl	8004788 <iprintf>
    //printf("Model\t\t%d= \r\n", isPVariant());
    printf("CRC Length\t%d\r\n", getCRCLength());
 8003fb2:	f7ff ff9c 	bl	8003eee <getCRCLength>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	4619      	mov	r1, r3
 8003fba:	480d      	ldr	r0, [pc, #52]	; (8003ff0 <printDetails+0xb4>)
 8003fbc:	f000 fbe4 	bl	8004788 <iprintf>
    //printf("PA Power\t%d\r\n", getPALevel());
}
 8003fc0:	bf00      	nop
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	08005618 	.word	0x08005618
 8003fc8:	08005628 	.word	0x08005628
 8003fcc:	08005638 	.word	0x08005638
 8003fd0:	08005644 	.word	0x08005644
 8003fd4:	08005650 	.word	0x08005650
 8003fd8:	08005658 	.word	0x08005658
 8003fdc:	08005664 	.word	0x08005664
 8003fe0:	0800566c 	.word	0x0800566c
 8003fe4:	08005678 	.word	0x08005678
 8003fe8:	08005680 	.word	0x08005680
 8003fec:	08005690 	.word	0x08005690
 8003ff0:	080056a0 	.word	0x080056a0

08003ff4 <nrf24l01p_tx_init>:
    
    ce_high();
}

void nrf24l01p_tx_init(channel MHz, air_data_rate bps, output_power out_pwr, uint8_t addr[5], bool auto_ack)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b082      	sub	sp, #8
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	603b      	str	r3, [r7, #0]
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	80fb      	strh	r3, [r7, #6]
 8004000:	460b      	mov	r3, r1
 8004002:	717b      	strb	r3, [r7, #5]
 8004004:	4613      	mov	r3, r2
 8004006:	713b      	strb	r3, [r7, #4]
    nrf24l01p_reset();
 8004008:	f000 f88a 	bl	8004120 <nrf24l01p_reset>

    printf("Placeholder message\n"); // to get around SWV ITM data console first message not being sent properly
 800400c:	482a      	ldr	r0, [pc, #168]	; (80040b8 <nrf24l01p_tx_init+0xc4>)
 800400e:	f000 fc41 	bl	8004894 <puts>
    printDetails();
 8004012:	f7ff ff93 	bl	8003f3c <printDetails>
    printf("\n\n\nAfter setting things up:\n");
 8004016:	4829      	ldr	r0, [pc, #164]	; (80040bc <nrf24l01p_tx_init+0xc8>)
 8004018:	f000 fc3c 	bl	8004894 <puts>

    nrf24l01p_ptx_mode();
 800401c:	f000 f91c 	bl	8004258 <nrf24l01p_ptx_mode>
    nrf24l01p_power_up();
 8004020:	f000 f9aa 	bl	8004378 <nrf24l01p_power_up>

    nrf24l01p_set_rf_channel(MHz);
 8004024:	88fb      	ldrh	r3, [r7, #6]
 8004026:	4618      	mov	r0, r3
 8004028:	f000 fa32 	bl	8004490 <nrf24l01p_set_rf_channel>
    nrf24l01p_set_rf_air_data_rate(bps);
 800402c:	797b      	ldrb	r3, [r7, #5]
 800402e:	4618      	mov	r0, r3
 8004030:	f000 fa5e 	bl	80044f0 <nrf24l01p_set_rf_air_data_rate>
    nrf24l01p_set_rf_tx_output_power(out_pwr);
 8004034:	793b      	ldrb	r3, [r7, #4]
 8004036:	4618      	mov	r0, r3
 8004038:	f000 fa3d 	bl	80044b6 <nrf24l01p_set_rf_tx_output_power>

    nrf24l01p_set_crc_length(1);
 800403c:	2001      	movs	r0, #1
 800403e:	f000 f9b0 	bl	80043a2 <nrf24l01p_set_crc_length>
    nrf24l01p_set_address_widths(5);
 8004042:	2005      	movs	r0, #5
 8004044:	f000 f9d0 	bl	80043e8 <nrf24l01p_set_address_widths>

    nrf24l01p_tx_set_address(addr);
 8004048:	6838      	ldr	r0, [r7, #0]
 800404a:	f000 f85c 	bl	8004106 <nrf24l01p_tx_set_address>

    if (auto_ack) {
 800404e:	7c3b      	ldrb	r3, [r7, #16]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d020      	beq.n	8004096 <nrf24l01p_tx_init+0xa2>
        write_register(NRF24L01P_REG_EN_AA, 0x3F);
 8004054:	213f      	movs	r1, #63	; 0x3f
 8004056:	2001      	movs	r0, #1
 8004058:	f7ff fe42 	bl	8003ce0 <write_register>
    	nrf24l01p_rx_set_address(addr, 0);
 800405c:	2100      	movs	r1, #0
 800405e:	6838      	ldr	r0, [r7, #0]
 8004060:	f000 f83d 	bl	80040de <nrf24l01p_rx_set_address>
	    write_register(NRF24L01P_REG_RX_PW_P0, 0x20);
 8004064:	2120      	movs	r1, #32
 8004066:	2011      	movs	r0, #17
 8004068:	f7ff fe3a 	bl	8003ce0 <write_register>
	    write_register(NRF24L01P_REG_RX_PW_P1, 0x20);
 800406c:	2120      	movs	r1, #32
 800406e:	2012      	movs	r0, #18
 8004070:	f7ff fe36 	bl	8003ce0 <write_register>
	    write_register(NRF24L01P_REG_RX_PW_P2, 0x20);
 8004074:	2120      	movs	r1, #32
 8004076:	2013      	movs	r0, #19
 8004078:	f7ff fe32 	bl	8003ce0 <write_register>
	    write_register(NRF24L01P_REG_RX_PW_P3, 0x20);
 800407c:	2120      	movs	r1, #32
 800407e:	2014      	movs	r0, #20
 8004080:	f7ff fe2e 	bl	8003ce0 <write_register>
	    write_register(NRF24L01P_REG_RX_PW_P4, 0x20);
 8004084:	2120      	movs	r1, #32
 8004086:	2015      	movs	r0, #21
 8004088:	f7ff fe2a 	bl	8003ce0 <write_register>
	    write_register(NRF24L01P_REG_RX_PW_P5, 0x20);
 800408c:	2120      	movs	r1, #32
 800408e:	2016      	movs	r0, #22
 8004090:	f7ff fe26 	bl	8003ce0 <write_register>
 8004094:	e003      	b.n	800409e <nrf24l01p_tx_init+0xaa>
    } else {
    	write_register(NRF24L01P_REG_EN_AA, 0x00);
 8004096:	2100      	movs	r1, #0
 8004098:	2001      	movs	r0, #1
 800409a:	f7ff fe21 	bl	8003ce0 <write_register>
    }

    nrf24l01p_auto_retransmit_count(3);
 800409e:	2003      	movs	r0, #3
 80040a0:	f000 f9b2 	bl	8004408 <nrf24l01p_auto_retransmit_count>
    nrf24l01p_auto_retransmit_delay(250);
 80040a4:	20fa      	movs	r0, #250	; 0xfa
 80040a6:	f000 f9cb 	bl	8004440 <nrf24l01p_auto_retransmit_delay>

    ce_high();
 80040aa:	f7ff fdb3 	bl	8003c14 <ce_high>
}
 80040ae:	bf00      	nop
 80040b0:	3708      	adds	r7, #8
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	080056b0 	.word	0x080056b0
 80040bc:	080056c4 	.word	0x080056c4

080040c0 <nrf24l01p_tx_transmit>:

    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
}

void nrf24l01p_tx_transmit(uint8_t* tx_payload, bool include_crc)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	460b      	mov	r3, r1
 80040ca:	70fb      	strb	r3, [r7, #3]
    nrf24l01p_write_tx_fifo(tx_payload, include_crc);
 80040cc:	78fb      	ldrb	r3, [r7, #3]
 80040ce:	4619      	mov	r1, r3
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f000 f8e1 	bl	8004298 <nrf24l01p_write_tx_fifo>
}
 80040d6:	bf00      	nop
 80040d8:	3708      	adds	r7, #8
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}

080040de <nrf24l01p_rx_set_address>:

void nrf24l01p_rx_set_address(address addr, uint8_t pipe)
{
 80040de:	b580      	push	{r7, lr}
 80040e0:	b082      	sub	sp, #8
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
 80040e6:	460b      	mov	r3, r1
 80040e8:	70fb      	strb	r3, [r7, #3]
	if (pipe >= 0 && pipe <= 5)	// ensure valid pipe
 80040ea:	78fb      	ldrb	r3, [r7, #3]
 80040ec:	2b05      	cmp	r3, #5
 80040ee:	d806      	bhi.n	80040fe <nrf24l01p_rx_set_address+0x20>
		write_address(NRF24L01P_REG_RX_ADDR_P0 + pipe, addr);
 80040f0:	78fb      	ldrb	r3, [r7, #3]
 80040f2:	330a      	adds	r3, #10
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	6879      	ldr	r1, [r7, #4]
 80040f8:	4618      	mov	r0, r3
 80040fa:	f7ff fe1f 	bl	8003d3c <write_address>
}
 80040fe:	bf00      	nop
 8004100:	3708      	adds	r7, #8
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}

08004106 <nrf24l01p_tx_set_address>:

void nrf24l01p_tx_set_address(address addr)
{
 8004106:	b580      	push	{r7, lr}
 8004108:	b082      	sub	sp, #8
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
	write_address(NRF24L01P_REG_TX_ADDR, addr);
 800410e:	6879      	ldr	r1, [r7, #4]
 8004110:	2010      	movs	r0, #16
 8004112:	f7ff fe13 	bl	8003d3c <write_address>
}
 8004116:	bf00      	nop
 8004118:	3708      	adds	r7, #8
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
	...

08004120 <nrf24l01p_reset>:
    }
}

/* nRF24L01+ Sub Functions */
void nrf24l01p_reset()
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b086      	sub	sp, #24
 8004124:	af00      	add	r7, sp, #0
    // Reset pins
    cs_high();
 8004126:	f7ff fd5d 	bl	8003be4 <cs_high>
    ce_low();
 800412a:	f7ff fd7f 	bl	8003c2c <ce_low>

    // Reset registers
    write_register(NRF24L01P_REG_CONFIG, 0x08);
 800412e:	2108      	movs	r1, #8
 8004130:	2000      	movs	r0, #0
 8004132:	f7ff fdd5 	bl	8003ce0 <write_register>
    write_register(NRF24L01P_REG_EN_AA, 0x3F);
 8004136:	213f      	movs	r1, #63	; 0x3f
 8004138:	2001      	movs	r0, #1
 800413a:	f7ff fdd1 	bl	8003ce0 <write_register>
    write_register(NRF24L01P_REG_EN_RXADDR, 0x03);
 800413e:	2103      	movs	r1, #3
 8004140:	2002      	movs	r0, #2
 8004142:	f7ff fdcd 	bl	8003ce0 <write_register>
    write_register(NRF24L01P_REG_SETUP_AW, 0x03);
 8004146:	2103      	movs	r1, #3
 8004148:	2003      	movs	r0, #3
 800414a:	f7ff fdc9 	bl	8003ce0 <write_register>
    write_register(NRF24L01P_REG_SETUP_RETR, 0x03);
 800414e:	2103      	movs	r1, #3
 8004150:	2004      	movs	r0, #4
 8004152:	f7ff fdc5 	bl	8003ce0 <write_register>
    write_register(NRF24L01P_REG_RF_CH, 0x02);
 8004156:	2102      	movs	r1, #2
 8004158:	2005      	movs	r0, #5
 800415a:	f7ff fdc1 	bl	8003ce0 <write_register>
    write_register(NRF24L01P_REG_RF_SETUP, 0x07);
 800415e:	2107      	movs	r1, #7
 8004160:	2006      	movs	r0, #6
 8004162:	f7ff fdbd 	bl	8003ce0 <write_register>
    write_register(NRF24L01P_REG_STATUS, 0x7E);
 8004166:	217e      	movs	r1, #126	; 0x7e
 8004168:	2007      	movs	r0, #7
 800416a:	f7ff fdb9 	bl	8003ce0 <write_register>
    write_register(NRF24L01P_REG_OBSERVE_TX, 0x00);
 800416e:	2100      	movs	r1, #0
 8004170:	2008      	movs	r0, #8
 8004172:	f7ff fdb5 	bl	8003ce0 <write_register>
    write_register(NRF24L01P_REG_RPD, 0x00);
 8004176:	2100      	movs	r1, #0
 8004178:	2009      	movs	r0, #9
 800417a:	f7ff fdb1 	bl	8003ce0 <write_register>
    write_address(NRF24L01P_REG_RX_ADDR_P0, (address){0xE7,0xE7,0xE7,0xE7,0xE7});
 800417e:	4a34      	ldr	r2, [pc, #208]	; (8004250 <nrf24l01p_reset+0x130>)
 8004180:	f107 0310 	add.w	r3, r7, #16
 8004184:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004188:	6018      	str	r0, [r3, #0]
 800418a:	3304      	adds	r3, #4
 800418c:	7019      	strb	r1, [r3, #0]
 800418e:	f107 0310 	add.w	r3, r7, #16
 8004192:	4619      	mov	r1, r3
 8004194:	200a      	movs	r0, #10
 8004196:	f7ff fdd1 	bl	8003d3c <write_address>
    write_address(NRF24L01P_REG_RX_ADDR_P1, (address){0xC2,0xC2,0xC2,0xC2,0xC2});
 800419a:	4a2e      	ldr	r2, [pc, #184]	; (8004254 <nrf24l01p_reset+0x134>)
 800419c:	f107 0308 	add.w	r3, r7, #8
 80041a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80041a4:	6018      	str	r0, [r3, #0]
 80041a6:	3304      	adds	r3, #4
 80041a8:	7019      	strb	r1, [r3, #0]
 80041aa:	f107 0308 	add.w	r3, r7, #8
 80041ae:	4619      	mov	r1, r3
 80041b0:	200b      	movs	r0, #11
 80041b2:	f7ff fdc3 	bl	8003d3c <write_address>
    write_register(NRF24L01P_REG_RX_ADDR_P2, 0xC3);
 80041b6:	21c3      	movs	r1, #195	; 0xc3
 80041b8:	200c      	movs	r0, #12
 80041ba:	f7ff fd91 	bl	8003ce0 <write_register>
    write_register(NRF24L01P_REG_RX_ADDR_P3, 0xC4);
 80041be:	21c4      	movs	r1, #196	; 0xc4
 80041c0:	200d      	movs	r0, #13
 80041c2:	f7ff fd8d 	bl	8003ce0 <write_register>
    write_register(NRF24L01P_REG_RX_ADDR_P4, 0xC5);
 80041c6:	21c5      	movs	r1, #197	; 0xc5
 80041c8:	200e      	movs	r0, #14
 80041ca:	f7ff fd89 	bl	8003ce0 <write_register>
    write_register(NRF24L01P_REG_RX_ADDR_P5, 0xC6);
 80041ce:	21c6      	movs	r1, #198	; 0xc6
 80041d0:	200f      	movs	r0, #15
 80041d2:	f7ff fd85 	bl	8003ce0 <write_register>
    write_address(NRF24L01P_REG_TX_ADDR, (address){0xE7,0xE7,0xE7,0xE7,0xE7});
 80041d6:	4a1e      	ldr	r2, [pc, #120]	; (8004250 <nrf24l01p_reset+0x130>)
 80041d8:	463b      	mov	r3, r7
 80041da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80041de:	6018      	str	r0, [r3, #0]
 80041e0:	3304      	adds	r3, #4
 80041e2:	7019      	strb	r1, [r3, #0]
 80041e4:	463b      	mov	r3, r7
 80041e6:	4619      	mov	r1, r3
 80041e8:	2010      	movs	r0, #16
 80041ea:	f7ff fda7 	bl	8003d3c <write_address>
    write_register(NRF24L01P_REG_RX_PW_P0, 0x00);
 80041ee:	2100      	movs	r1, #0
 80041f0:	2011      	movs	r0, #17
 80041f2:	f7ff fd75 	bl	8003ce0 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P0, 0x00);
 80041f6:	2100      	movs	r1, #0
 80041f8:	2011      	movs	r0, #17
 80041fa:	f7ff fd71 	bl	8003ce0 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P1, 0x00);
 80041fe:	2100      	movs	r1, #0
 8004200:	2012      	movs	r0, #18
 8004202:	f7ff fd6d 	bl	8003ce0 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P2, 0x00);
 8004206:	2100      	movs	r1, #0
 8004208:	2013      	movs	r0, #19
 800420a:	f7ff fd69 	bl	8003ce0 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P3, 0x00);
 800420e:	2100      	movs	r1, #0
 8004210:	2014      	movs	r0, #20
 8004212:	f7ff fd65 	bl	8003ce0 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P4, 0x00);
 8004216:	2100      	movs	r1, #0
 8004218:	2015      	movs	r0, #21
 800421a:	f7ff fd61 	bl	8003ce0 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P5, 0x00);
 800421e:	2100      	movs	r1, #0
 8004220:	2016      	movs	r0, #22
 8004222:	f7ff fd5d 	bl	8003ce0 <write_register>
    write_register(NRF24L01P_REG_FIFO_STATUS, 0x11);
 8004226:	2111      	movs	r1, #17
 8004228:	2017      	movs	r0, #23
 800422a:	f7ff fd59 	bl	8003ce0 <write_register>
    write_register(NRF24L01P_REG_DYNPD, 0x00);
 800422e:	2100      	movs	r1, #0
 8004230:	201c      	movs	r0, #28
 8004232:	f7ff fd55 	bl	8003ce0 <write_register>
    write_register(NRF24L01P_REG_FEATURE, 0x00);
 8004236:	2100      	movs	r1, #0
 8004238:	201d      	movs	r0, #29
 800423a:	f7ff fd51 	bl	8003ce0 <write_register>

    // Reset FIFO
    nrf24l01p_flush_rx_fifo();
 800423e:	f000 f86b 	bl	8004318 <nrf24l01p_flush_rx_fifo>
    nrf24l01p_flush_tx_fifo();
 8004242:	f000 f881 	bl	8004348 <nrf24l01p_flush_tx_fifo>
}
 8004246:	bf00      	nop
 8004248:	3718      	adds	r7, #24
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	080056e0 	.word	0x080056e0
 8004254:	080056e8 	.word	0x080056e8

08004258 <nrf24l01p_ptx_mode>:

    write_register(NRF24L01P_REG_CONFIG, new_config);
}

void nrf24l01p_ptx_mode()
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 800425e:	2000      	movs	r0, #0
 8004260:	f7ff fcf0 	bl	8003c44 <read_register>
 8004264:	4603      	mov	r3, r0
 8004266:	71fb      	strb	r3, [r7, #7]
    new_config &= 0xFE;
 8004268:	79fb      	ldrb	r3, [r7, #7]
 800426a:	f023 0301 	bic.w	r3, r3, #1
 800426e:	71fb      	strb	r3, [r7, #7]
    //new_config &= 0x7E;

    write_register(NRF24L01P_REG_CONFIG, new_config);
 8004270:	79fb      	ldrb	r3, [r7, #7]
 8004272:	4619      	mov	r1, r3
 8004274:	2000      	movs	r0, #0
 8004276:	f7ff fd33 	bl	8003ce0 <write_register>
//    write_register(NRF24L01P_REG_RX_PW_P1, 0x20);
//    write_register(NRF24L01P_REG_RX_PW_P2, 0x20);
//    write_register(NRF24L01P_REG_RX_PW_P3, 0x20);
//    write_register(NRF24L01P_REG_RX_PW_P4, 0x20);
//    write_register(NRF24L01P_REG_RX_PW_P5, 0x20);
}
 800427a:	bf00      	nop
 800427c:	3708      	adds	r7, #8
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}

08004282 <HAL_SPI_TxCpltCallback>:

    return status;
}

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004282:	b580      	push	{r7, lr}
 8004284:	b082      	sub	sp, #8
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
    cs_high();
 800428a:	f7ff fcab 	bl	8003be4 <cs_high>
}
 800428e:	bf00      	nop
 8004290:	3708      	adds	r7, #8
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
	...

08004298 <nrf24l01p_write_tx_fifo>:

uint8_t nrf24l01p_write_tx_fifo(uint8_t* tx_payload, bool include_crc)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b086      	sub	sp, #24
 800429c:	af02      	add	r7, sp, #8
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	460b      	mov	r3, r1
 80042a2:	70fb      	strb	r3, [r7, #3]
    uint8_t command = NRF24L01P_CMD_W_TX_PAYLOAD;
 80042a4:	23a0      	movs	r3, #160	; 0xa0
 80042a6:	73fb      	strb	r3, [r7, #15]
    uint8_t status;

    cs_low();
 80042a8:	f7ff fca8 	bl	8003bfc <cs_low>
    NRF24L01P_SPI->Instance->CR1 &= ~SPI_CR1_CRCEN;
 80042ac:	4b19      	ldr	r3, [pc, #100]	; (8004314 <nrf24l01p_write_tx_fifo+0x7c>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	4b18      	ldr	r3, [pc, #96]	; (8004314 <nrf24l01p_write_tx_fifo+0x7c>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042ba:	601a      	str	r2, [r3, #0]
    NRF24L01P_SPI->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042bc:	4b15      	ldr	r3, [pc, #84]	; (8004314 <nrf24l01p_write_tx_fifo+0x7c>)
 80042be:	2200      	movs	r2, #0
 80042c0:	629a      	str	r2, [r3, #40]	; 0x28
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 80042c2:	f107 020e 	add.w	r2, r7, #14
 80042c6:	f107 010f 	add.w	r1, r7, #15
 80042ca:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80042ce:	9300      	str	r3, [sp, #0]
 80042d0:	2301      	movs	r3, #1
 80042d2:	4810      	ldr	r0, [pc, #64]	; (8004314 <nrf24l01p_write_tx_fifo+0x7c>)
 80042d4:	f7fe fea6 	bl	8003024 <HAL_SPI_TransmitReceive>
    //Fast_SPI_Transmit(NRF24L01P_SPI->Instance, tx_payload, NRF24L01P_PAYLOAD_LENGTH, false);
    if (include_crc) {
 80042d8:	78fb      	ldrb	r3, [r7, #3]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d00b      	beq.n	80042f6 <nrf24l01p_write_tx_fifo+0x5e>
    	NRF24L01P_SPI->Instance->CR1 |= SPI_CR1_CRCEN;
 80042de:	4b0d      	ldr	r3, [pc, #52]	; (8004314 <nrf24l01p_write_tx_fifo+0x7c>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	4b0b      	ldr	r3, [pc, #44]	; (8004314 <nrf24l01p_write_tx_fifo+0x7c>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042ec:	601a      	str	r2, [r3, #0]
    	NRF24L01P_SPI->Init.CRCCalculation = SPI_CRCCALCULATION_ENABLE;
 80042ee:	4b09      	ldr	r3, [pc, #36]	; (8004314 <nrf24l01p_write_tx_fifo+0x7c>)
 80042f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80042f4:	629a      	str	r2, [r3, #40]	; 0x28
    }
    HAL_SPI_Transmit_DMA(NRF24L01P_SPI, tx_payload, NRF24L01P_PAYLOAD_LENGTH - include_crc);
 80042f6:	78fb      	ldrb	r3, [r7, #3]
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	f1c3 0320 	rsb	r3, r3, #32
 80042fe:	b29b      	uxth	r3, r3
 8004300:	461a      	mov	r2, r3
 8004302:	6879      	ldr	r1, [r7, #4]
 8004304:	4803      	ldr	r0, [pc, #12]	; (8004314 <nrf24l01p_write_tx_fifo+0x7c>)
 8004306:	f7ff f89f 	bl	8003448 <HAL_SPI_Transmit_DMA>


    return status;
 800430a:	7bbb      	ldrb	r3, [r7, #14]
}
 800430c:	4618      	mov	r0, r3
 800430e:	3710      	adds	r7, #16
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}
 8004314:	200000b8 	.word	0x200000b8

08004318 <nrf24l01p_flush_rx_fifo>:


void nrf24l01p_flush_rx_fifo()
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_FLUSH_RX;
 800431e:	23e2      	movs	r3, #226	; 0xe2
 8004320:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 8004322:	f7ff fc6b 	bl	8003bfc <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8004326:	1dba      	adds	r2, r7, #6
 8004328:	1df9      	adds	r1, r7, #7
 800432a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800432e:	9300      	str	r3, [sp, #0]
 8004330:	2301      	movs	r3, #1
 8004332:	4804      	ldr	r0, [pc, #16]	; (8004344 <nrf24l01p_flush_rx_fifo+0x2c>)
 8004334:	f7fe fe76 	bl	8003024 <HAL_SPI_TransmitReceive>
    cs_high();
 8004338:	f7ff fc54 	bl	8003be4 <cs_high>
}
 800433c:	bf00      	nop
 800433e:	3708      	adds	r7, #8
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	200000b8 	.word	0x200000b8

08004348 <nrf24l01p_flush_tx_fifo>:

void nrf24l01p_flush_tx_fifo()
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_FLUSH_TX;
 800434e:	23e1      	movs	r3, #225	; 0xe1
 8004350:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 8004352:	f7ff fc53 	bl	8003bfc <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8004356:	1dba      	adds	r2, r7, #6
 8004358:	1df9      	adds	r1, r7, #7
 800435a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800435e:	9300      	str	r3, [sp, #0]
 8004360:	2301      	movs	r3, #1
 8004362:	4804      	ldr	r0, [pc, #16]	; (8004374 <nrf24l01p_flush_tx_fifo+0x2c>)
 8004364:	f7fe fe5e 	bl	8003024 <HAL_SPI_TransmitReceive>
    cs_high();
 8004368:	f7ff fc3c 	bl	8003be4 <cs_high>
}
 800436c:	bf00      	nop
 800436e:	3708      	adds	r7, #8
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}
 8004374:	200000b8 	.word	0x200000b8

08004378 <nrf24l01p_power_up>:

    write_register(NRF24L01P_REG_STATUS, new_status); 
}

void nrf24l01p_power_up()
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 800437e:	2000      	movs	r0, #0
 8004380:	f7ff fc60 	bl	8003c44 <read_register>
 8004384:	4603      	mov	r3, r0
 8004386:	71fb      	strb	r3, [r7, #7]
    new_config |= 1 << 1;
 8004388:	79fb      	ldrb	r3, [r7, #7]
 800438a:	f043 0302 	orr.w	r3, r3, #2
 800438e:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_CONFIG, new_config);
 8004390:	79fb      	ldrb	r3, [r7, #7]
 8004392:	4619      	mov	r1, r3
 8004394:	2000      	movs	r0, #0
 8004396:	f7ff fca3 	bl	8003ce0 <write_register>
}
 800439a:	bf00      	nop
 800439c:	3708      	adds	r7, #8
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}

080043a2 <nrf24l01p_set_crc_length>:

    write_register(NRF24L01P_REG_CONFIG, new_config);
}

void nrf24l01p_set_crc_length(length bytes)
{
 80043a2:	b580      	push	{r7, lr}
 80043a4:	b084      	sub	sp, #16
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	4603      	mov	r3, r0
 80043aa:	71fb      	strb	r3, [r7, #7]
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 80043ac:	2000      	movs	r0, #0
 80043ae:	f7ff fc49 	bl	8003c44 <read_register>
 80043b2:	4603      	mov	r3, r0
 80043b4:	73fb      	strb	r3, [r7, #15]
    
    switch(bytes)
 80043b6:	79fb      	ldrb	r3, [r7, #7]
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d002      	beq.n	80043c2 <nrf24l01p_set_crc_length+0x20>
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d005      	beq.n	80043cc <nrf24l01p_set_crc_length+0x2a>
 80043c0:	e009      	b.n	80043d6 <nrf24l01p_set_crc_length+0x34>
    {
        // CRCO bit in CONFIG resiger set 0
        case 1:
            new_config &= 0xFB;
 80043c2:	7bfb      	ldrb	r3, [r7, #15]
 80043c4:	f023 0304 	bic.w	r3, r3, #4
 80043c8:	73fb      	strb	r3, [r7, #15]
            break;
 80043ca:	e004      	b.n	80043d6 <nrf24l01p_set_crc_length+0x34>
        // CRCO bit in CONFIG resiger set 1
        case 2:
            new_config |= 1 << 2;
 80043cc:	7bfb      	ldrb	r3, [r7, #15]
 80043ce:	f043 0304 	orr.w	r3, r3, #4
 80043d2:	73fb      	strb	r3, [r7, #15]
            break;
 80043d4:	bf00      	nop
    }

    write_register(NRF24L01P_REG_CONFIG, new_config);
 80043d6:	7bfb      	ldrb	r3, [r7, #15]
 80043d8:	4619      	mov	r1, r3
 80043da:	2000      	movs	r0, #0
 80043dc:	f7ff fc80 	bl	8003ce0 <write_register>
}
 80043e0:	bf00      	nop
 80043e2:	3710      	adds	r7, #16
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <nrf24l01p_set_address_widths>:

void nrf24l01p_set_address_widths(widths bytes)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b082      	sub	sp, #8
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	4603      	mov	r3, r0
 80043f0:	71fb      	strb	r3, [r7, #7]
    write_register(NRF24L01P_REG_SETUP_AW, bytes - 2);
 80043f2:	79fb      	ldrb	r3, [r7, #7]
 80043f4:	3b02      	subs	r3, #2
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	4619      	mov	r1, r3
 80043fa:	2003      	movs	r0, #3
 80043fc:	f7ff fc70 	bl	8003ce0 <write_register>
}
 8004400:	bf00      	nop
 8004402:	3708      	adds	r7, #8
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <nrf24l01p_auto_retransmit_count>:

void nrf24l01p_auto_retransmit_count(count cnt)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	4603      	mov	r3, r0
 8004410:	71fb      	strb	r3, [r7, #7]
    uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 8004412:	2004      	movs	r0, #4
 8004414:	f7ff fc16 	bl	8003c44 <read_register>
 8004418:	4603      	mov	r3, r0
 800441a:	73fb      	strb	r3, [r7, #15]
    
    // Reset ARC register 0
    new_setup_retr |= 0xF0;
 800441c:	7bfb      	ldrb	r3, [r7, #15]
 800441e:	f063 030f 	orn	r3, r3, #15
 8004422:	73fb      	strb	r3, [r7, #15]
    new_setup_retr |= cnt;
 8004424:	7bfa      	ldrb	r2, [r7, #15]
 8004426:	79fb      	ldrb	r3, [r7, #7]
 8004428:	4313      	orrs	r3, r2
 800442a:	73fb      	strb	r3, [r7, #15]
    write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 800442c:	7bfb      	ldrb	r3, [r7, #15]
 800442e:	4619      	mov	r1, r3
 8004430:	2004      	movs	r0, #4
 8004432:	f7ff fc55 	bl	8003ce0 <write_register>
}
 8004436:	bf00      	nop
 8004438:	3710      	adds	r7, #16
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
	...

08004440 <nrf24l01p_auto_retransmit_delay>:

void nrf24l01p_auto_retransmit_delay(delay us)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	4603      	mov	r3, r0
 8004448:	80fb      	strh	r3, [r7, #6]
    uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 800444a:	2004      	movs	r0, #4
 800444c:	f7ff fbfa 	bl	8003c44 <read_register>
 8004450:	4603      	mov	r3, r0
 8004452:	73fb      	strb	r3, [r7, #15]

    // Reset ARD register 0
    new_setup_retr |= 0x0F;
 8004454:	7bfb      	ldrb	r3, [r7, #15]
 8004456:	f043 030f 	orr.w	r3, r3, #15
 800445a:	73fb      	strb	r3, [r7, #15]
    new_setup_retr |= ((us / 250) - 1) << 4;
 800445c:	88fb      	ldrh	r3, [r7, #6]
 800445e:	4a0b      	ldr	r2, [pc, #44]	; (800448c <nrf24l01p_auto_retransmit_delay+0x4c>)
 8004460:	fba2 2303 	umull	r2, r3, r2, r3
 8004464:	091b      	lsrs	r3, r3, #4
 8004466:	b29b      	uxth	r3, r3
 8004468:	3b01      	subs	r3, #1
 800446a:	011b      	lsls	r3, r3, #4
 800446c:	b25a      	sxtb	r2, r3
 800446e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004472:	4313      	orrs	r3, r2
 8004474:	b25b      	sxtb	r3, r3
 8004476:	73fb      	strb	r3, [r7, #15]
    write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 8004478:	7bfb      	ldrb	r3, [r7, #15]
 800447a:	4619      	mov	r1, r3
 800447c:	2004      	movs	r0, #4
 800447e:	f7ff fc2f 	bl	8003ce0 <write_register>
}
 8004482:	bf00      	nop
 8004484:	3710      	adds	r7, #16
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	10624dd3 	.word	0x10624dd3

08004490 <nrf24l01p_set_rf_channel>:

void nrf24l01p_set_rf_channel(channel MHz)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	4603      	mov	r3, r0
 8004498:	80fb      	strh	r3, [r7, #6]
	uint16_t new_rf_ch = MHz - 2400;
 800449a:	88fb      	ldrh	r3, [r7, #6]
 800449c:	f5a3 6316 	sub.w	r3, r3, #2400	; 0x960
 80044a0:	81fb      	strh	r3, [r7, #14]
    write_register(NRF24L01P_REG_RF_CH, new_rf_ch);
 80044a2:	89fb      	ldrh	r3, [r7, #14]
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	4619      	mov	r1, r3
 80044a8:	2005      	movs	r0, #5
 80044aa:	f7ff fc19 	bl	8003ce0 <write_register>
}
 80044ae:	bf00      	nop
 80044b0:	3710      	adds	r7, #16
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}

080044b6 <nrf24l01p_set_rf_tx_output_power>:

void nrf24l01p_set_rf_tx_output_power(output_power dBm)
{
 80044b6:	b580      	push	{r7, lr}
 80044b8:	b084      	sub	sp, #16
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	4603      	mov	r3, r0
 80044be:	71fb      	strb	r3, [r7, #7]
    uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xF9;
 80044c0:	2006      	movs	r0, #6
 80044c2:	f7ff fbbf 	bl	8003c44 <read_register>
 80044c6:	4603      	mov	r3, r0
 80044c8:	f023 0306 	bic.w	r3, r3, #6
 80044cc:	73fb      	strb	r3, [r7, #15]
    new_rf_setup |= (dBm << 1);
 80044ce:	79fb      	ldrb	r3, [r7, #7]
 80044d0:	005b      	lsls	r3, r3, #1
 80044d2:	b25a      	sxtb	r2, r3
 80044d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044d8:	4313      	orrs	r3, r2
 80044da:	b25b      	sxtb	r3, r3
 80044dc:	73fb      	strb	r3, [r7, #15]

    write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 80044de:	7bfb      	ldrb	r3, [r7, #15]
 80044e0:	4619      	mov	r1, r3
 80044e2:	2006      	movs	r0, #6
 80044e4:	f7ff fbfc 	bl	8003ce0 <write_register>
}
 80044e8:	bf00      	nop
 80044ea:	3710      	adds	r7, #16
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <nrf24l01p_set_rf_air_data_rate>:

void nrf24l01p_set_rf_air_data_rate(air_data_rate bps)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	4603      	mov	r3, r0
 80044f8:	71fb      	strb	r3, [r7, #7]
    // Set value to 0
    uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xD7;
 80044fa:	2006      	movs	r0, #6
 80044fc:	f7ff fba2 	bl	8003c44 <read_register>
 8004500:	4603      	mov	r3, r0
 8004502:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8004506:	73fb      	strb	r3, [r7, #15]
    
    switch(bps)
 8004508:	79fb      	ldrb	r3, [r7, #7]
 800450a:	2b02      	cmp	r3, #2
 800450c:	d00a      	beq.n	8004524 <nrf24l01p_set_rf_air_data_rate+0x34>
 800450e:	2b02      	cmp	r3, #2
 8004510:	dc0e      	bgt.n	8004530 <nrf24l01p_set_rf_air_data_rate+0x40>
 8004512:	2b00      	cmp	r3, #0
 8004514:	d00b      	beq.n	800452e <nrf24l01p_set_rf_air_data_rate+0x3e>
 8004516:	2b01      	cmp	r3, #1
 8004518:	d10a      	bne.n	8004530 <nrf24l01p_set_rf_air_data_rate+0x40>
    {
        case _1Mbps: 
            break;
        case _2Mbps: 
            new_rf_setup |= 1 << 3;
 800451a:	7bfb      	ldrb	r3, [r7, #15]
 800451c:	f043 0308 	orr.w	r3, r3, #8
 8004520:	73fb      	strb	r3, [r7, #15]
            break;
 8004522:	e005      	b.n	8004530 <nrf24l01p_set_rf_air_data_rate+0x40>
        case _250kbps:
            new_rf_setup |= 1 << 5;
 8004524:	7bfb      	ldrb	r3, [r7, #15]
 8004526:	f043 0320 	orr.w	r3, r3, #32
 800452a:	73fb      	strb	r3, [r7, #15]
            break;
 800452c:	e000      	b.n	8004530 <nrf24l01p_set_rf_air_data_rate+0x40>
            break;
 800452e:	bf00      	nop
    }
    write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 8004530:	7bfb      	ldrb	r3, [r7, #15]
 8004532:	4619      	mov	r1, r3
 8004534:	2006      	movs	r0, #6
 8004536:	f7ff fbd3 	bl	8003ce0 <write_register>
}
 800453a:	bf00      	nop
 800453c:	3710      	adds	r7, #16
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
	...

08004544 <__errno>:
 8004544:	4b01      	ldr	r3, [pc, #4]	; (800454c <__errno+0x8>)
 8004546:	6818      	ldr	r0, [r3, #0]
 8004548:	4770      	bx	lr
 800454a:	bf00      	nop
 800454c:	2000002c 	.word	0x2000002c

08004550 <__libc_init_array>:
 8004550:	b570      	push	{r4, r5, r6, lr}
 8004552:	4d0d      	ldr	r5, [pc, #52]	; (8004588 <__libc_init_array+0x38>)
 8004554:	4c0d      	ldr	r4, [pc, #52]	; (800458c <__libc_init_array+0x3c>)
 8004556:	1b64      	subs	r4, r4, r5
 8004558:	10a4      	asrs	r4, r4, #2
 800455a:	2600      	movs	r6, #0
 800455c:	42a6      	cmp	r6, r4
 800455e:	d109      	bne.n	8004574 <__libc_init_array+0x24>
 8004560:	4d0b      	ldr	r5, [pc, #44]	; (8004590 <__libc_init_array+0x40>)
 8004562:	4c0c      	ldr	r4, [pc, #48]	; (8004594 <__libc_init_array+0x44>)
 8004564:	f001 f834 	bl	80055d0 <_init>
 8004568:	1b64      	subs	r4, r4, r5
 800456a:	10a4      	asrs	r4, r4, #2
 800456c:	2600      	movs	r6, #0
 800456e:	42a6      	cmp	r6, r4
 8004570:	d105      	bne.n	800457e <__libc_init_array+0x2e>
 8004572:	bd70      	pop	{r4, r5, r6, pc}
 8004574:	f855 3b04 	ldr.w	r3, [r5], #4
 8004578:	4798      	blx	r3
 800457a:	3601      	adds	r6, #1
 800457c:	e7ee      	b.n	800455c <__libc_init_array+0xc>
 800457e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004582:	4798      	blx	r3
 8004584:	3601      	adds	r6, #1
 8004586:	e7f2      	b.n	800456e <__libc_init_array+0x1e>
 8004588:	080057a8 	.word	0x080057a8
 800458c:	080057a8 	.word	0x080057a8
 8004590:	080057a8 	.word	0x080057a8
 8004594:	080057ac 	.word	0x080057ac

08004598 <malloc>:
 8004598:	4b02      	ldr	r3, [pc, #8]	; (80045a4 <malloc+0xc>)
 800459a:	4601      	mov	r1, r0
 800459c:	6818      	ldr	r0, [r3, #0]
 800459e:	f000 b87f 	b.w	80046a0 <_malloc_r>
 80045a2:	bf00      	nop
 80045a4:	2000002c 	.word	0x2000002c

080045a8 <free>:
 80045a8:	4b02      	ldr	r3, [pc, #8]	; (80045b4 <free+0xc>)
 80045aa:	4601      	mov	r1, r0
 80045ac:	6818      	ldr	r0, [r3, #0]
 80045ae:	f000 b80b 	b.w	80045c8 <_free_r>
 80045b2:	bf00      	nop
 80045b4:	2000002c 	.word	0x2000002c

080045b8 <memset>:
 80045b8:	4402      	add	r2, r0
 80045ba:	4603      	mov	r3, r0
 80045bc:	4293      	cmp	r3, r2
 80045be:	d100      	bne.n	80045c2 <memset+0xa>
 80045c0:	4770      	bx	lr
 80045c2:	f803 1b01 	strb.w	r1, [r3], #1
 80045c6:	e7f9      	b.n	80045bc <memset+0x4>

080045c8 <_free_r>:
 80045c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80045ca:	2900      	cmp	r1, #0
 80045cc:	d044      	beq.n	8004658 <_free_r+0x90>
 80045ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045d2:	9001      	str	r0, [sp, #4]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	f1a1 0404 	sub.w	r4, r1, #4
 80045da:	bfb8      	it	lt
 80045dc:	18e4      	addlt	r4, r4, r3
 80045de:	f000 fc51 	bl	8004e84 <__malloc_lock>
 80045e2:	4a1e      	ldr	r2, [pc, #120]	; (800465c <_free_r+0x94>)
 80045e4:	9801      	ldr	r0, [sp, #4]
 80045e6:	6813      	ldr	r3, [r2, #0]
 80045e8:	b933      	cbnz	r3, 80045f8 <_free_r+0x30>
 80045ea:	6063      	str	r3, [r4, #4]
 80045ec:	6014      	str	r4, [r2, #0]
 80045ee:	b003      	add	sp, #12
 80045f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80045f4:	f000 bc4c 	b.w	8004e90 <__malloc_unlock>
 80045f8:	42a3      	cmp	r3, r4
 80045fa:	d908      	bls.n	800460e <_free_r+0x46>
 80045fc:	6825      	ldr	r5, [r4, #0]
 80045fe:	1961      	adds	r1, r4, r5
 8004600:	428b      	cmp	r3, r1
 8004602:	bf01      	itttt	eq
 8004604:	6819      	ldreq	r1, [r3, #0]
 8004606:	685b      	ldreq	r3, [r3, #4]
 8004608:	1949      	addeq	r1, r1, r5
 800460a:	6021      	streq	r1, [r4, #0]
 800460c:	e7ed      	b.n	80045ea <_free_r+0x22>
 800460e:	461a      	mov	r2, r3
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	b10b      	cbz	r3, 8004618 <_free_r+0x50>
 8004614:	42a3      	cmp	r3, r4
 8004616:	d9fa      	bls.n	800460e <_free_r+0x46>
 8004618:	6811      	ldr	r1, [r2, #0]
 800461a:	1855      	adds	r5, r2, r1
 800461c:	42a5      	cmp	r5, r4
 800461e:	d10b      	bne.n	8004638 <_free_r+0x70>
 8004620:	6824      	ldr	r4, [r4, #0]
 8004622:	4421      	add	r1, r4
 8004624:	1854      	adds	r4, r2, r1
 8004626:	42a3      	cmp	r3, r4
 8004628:	6011      	str	r1, [r2, #0]
 800462a:	d1e0      	bne.n	80045ee <_free_r+0x26>
 800462c:	681c      	ldr	r4, [r3, #0]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	6053      	str	r3, [r2, #4]
 8004632:	4421      	add	r1, r4
 8004634:	6011      	str	r1, [r2, #0]
 8004636:	e7da      	b.n	80045ee <_free_r+0x26>
 8004638:	d902      	bls.n	8004640 <_free_r+0x78>
 800463a:	230c      	movs	r3, #12
 800463c:	6003      	str	r3, [r0, #0]
 800463e:	e7d6      	b.n	80045ee <_free_r+0x26>
 8004640:	6825      	ldr	r5, [r4, #0]
 8004642:	1961      	adds	r1, r4, r5
 8004644:	428b      	cmp	r3, r1
 8004646:	bf04      	itt	eq
 8004648:	6819      	ldreq	r1, [r3, #0]
 800464a:	685b      	ldreq	r3, [r3, #4]
 800464c:	6063      	str	r3, [r4, #4]
 800464e:	bf04      	itt	eq
 8004650:	1949      	addeq	r1, r1, r5
 8004652:	6021      	streq	r1, [r4, #0]
 8004654:	6054      	str	r4, [r2, #4]
 8004656:	e7ca      	b.n	80045ee <_free_r+0x26>
 8004658:	b003      	add	sp, #12
 800465a:	bd30      	pop	{r4, r5, pc}
 800465c:	20000178 	.word	0x20000178

08004660 <sbrk_aligned>:
 8004660:	b570      	push	{r4, r5, r6, lr}
 8004662:	4e0e      	ldr	r6, [pc, #56]	; (800469c <sbrk_aligned+0x3c>)
 8004664:	460c      	mov	r4, r1
 8004666:	6831      	ldr	r1, [r6, #0]
 8004668:	4605      	mov	r5, r0
 800466a:	b911      	cbnz	r1, 8004672 <sbrk_aligned+0x12>
 800466c:	f000 f91a 	bl	80048a4 <_sbrk_r>
 8004670:	6030      	str	r0, [r6, #0]
 8004672:	4621      	mov	r1, r4
 8004674:	4628      	mov	r0, r5
 8004676:	f000 f915 	bl	80048a4 <_sbrk_r>
 800467a:	1c43      	adds	r3, r0, #1
 800467c:	d00a      	beq.n	8004694 <sbrk_aligned+0x34>
 800467e:	1cc4      	adds	r4, r0, #3
 8004680:	f024 0403 	bic.w	r4, r4, #3
 8004684:	42a0      	cmp	r0, r4
 8004686:	d007      	beq.n	8004698 <sbrk_aligned+0x38>
 8004688:	1a21      	subs	r1, r4, r0
 800468a:	4628      	mov	r0, r5
 800468c:	f000 f90a 	bl	80048a4 <_sbrk_r>
 8004690:	3001      	adds	r0, #1
 8004692:	d101      	bne.n	8004698 <sbrk_aligned+0x38>
 8004694:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004698:	4620      	mov	r0, r4
 800469a:	bd70      	pop	{r4, r5, r6, pc}
 800469c:	2000017c 	.word	0x2000017c

080046a0 <_malloc_r>:
 80046a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046a4:	1ccd      	adds	r5, r1, #3
 80046a6:	f025 0503 	bic.w	r5, r5, #3
 80046aa:	3508      	adds	r5, #8
 80046ac:	2d0c      	cmp	r5, #12
 80046ae:	bf38      	it	cc
 80046b0:	250c      	movcc	r5, #12
 80046b2:	2d00      	cmp	r5, #0
 80046b4:	4607      	mov	r7, r0
 80046b6:	db01      	blt.n	80046bc <_malloc_r+0x1c>
 80046b8:	42a9      	cmp	r1, r5
 80046ba:	d905      	bls.n	80046c8 <_malloc_r+0x28>
 80046bc:	230c      	movs	r3, #12
 80046be:	603b      	str	r3, [r7, #0]
 80046c0:	2600      	movs	r6, #0
 80046c2:	4630      	mov	r0, r6
 80046c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046c8:	4e2e      	ldr	r6, [pc, #184]	; (8004784 <_malloc_r+0xe4>)
 80046ca:	f000 fbdb 	bl	8004e84 <__malloc_lock>
 80046ce:	6833      	ldr	r3, [r6, #0]
 80046d0:	461c      	mov	r4, r3
 80046d2:	bb34      	cbnz	r4, 8004722 <_malloc_r+0x82>
 80046d4:	4629      	mov	r1, r5
 80046d6:	4638      	mov	r0, r7
 80046d8:	f7ff ffc2 	bl	8004660 <sbrk_aligned>
 80046dc:	1c43      	adds	r3, r0, #1
 80046de:	4604      	mov	r4, r0
 80046e0:	d14d      	bne.n	800477e <_malloc_r+0xde>
 80046e2:	6834      	ldr	r4, [r6, #0]
 80046e4:	4626      	mov	r6, r4
 80046e6:	2e00      	cmp	r6, #0
 80046e8:	d140      	bne.n	800476c <_malloc_r+0xcc>
 80046ea:	6823      	ldr	r3, [r4, #0]
 80046ec:	4631      	mov	r1, r6
 80046ee:	4638      	mov	r0, r7
 80046f0:	eb04 0803 	add.w	r8, r4, r3
 80046f4:	f000 f8d6 	bl	80048a4 <_sbrk_r>
 80046f8:	4580      	cmp	r8, r0
 80046fa:	d13a      	bne.n	8004772 <_malloc_r+0xd2>
 80046fc:	6821      	ldr	r1, [r4, #0]
 80046fe:	3503      	adds	r5, #3
 8004700:	1a6d      	subs	r5, r5, r1
 8004702:	f025 0503 	bic.w	r5, r5, #3
 8004706:	3508      	adds	r5, #8
 8004708:	2d0c      	cmp	r5, #12
 800470a:	bf38      	it	cc
 800470c:	250c      	movcc	r5, #12
 800470e:	4629      	mov	r1, r5
 8004710:	4638      	mov	r0, r7
 8004712:	f7ff ffa5 	bl	8004660 <sbrk_aligned>
 8004716:	3001      	adds	r0, #1
 8004718:	d02b      	beq.n	8004772 <_malloc_r+0xd2>
 800471a:	6823      	ldr	r3, [r4, #0]
 800471c:	442b      	add	r3, r5
 800471e:	6023      	str	r3, [r4, #0]
 8004720:	e00e      	b.n	8004740 <_malloc_r+0xa0>
 8004722:	6822      	ldr	r2, [r4, #0]
 8004724:	1b52      	subs	r2, r2, r5
 8004726:	d41e      	bmi.n	8004766 <_malloc_r+0xc6>
 8004728:	2a0b      	cmp	r2, #11
 800472a:	d916      	bls.n	800475a <_malloc_r+0xba>
 800472c:	1961      	adds	r1, r4, r5
 800472e:	42a3      	cmp	r3, r4
 8004730:	6025      	str	r5, [r4, #0]
 8004732:	bf18      	it	ne
 8004734:	6059      	strne	r1, [r3, #4]
 8004736:	6863      	ldr	r3, [r4, #4]
 8004738:	bf08      	it	eq
 800473a:	6031      	streq	r1, [r6, #0]
 800473c:	5162      	str	r2, [r4, r5]
 800473e:	604b      	str	r3, [r1, #4]
 8004740:	4638      	mov	r0, r7
 8004742:	f104 060b 	add.w	r6, r4, #11
 8004746:	f000 fba3 	bl	8004e90 <__malloc_unlock>
 800474a:	f026 0607 	bic.w	r6, r6, #7
 800474e:	1d23      	adds	r3, r4, #4
 8004750:	1af2      	subs	r2, r6, r3
 8004752:	d0b6      	beq.n	80046c2 <_malloc_r+0x22>
 8004754:	1b9b      	subs	r3, r3, r6
 8004756:	50a3      	str	r3, [r4, r2]
 8004758:	e7b3      	b.n	80046c2 <_malloc_r+0x22>
 800475a:	6862      	ldr	r2, [r4, #4]
 800475c:	42a3      	cmp	r3, r4
 800475e:	bf0c      	ite	eq
 8004760:	6032      	streq	r2, [r6, #0]
 8004762:	605a      	strne	r2, [r3, #4]
 8004764:	e7ec      	b.n	8004740 <_malloc_r+0xa0>
 8004766:	4623      	mov	r3, r4
 8004768:	6864      	ldr	r4, [r4, #4]
 800476a:	e7b2      	b.n	80046d2 <_malloc_r+0x32>
 800476c:	4634      	mov	r4, r6
 800476e:	6876      	ldr	r6, [r6, #4]
 8004770:	e7b9      	b.n	80046e6 <_malloc_r+0x46>
 8004772:	230c      	movs	r3, #12
 8004774:	603b      	str	r3, [r7, #0]
 8004776:	4638      	mov	r0, r7
 8004778:	f000 fb8a 	bl	8004e90 <__malloc_unlock>
 800477c:	e7a1      	b.n	80046c2 <_malloc_r+0x22>
 800477e:	6025      	str	r5, [r4, #0]
 8004780:	e7de      	b.n	8004740 <_malloc_r+0xa0>
 8004782:	bf00      	nop
 8004784:	20000178 	.word	0x20000178

08004788 <iprintf>:
 8004788:	b40f      	push	{r0, r1, r2, r3}
 800478a:	4b0a      	ldr	r3, [pc, #40]	; (80047b4 <iprintf+0x2c>)
 800478c:	b513      	push	{r0, r1, r4, lr}
 800478e:	681c      	ldr	r4, [r3, #0]
 8004790:	b124      	cbz	r4, 800479c <iprintf+0x14>
 8004792:	69a3      	ldr	r3, [r4, #24]
 8004794:	b913      	cbnz	r3, 800479c <iprintf+0x14>
 8004796:	4620      	mov	r0, r4
 8004798:	f000 fa6e 	bl	8004c78 <__sinit>
 800479c:	ab05      	add	r3, sp, #20
 800479e:	9a04      	ldr	r2, [sp, #16]
 80047a0:	68a1      	ldr	r1, [r4, #8]
 80047a2:	9301      	str	r3, [sp, #4]
 80047a4:	4620      	mov	r0, r4
 80047a6:	f000 fba3 	bl	8004ef0 <_vfiprintf_r>
 80047aa:	b002      	add	sp, #8
 80047ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047b0:	b004      	add	sp, #16
 80047b2:	4770      	bx	lr
 80047b4:	2000002c 	.word	0x2000002c

080047b8 <_puts_r>:
 80047b8:	b570      	push	{r4, r5, r6, lr}
 80047ba:	460e      	mov	r6, r1
 80047bc:	4605      	mov	r5, r0
 80047be:	b118      	cbz	r0, 80047c8 <_puts_r+0x10>
 80047c0:	6983      	ldr	r3, [r0, #24]
 80047c2:	b90b      	cbnz	r3, 80047c8 <_puts_r+0x10>
 80047c4:	f000 fa58 	bl	8004c78 <__sinit>
 80047c8:	69ab      	ldr	r3, [r5, #24]
 80047ca:	68ac      	ldr	r4, [r5, #8]
 80047cc:	b913      	cbnz	r3, 80047d4 <_puts_r+0x1c>
 80047ce:	4628      	mov	r0, r5
 80047d0:	f000 fa52 	bl	8004c78 <__sinit>
 80047d4:	4b2c      	ldr	r3, [pc, #176]	; (8004888 <_puts_r+0xd0>)
 80047d6:	429c      	cmp	r4, r3
 80047d8:	d120      	bne.n	800481c <_puts_r+0x64>
 80047da:	686c      	ldr	r4, [r5, #4]
 80047dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80047de:	07db      	lsls	r3, r3, #31
 80047e0:	d405      	bmi.n	80047ee <_puts_r+0x36>
 80047e2:	89a3      	ldrh	r3, [r4, #12]
 80047e4:	0598      	lsls	r0, r3, #22
 80047e6:	d402      	bmi.n	80047ee <_puts_r+0x36>
 80047e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80047ea:	f000 fae3 	bl	8004db4 <__retarget_lock_acquire_recursive>
 80047ee:	89a3      	ldrh	r3, [r4, #12]
 80047f0:	0719      	lsls	r1, r3, #28
 80047f2:	d51d      	bpl.n	8004830 <_puts_r+0x78>
 80047f4:	6923      	ldr	r3, [r4, #16]
 80047f6:	b1db      	cbz	r3, 8004830 <_puts_r+0x78>
 80047f8:	3e01      	subs	r6, #1
 80047fa:	68a3      	ldr	r3, [r4, #8]
 80047fc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004800:	3b01      	subs	r3, #1
 8004802:	60a3      	str	r3, [r4, #8]
 8004804:	bb39      	cbnz	r1, 8004856 <_puts_r+0x9e>
 8004806:	2b00      	cmp	r3, #0
 8004808:	da38      	bge.n	800487c <_puts_r+0xc4>
 800480a:	4622      	mov	r2, r4
 800480c:	210a      	movs	r1, #10
 800480e:	4628      	mov	r0, r5
 8004810:	f000 f858 	bl	80048c4 <__swbuf_r>
 8004814:	3001      	adds	r0, #1
 8004816:	d011      	beq.n	800483c <_puts_r+0x84>
 8004818:	250a      	movs	r5, #10
 800481a:	e011      	b.n	8004840 <_puts_r+0x88>
 800481c:	4b1b      	ldr	r3, [pc, #108]	; (800488c <_puts_r+0xd4>)
 800481e:	429c      	cmp	r4, r3
 8004820:	d101      	bne.n	8004826 <_puts_r+0x6e>
 8004822:	68ac      	ldr	r4, [r5, #8]
 8004824:	e7da      	b.n	80047dc <_puts_r+0x24>
 8004826:	4b1a      	ldr	r3, [pc, #104]	; (8004890 <_puts_r+0xd8>)
 8004828:	429c      	cmp	r4, r3
 800482a:	bf08      	it	eq
 800482c:	68ec      	ldreq	r4, [r5, #12]
 800482e:	e7d5      	b.n	80047dc <_puts_r+0x24>
 8004830:	4621      	mov	r1, r4
 8004832:	4628      	mov	r0, r5
 8004834:	f000 f898 	bl	8004968 <__swsetup_r>
 8004838:	2800      	cmp	r0, #0
 800483a:	d0dd      	beq.n	80047f8 <_puts_r+0x40>
 800483c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004840:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004842:	07da      	lsls	r2, r3, #31
 8004844:	d405      	bmi.n	8004852 <_puts_r+0x9a>
 8004846:	89a3      	ldrh	r3, [r4, #12]
 8004848:	059b      	lsls	r3, r3, #22
 800484a:	d402      	bmi.n	8004852 <_puts_r+0x9a>
 800484c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800484e:	f000 fab2 	bl	8004db6 <__retarget_lock_release_recursive>
 8004852:	4628      	mov	r0, r5
 8004854:	bd70      	pop	{r4, r5, r6, pc}
 8004856:	2b00      	cmp	r3, #0
 8004858:	da04      	bge.n	8004864 <_puts_r+0xac>
 800485a:	69a2      	ldr	r2, [r4, #24]
 800485c:	429a      	cmp	r2, r3
 800485e:	dc06      	bgt.n	800486e <_puts_r+0xb6>
 8004860:	290a      	cmp	r1, #10
 8004862:	d004      	beq.n	800486e <_puts_r+0xb6>
 8004864:	6823      	ldr	r3, [r4, #0]
 8004866:	1c5a      	adds	r2, r3, #1
 8004868:	6022      	str	r2, [r4, #0]
 800486a:	7019      	strb	r1, [r3, #0]
 800486c:	e7c5      	b.n	80047fa <_puts_r+0x42>
 800486e:	4622      	mov	r2, r4
 8004870:	4628      	mov	r0, r5
 8004872:	f000 f827 	bl	80048c4 <__swbuf_r>
 8004876:	3001      	adds	r0, #1
 8004878:	d1bf      	bne.n	80047fa <_puts_r+0x42>
 800487a:	e7df      	b.n	800483c <_puts_r+0x84>
 800487c:	6823      	ldr	r3, [r4, #0]
 800487e:	250a      	movs	r5, #10
 8004880:	1c5a      	adds	r2, r3, #1
 8004882:	6022      	str	r2, [r4, #0]
 8004884:	701d      	strb	r5, [r3, #0]
 8004886:	e7db      	b.n	8004840 <_puts_r+0x88>
 8004888:	0800572c 	.word	0x0800572c
 800488c:	0800574c 	.word	0x0800574c
 8004890:	0800570c 	.word	0x0800570c

08004894 <puts>:
 8004894:	4b02      	ldr	r3, [pc, #8]	; (80048a0 <puts+0xc>)
 8004896:	4601      	mov	r1, r0
 8004898:	6818      	ldr	r0, [r3, #0]
 800489a:	f7ff bf8d 	b.w	80047b8 <_puts_r>
 800489e:	bf00      	nop
 80048a0:	2000002c 	.word	0x2000002c

080048a4 <_sbrk_r>:
 80048a4:	b538      	push	{r3, r4, r5, lr}
 80048a6:	4d06      	ldr	r5, [pc, #24]	; (80048c0 <_sbrk_r+0x1c>)
 80048a8:	2300      	movs	r3, #0
 80048aa:	4604      	mov	r4, r0
 80048ac:	4608      	mov	r0, r1
 80048ae:	602b      	str	r3, [r5, #0]
 80048b0:	f7fc fdd6 	bl	8001460 <_sbrk>
 80048b4:	1c43      	adds	r3, r0, #1
 80048b6:	d102      	bne.n	80048be <_sbrk_r+0x1a>
 80048b8:	682b      	ldr	r3, [r5, #0]
 80048ba:	b103      	cbz	r3, 80048be <_sbrk_r+0x1a>
 80048bc:	6023      	str	r3, [r4, #0]
 80048be:	bd38      	pop	{r3, r4, r5, pc}
 80048c0:	20000184 	.word	0x20000184

080048c4 <__swbuf_r>:
 80048c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048c6:	460e      	mov	r6, r1
 80048c8:	4614      	mov	r4, r2
 80048ca:	4605      	mov	r5, r0
 80048cc:	b118      	cbz	r0, 80048d6 <__swbuf_r+0x12>
 80048ce:	6983      	ldr	r3, [r0, #24]
 80048d0:	b90b      	cbnz	r3, 80048d6 <__swbuf_r+0x12>
 80048d2:	f000 f9d1 	bl	8004c78 <__sinit>
 80048d6:	4b21      	ldr	r3, [pc, #132]	; (800495c <__swbuf_r+0x98>)
 80048d8:	429c      	cmp	r4, r3
 80048da:	d12b      	bne.n	8004934 <__swbuf_r+0x70>
 80048dc:	686c      	ldr	r4, [r5, #4]
 80048de:	69a3      	ldr	r3, [r4, #24]
 80048e0:	60a3      	str	r3, [r4, #8]
 80048e2:	89a3      	ldrh	r3, [r4, #12]
 80048e4:	071a      	lsls	r2, r3, #28
 80048e6:	d52f      	bpl.n	8004948 <__swbuf_r+0x84>
 80048e8:	6923      	ldr	r3, [r4, #16]
 80048ea:	b36b      	cbz	r3, 8004948 <__swbuf_r+0x84>
 80048ec:	6923      	ldr	r3, [r4, #16]
 80048ee:	6820      	ldr	r0, [r4, #0]
 80048f0:	1ac0      	subs	r0, r0, r3
 80048f2:	6963      	ldr	r3, [r4, #20]
 80048f4:	b2f6      	uxtb	r6, r6
 80048f6:	4283      	cmp	r3, r0
 80048f8:	4637      	mov	r7, r6
 80048fa:	dc04      	bgt.n	8004906 <__swbuf_r+0x42>
 80048fc:	4621      	mov	r1, r4
 80048fe:	4628      	mov	r0, r5
 8004900:	f000 f926 	bl	8004b50 <_fflush_r>
 8004904:	bb30      	cbnz	r0, 8004954 <__swbuf_r+0x90>
 8004906:	68a3      	ldr	r3, [r4, #8]
 8004908:	3b01      	subs	r3, #1
 800490a:	60a3      	str	r3, [r4, #8]
 800490c:	6823      	ldr	r3, [r4, #0]
 800490e:	1c5a      	adds	r2, r3, #1
 8004910:	6022      	str	r2, [r4, #0]
 8004912:	701e      	strb	r6, [r3, #0]
 8004914:	6963      	ldr	r3, [r4, #20]
 8004916:	3001      	adds	r0, #1
 8004918:	4283      	cmp	r3, r0
 800491a:	d004      	beq.n	8004926 <__swbuf_r+0x62>
 800491c:	89a3      	ldrh	r3, [r4, #12]
 800491e:	07db      	lsls	r3, r3, #31
 8004920:	d506      	bpl.n	8004930 <__swbuf_r+0x6c>
 8004922:	2e0a      	cmp	r6, #10
 8004924:	d104      	bne.n	8004930 <__swbuf_r+0x6c>
 8004926:	4621      	mov	r1, r4
 8004928:	4628      	mov	r0, r5
 800492a:	f000 f911 	bl	8004b50 <_fflush_r>
 800492e:	b988      	cbnz	r0, 8004954 <__swbuf_r+0x90>
 8004930:	4638      	mov	r0, r7
 8004932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004934:	4b0a      	ldr	r3, [pc, #40]	; (8004960 <__swbuf_r+0x9c>)
 8004936:	429c      	cmp	r4, r3
 8004938:	d101      	bne.n	800493e <__swbuf_r+0x7a>
 800493a:	68ac      	ldr	r4, [r5, #8]
 800493c:	e7cf      	b.n	80048de <__swbuf_r+0x1a>
 800493e:	4b09      	ldr	r3, [pc, #36]	; (8004964 <__swbuf_r+0xa0>)
 8004940:	429c      	cmp	r4, r3
 8004942:	bf08      	it	eq
 8004944:	68ec      	ldreq	r4, [r5, #12]
 8004946:	e7ca      	b.n	80048de <__swbuf_r+0x1a>
 8004948:	4621      	mov	r1, r4
 800494a:	4628      	mov	r0, r5
 800494c:	f000 f80c 	bl	8004968 <__swsetup_r>
 8004950:	2800      	cmp	r0, #0
 8004952:	d0cb      	beq.n	80048ec <__swbuf_r+0x28>
 8004954:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004958:	e7ea      	b.n	8004930 <__swbuf_r+0x6c>
 800495a:	bf00      	nop
 800495c:	0800572c 	.word	0x0800572c
 8004960:	0800574c 	.word	0x0800574c
 8004964:	0800570c 	.word	0x0800570c

08004968 <__swsetup_r>:
 8004968:	4b32      	ldr	r3, [pc, #200]	; (8004a34 <__swsetup_r+0xcc>)
 800496a:	b570      	push	{r4, r5, r6, lr}
 800496c:	681d      	ldr	r5, [r3, #0]
 800496e:	4606      	mov	r6, r0
 8004970:	460c      	mov	r4, r1
 8004972:	b125      	cbz	r5, 800497e <__swsetup_r+0x16>
 8004974:	69ab      	ldr	r3, [r5, #24]
 8004976:	b913      	cbnz	r3, 800497e <__swsetup_r+0x16>
 8004978:	4628      	mov	r0, r5
 800497a:	f000 f97d 	bl	8004c78 <__sinit>
 800497e:	4b2e      	ldr	r3, [pc, #184]	; (8004a38 <__swsetup_r+0xd0>)
 8004980:	429c      	cmp	r4, r3
 8004982:	d10f      	bne.n	80049a4 <__swsetup_r+0x3c>
 8004984:	686c      	ldr	r4, [r5, #4]
 8004986:	89a3      	ldrh	r3, [r4, #12]
 8004988:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800498c:	0719      	lsls	r1, r3, #28
 800498e:	d42c      	bmi.n	80049ea <__swsetup_r+0x82>
 8004990:	06dd      	lsls	r5, r3, #27
 8004992:	d411      	bmi.n	80049b8 <__swsetup_r+0x50>
 8004994:	2309      	movs	r3, #9
 8004996:	6033      	str	r3, [r6, #0]
 8004998:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800499c:	81a3      	strh	r3, [r4, #12]
 800499e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80049a2:	e03e      	b.n	8004a22 <__swsetup_r+0xba>
 80049a4:	4b25      	ldr	r3, [pc, #148]	; (8004a3c <__swsetup_r+0xd4>)
 80049a6:	429c      	cmp	r4, r3
 80049a8:	d101      	bne.n	80049ae <__swsetup_r+0x46>
 80049aa:	68ac      	ldr	r4, [r5, #8]
 80049ac:	e7eb      	b.n	8004986 <__swsetup_r+0x1e>
 80049ae:	4b24      	ldr	r3, [pc, #144]	; (8004a40 <__swsetup_r+0xd8>)
 80049b0:	429c      	cmp	r4, r3
 80049b2:	bf08      	it	eq
 80049b4:	68ec      	ldreq	r4, [r5, #12]
 80049b6:	e7e6      	b.n	8004986 <__swsetup_r+0x1e>
 80049b8:	0758      	lsls	r0, r3, #29
 80049ba:	d512      	bpl.n	80049e2 <__swsetup_r+0x7a>
 80049bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80049be:	b141      	cbz	r1, 80049d2 <__swsetup_r+0x6a>
 80049c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80049c4:	4299      	cmp	r1, r3
 80049c6:	d002      	beq.n	80049ce <__swsetup_r+0x66>
 80049c8:	4630      	mov	r0, r6
 80049ca:	f7ff fdfd 	bl	80045c8 <_free_r>
 80049ce:	2300      	movs	r3, #0
 80049d0:	6363      	str	r3, [r4, #52]	; 0x34
 80049d2:	89a3      	ldrh	r3, [r4, #12]
 80049d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80049d8:	81a3      	strh	r3, [r4, #12]
 80049da:	2300      	movs	r3, #0
 80049dc:	6063      	str	r3, [r4, #4]
 80049de:	6923      	ldr	r3, [r4, #16]
 80049e0:	6023      	str	r3, [r4, #0]
 80049e2:	89a3      	ldrh	r3, [r4, #12]
 80049e4:	f043 0308 	orr.w	r3, r3, #8
 80049e8:	81a3      	strh	r3, [r4, #12]
 80049ea:	6923      	ldr	r3, [r4, #16]
 80049ec:	b94b      	cbnz	r3, 8004a02 <__swsetup_r+0x9a>
 80049ee:	89a3      	ldrh	r3, [r4, #12]
 80049f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80049f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049f8:	d003      	beq.n	8004a02 <__swsetup_r+0x9a>
 80049fa:	4621      	mov	r1, r4
 80049fc:	4630      	mov	r0, r6
 80049fe:	f000 fa01 	bl	8004e04 <__smakebuf_r>
 8004a02:	89a0      	ldrh	r0, [r4, #12]
 8004a04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004a08:	f010 0301 	ands.w	r3, r0, #1
 8004a0c:	d00a      	beq.n	8004a24 <__swsetup_r+0xbc>
 8004a0e:	2300      	movs	r3, #0
 8004a10:	60a3      	str	r3, [r4, #8]
 8004a12:	6963      	ldr	r3, [r4, #20]
 8004a14:	425b      	negs	r3, r3
 8004a16:	61a3      	str	r3, [r4, #24]
 8004a18:	6923      	ldr	r3, [r4, #16]
 8004a1a:	b943      	cbnz	r3, 8004a2e <__swsetup_r+0xc6>
 8004a1c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004a20:	d1ba      	bne.n	8004998 <__swsetup_r+0x30>
 8004a22:	bd70      	pop	{r4, r5, r6, pc}
 8004a24:	0781      	lsls	r1, r0, #30
 8004a26:	bf58      	it	pl
 8004a28:	6963      	ldrpl	r3, [r4, #20]
 8004a2a:	60a3      	str	r3, [r4, #8]
 8004a2c:	e7f4      	b.n	8004a18 <__swsetup_r+0xb0>
 8004a2e:	2000      	movs	r0, #0
 8004a30:	e7f7      	b.n	8004a22 <__swsetup_r+0xba>
 8004a32:	bf00      	nop
 8004a34:	2000002c 	.word	0x2000002c
 8004a38:	0800572c 	.word	0x0800572c
 8004a3c:	0800574c 	.word	0x0800574c
 8004a40:	0800570c 	.word	0x0800570c

08004a44 <__sflush_r>:
 8004a44:	898a      	ldrh	r2, [r1, #12]
 8004a46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a4a:	4605      	mov	r5, r0
 8004a4c:	0710      	lsls	r0, r2, #28
 8004a4e:	460c      	mov	r4, r1
 8004a50:	d458      	bmi.n	8004b04 <__sflush_r+0xc0>
 8004a52:	684b      	ldr	r3, [r1, #4]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	dc05      	bgt.n	8004a64 <__sflush_r+0x20>
 8004a58:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	dc02      	bgt.n	8004a64 <__sflush_r+0x20>
 8004a5e:	2000      	movs	r0, #0
 8004a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a66:	2e00      	cmp	r6, #0
 8004a68:	d0f9      	beq.n	8004a5e <__sflush_r+0x1a>
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004a70:	682f      	ldr	r7, [r5, #0]
 8004a72:	602b      	str	r3, [r5, #0]
 8004a74:	d032      	beq.n	8004adc <__sflush_r+0x98>
 8004a76:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004a78:	89a3      	ldrh	r3, [r4, #12]
 8004a7a:	075a      	lsls	r2, r3, #29
 8004a7c:	d505      	bpl.n	8004a8a <__sflush_r+0x46>
 8004a7e:	6863      	ldr	r3, [r4, #4]
 8004a80:	1ac0      	subs	r0, r0, r3
 8004a82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004a84:	b10b      	cbz	r3, 8004a8a <__sflush_r+0x46>
 8004a86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a88:	1ac0      	subs	r0, r0, r3
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a90:	6a21      	ldr	r1, [r4, #32]
 8004a92:	4628      	mov	r0, r5
 8004a94:	47b0      	blx	r6
 8004a96:	1c43      	adds	r3, r0, #1
 8004a98:	89a3      	ldrh	r3, [r4, #12]
 8004a9a:	d106      	bne.n	8004aaa <__sflush_r+0x66>
 8004a9c:	6829      	ldr	r1, [r5, #0]
 8004a9e:	291d      	cmp	r1, #29
 8004aa0:	d82c      	bhi.n	8004afc <__sflush_r+0xb8>
 8004aa2:	4a2a      	ldr	r2, [pc, #168]	; (8004b4c <__sflush_r+0x108>)
 8004aa4:	40ca      	lsrs	r2, r1
 8004aa6:	07d6      	lsls	r6, r2, #31
 8004aa8:	d528      	bpl.n	8004afc <__sflush_r+0xb8>
 8004aaa:	2200      	movs	r2, #0
 8004aac:	6062      	str	r2, [r4, #4]
 8004aae:	04d9      	lsls	r1, r3, #19
 8004ab0:	6922      	ldr	r2, [r4, #16]
 8004ab2:	6022      	str	r2, [r4, #0]
 8004ab4:	d504      	bpl.n	8004ac0 <__sflush_r+0x7c>
 8004ab6:	1c42      	adds	r2, r0, #1
 8004ab8:	d101      	bne.n	8004abe <__sflush_r+0x7a>
 8004aba:	682b      	ldr	r3, [r5, #0]
 8004abc:	b903      	cbnz	r3, 8004ac0 <__sflush_r+0x7c>
 8004abe:	6560      	str	r0, [r4, #84]	; 0x54
 8004ac0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ac2:	602f      	str	r7, [r5, #0]
 8004ac4:	2900      	cmp	r1, #0
 8004ac6:	d0ca      	beq.n	8004a5e <__sflush_r+0x1a>
 8004ac8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004acc:	4299      	cmp	r1, r3
 8004ace:	d002      	beq.n	8004ad6 <__sflush_r+0x92>
 8004ad0:	4628      	mov	r0, r5
 8004ad2:	f7ff fd79 	bl	80045c8 <_free_r>
 8004ad6:	2000      	movs	r0, #0
 8004ad8:	6360      	str	r0, [r4, #52]	; 0x34
 8004ada:	e7c1      	b.n	8004a60 <__sflush_r+0x1c>
 8004adc:	6a21      	ldr	r1, [r4, #32]
 8004ade:	2301      	movs	r3, #1
 8004ae0:	4628      	mov	r0, r5
 8004ae2:	47b0      	blx	r6
 8004ae4:	1c41      	adds	r1, r0, #1
 8004ae6:	d1c7      	bne.n	8004a78 <__sflush_r+0x34>
 8004ae8:	682b      	ldr	r3, [r5, #0]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d0c4      	beq.n	8004a78 <__sflush_r+0x34>
 8004aee:	2b1d      	cmp	r3, #29
 8004af0:	d001      	beq.n	8004af6 <__sflush_r+0xb2>
 8004af2:	2b16      	cmp	r3, #22
 8004af4:	d101      	bne.n	8004afa <__sflush_r+0xb6>
 8004af6:	602f      	str	r7, [r5, #0]
 8004af8:	e7b1      	b.n	8004a5e <__sflush_r+0x1a>
 8004afa:	89a3      	ldrh	r3, [r4, #12]
 8004afc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b00:	81a3      	strh	r3, [r4, #12]
 8004b02:	e7ad      	b.n	8004a60 <__sflush_r+0x1c>
 8004b04:	690f      	ldr	r7, [r1, #16]
 8004b06:	2f00      	cmp	r7, #0
 8004b08:	d0a9      	beq.n	8004a5e <__sflush_r+0x1a>
 8004b0a:	0793      	lsls	r3, r2, #30
 8004b0c:	680e      	ldr	r6, [r1, #0]
 8004b0e:	bf08      	it	eq
 8004b10:	694b      	ldreq	r3, [r1, #20]
 8004b12:	600f      	str	r7, [r1, #0]
 8004b14:	bf18      	it	ne
 8004b16:	2300      	movne	r3, #0
 8004b18:	eba6 0807 	sub.w	r8, r6, r7
 8004b1c:	608b      	str	r3, [r1, #8]
 8004b1e:	f1b8 0f00 	cmp.w	r8, #0
 8004b22:	dd9c      	ble.n	8004a5e <__sflush_r+0x1a>
 8004b24:	6a21      	ldr	r1, [r4, #32]
 8004b26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004b28:	4643      	mov	r3, r8
 8004b2a:	463a      	mov	r2, r7
 8004b2c:	4628      	mov	r0, r5
 8004b2e:	47b0      	blx	r6
 8004b30:	2800      	cmp	r0, #0
 8004b32:	dc06      	bgt.n	8004b42 <__sflush_r+0xfe>
 8004b34:	89a3      	ldrh	r3, [r4, #12]
 8004b36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b3a:	81a3      	strh	r3, [r4, #12]
 8004b3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b40:	e78e      	b.n	8004a60 <__sflush_r+0x1c>
 8004b42:	4407      	add	r7, r0
 8004b44:	eba8 0800 	sub.w	r8, r8, r0
 8004b48:	e7e9      	b.n	8004b1e <__sflush_r+0xda>
 8004b4a:	bf00      	nop
 8004b4c:	20400001 	.word	0x20400001

08004b50 <_fflush_r>:
 8004b50:	b538      	push	{r3, r4, r5, lr}
 8004b52:	690b      	ldr	r3, [r1, #16]
 8004b54:	4605      	mov	r5, r0
 8004b56:	460c      	mov	r4, r1
 8004b58:	b913      	cbnz	r3, 8004b60 <_fflush_r+0x10>
 8004b5a:	2500      	movs	r5, #0
 8004b5c:	4628      	mov	r0, r5
 8004b5e:	bd38      	pop	{r3, r4, r5, pc}
 8004b60:	b118      	cbz	r0, 8004b6a <_fflush_r+0x1a>
 8004b62:	6983      	ldr	r3, [r0, #24]
 8004b64:	b90b      	cbnz	r3, 8004b6a <_fflush_r+0x1a>
 8004b66:	f000 f887 	bl	8004c78 <__sinit>
 8004b6a:	4b14      	ldr	r3, [pc, #80]	; (8004bbc <_fflush_r+0x6c>)
 8004b6c:	429c      	cmp	r4, r3
 8004b6e:	d11b      	bne.n	8004ba8 <_fflush_r+0x58>
 8004b70:	686c      	ldr	r4, [r5, #4]
 8004b72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d0ef      	beq.n	8004b5a <_fflush_r+0xa>
 8004b7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004b7c:	07d0      	lsls	r0, r2, #31
 8004b7e:	d404      	bmi.n	8004b8a <_fflush_r+0x3a>
 8004b80:	0599      	lsls	r1, r3, #22
 8004b82:	d402      	bmi.n	8004b8a <_fflush_r+0x3a>
 8004b84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b86:	f000 f915 	bl	8004db4 <__retarget_lock_acquire_recursive>
 8004b8a:	4628      	mov	r0, r5
 8004b8c:	4621      	mov	r1, r4
 8004b8e:	f7ff ff59 	bl	8004a44 <__sflush_r>
 8004b92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b94:	07da      	lsls	r2, r3, #31
 8004b96:	4605      	mov	r5, r0
 8004b98:	d4e0      	bmi.n	8004b5c <_fflush_r+0xc>
 8004b9a:	89a3      	ldrh	r3, [r4, #12]
 8004b9c:	059b      	lsls	r3, r3, #22
 8004b9e:	d4dd      	bmi.n	8004b5c <_fflush_r+0xc>
 8004ba0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ba2:	f000 f908 	bl	8004db6 <__retarget_lock_release_recursive>
 8004ba6:	e7d9      	b.n	8004b5c <_fflush_r+0xc>
 8004ba8:	4b05      	ldr	r3, [pc, #20]	; (8004bc0 <_fflush_r+0x70>)
 8004baa:	429c      	cmp	r4, r3
 8004bac:	d101      	bne.n	8004bb2 <_fflush_r+0x62>
 8004bae:	68ac      	ldr	r4, [r5, #8]
 8004bb0:	e7df      	b.n	8004b72 <_fflush_r+0x22>
 8004bb2:	4b04      	ldr	r3, [pc, #16]	; (8004bc4 <_fflush_r+0x74>)
 8004bb4:	429c      	cmp	r4, r3
 8004bb6:	bf08      	it	eq
 8004bb8:	68ec      	ldreq	r4, [r5, #12]
 8004bba:	e7da      	b.n	8004b72 <_fflush_r+0x22>
 8004bbc:	0800572c 	.word	0x0800572c
 8004bc0:	0800574c 	.word	0x0800574c
 8004bc4:	0800570c 	.word	0x0800570c

08004bc8 <std>:
 8004bc8:	2300      	movs	r3, #0
 8004bca:	b510      	push	{r4, lr}
 8004bcc:	4604      	mov	r4, r0
 8004bce:	e9c0 3300 	strd	r3, r3, [r0]
 8004bd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004bd6:	6083      	str	r3, [r0, #8]
 8004bd8:	8181      	strh	r1, [r0, #12]
 8004bda:	6643      	str	r3, [r0, #100]	; 0x64
 8004bdc:	81c2      	strh	r2, [r0, #14]
 8004bde:	6183      	str	r3, [r0, #24]
 8004be0:	4619      	mov	r1, r3
 8004be2:	2208      	movs	r2, #8
 8004be4:	305c      	adds	r0, #92	; 0x5c
 8004be6:	f7ff fce7 	bl	80045b8 <memset>
 8004bea:	4b05      	ldr	r3, [pc, #20]	; (8004c00 <std+0x38>)
 8004bec:	6263      	str	r3, [r4, #36]	; 0x24
 8004bee:	4b05      	ldr	r3, [pc, #20]	; (8004c04 <std+0x3c>)
 8004bf0:	62a3      	str	r3, [r4, #40]	; 0x28
 8004bf2:	4b05      	ldr	r3, [pc, #20]	; (8004c08 <std+0x40>)
 8004bf4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004bf6:	4b05      	ldr	r3, [pc, #20]	; (8004c0c <std+0x44>)
 8004bf8:	6224      	str	r4, [r4, #32]
 8004bfa:	6323      	str	r3, [r4, #48]	; 0x30
 8004bfc:	bd10      	pop	{r4, pc}
 8004bfe:	bf00      	nop
 8004c00:	08005479 	.word	0x08005479
 8004c04:	0800549b 	.word	0x0800549b
 8004c08:	080054d3 	.word	0x080054d3
 8004c0c:	080054f7 	.word	0x080054f7

08004c10 <_cleanup_r>:
 8004c10:	4901      	ldr	r1, [pc, #4]	; (8004c18 <_cleanup_r+0x8>)
 8004c12:	f000 b8af 	b.w	8004d74 <_fwalk_reent>
 8004c16:	bf00      	nop
 8004c18:	08004b51 	.word	0x08004b51

08004c1c <__sfmoreglue>:
 8004c1c:	b570      	push	{r4, r5, r6, lr}
 8004c1e:	2268      	movs	r2, #104	; 0x68
 8004c20:	1e4d      	subs	r5, r1, #1
 8004c22:	4355      	muls	r5, r2
 8004c24:	460e      	mov	r6, r1
 8004c26:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004c2a:	f7ff fd39 	bl	80046a0 <_malloc_r>
 8004c2e:	4604      	mov	r4, r0
 8004c30:	b140      	cbz	r0, 8004c44 <__sfmoreglue+0x28>
 8004c32:	2100      	movs	r1, #0
 8004c34:	e9c0 1600 	strd	r1, r6, [r0]
 8004c38:	300c      	adds	r0, #12
 8004c3a:	60a0      	str	r0, [r4, #8]
 8004c3c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004c40:	f7ff fcba 	bl	80045b8 <memset>
 8004c44:	4620      	mov	r0, r4
 8004c46:	bd70      	pop	{r4, r5, r6, pc}

08004c48 <__sfp_lock_acquire>:
 8004c48:	4801      	ldr	r0, [pc, #4]	; (8004c50 <__sfp_lock_acquire+0x8>)
 8004c4a:	f000 b8b3 	b.w	8004db4 <__retarget_lock_acquire_recursive>
 8004c4e:	bf00      	nop
 8004c50:	20000181 	.word	0x20000181

08004c54 <__sfp_lock_release>:
 8004c54:	4801      	ldr	r0, [pc, #4]	; (8004c5c <__sfp_lock_release+0x8>)
 8004c56:	f000 b8ae 	b.w	8004db6 <__retarget_lock_release_recursive>
 8004c5a:	bf00      	nop
 8004c5c:	20000181 	.word	0x20000181

08004c60 <__sinit_lock_acquire>:
 8004c60:	4801      	ldr	r0, [pc, #4]	; (8004c68 <__sinit_lock_acquire+0x8>)
 8004c62:	f000 b8a7 	b.w	8004db4 <__retarget_lock_acquire_recursive>
 8004c66:	bf00      	nop
 8004c68:	20000182 	.word	0x20000182

08004c6c <__sinit_lock_release>:
 8004c6c:	4801      	ldr	r0, [pc, #4]	; (8004c74 <__sinit_lock_release+0x8>)
 8004c6e:	f000 b8a2 	b.w	8004db6 <__retarget_lock_release_recursive>
 8004c72:	bf00      	nop
 8004c74:	20000182 	.word	0x20000182

08004c78 <__sinit>:
 8004c78:	b510      	push	{r4, lr}
 8004c7a:	4604      	mov	r4, r0
 8004c7c:	f7ff fff0 	bl	8004c60 <__sinit_lock_acquire>
 8004c80:	69a3      	ldr	r3, [r4, #24]
 8004c82:	b11b      	cbz	r3, 8004c8c <__sinit+0x14>
 8004c84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c88:	f7ff bff0 	b.w	8004c6c <__sinit_lock_release>
 8004c8c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004c90:	6523      	str	r3, [r4, #80]	; 0x50
 8004c92:	4b13      	ldr	r3, [pc, #76]	; (8004ce0 <__sinit+0x68>)
 8004c94:	4a13      	ldr	r2, [pc, #76]	; (8004ce4 <__sinit+0x6c>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	62a2      	str	r2, [r4, #40]	; 0x28
 8004c9a:	42a3      	cmp	r3, r4
 8004c9c:	bf04      	itt	eq
 8004c9e:	2301      	moveq	r3, #1
 8004ca0:	61a3      	streq	r3, [r4, #24]
 8004ca2:	4620      	mov	r0, r4
 8004ca4:	f000 f820 	bl	8004ce8 <__sfp>
 8004ca8:	6060      	str	r0, [r4, #4]
 8004caa:	4620      	mov	r0, r4
 8004cac:	f000 f81c 	bl	8004ce8 <__sfp>
 8004cb0:	60a0      	str	r0, [r4, #8]
 8004cb2:	4620      	mov	r0, r4
 8004cb4:	f000 f818 	bl	8004ce8 <__sfp>
 8004cb8:	2200      	movs	r2, #0
 8004cba:	60e0      	str	r0, [r4, #12]
 8004cbc:	2104      	movs	r1, #4
 8004cbe:	6860      	ldr	r0, [r4, #4]
 8004cc0:	f7ff ff82 	bl	8004bc8 <std>
 8004cc4:	68a0      	ldr	r0, [r4, #8]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	2109      	movs	r1, #9
 8004cca:	f7ff ff7d 	bl	8004bc8 <std>
 8004cce:	68e0      	ldr	r0, [r4, #12]
 8004cd0:	2202      	movs	r2, #2
 8004cd2:	2112      	movs	r1, #18
 8004cd4:	f7ff ff78 	bl	8004bc8 <std>
 8004cd8:	2301      	movs	r3, #1
 8004cda:	61a3      	str	r3, [r4, #24]
 8004cdc:	e7d2      	b.n	8004c84 <__sinit+0xc>
 8004cde:	bf00      	nop
 8004ce0:	08005708 	.word	0x08005708
 8004ce4:	08004c11 	.word	0x08004c11

08004ce8 <__sfp>:
 8004ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cea:	4607      	mov	r7, r0
 8004cec:	f7ff ffac 	bl	8004c48 <__sfp_lock_acquire>
 8004cf0:	4b1e      	ldr	r3, [pc, #120]	; (8004d6c <__sfp+0x84>)
 8004cf2:	681e      	ldr	r6, [r3, #0]
 8004cf4:	69b3      	ldr	r3, [r6, #24]
 8004cf6:	b913      	cbnz	r3, 8004cfe <__sfp+0x16>
 8004cf8:	4630      	mov	r0, r6
 8004cfa:	f7ff ffbd 	bl	8004c78 <__sinit>
 8004cfe:	3648      	adds	r6, #72	; 0x48
 8004d00:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004d04:	3b01      	subs	r3, #1
 8004d06:	d503      	bpl.n	8004d10 <__sfp+0x28>
 8004d08:	6833      	ldr	r3, [r6, #0]
 8004d0a:	b30b      	cbz	r3, 8004d50 <__sfp+0x68>
 8004d0c:	6836      	ldr	r6, [r6, #0]
 8004d0e:	e7f7      	b.n	8004d00 <__sfp+0x18>
 8004d10:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004d14:	b9d5      	cbnz	r5, 8004d4c <__sfp+0x64>
 8004d16:	4b16      	ldr	r3, [pc, #88]	; (8004d70 <__sfp+0x88>)
 8004d18:	60e3      	str	r3, [r4, #12]
 8004d1a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004d1e:	6665      	str	r5, [r4, #100]	; 0x64
 8004d20:	f000 f847 	bl	8004db2 <__retarget_lock_init_recursive>
 8004d24:	f7ff ff96 	bl	8004c54 <__sfp_lock_release>
 8004d28:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004d2c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004d30:	6025      	str	r5, [r4, #0]
 8004d32:	61a5      	str	r5, [r4, #24]
 8004d34:	2208      	movs	r2, #8
 8004d36:	4629      	mov	r1, r5
 8004d38:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004d3c:	f7ff fc3c 	bl	80045b8 <memset>
 8004d40:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004d44:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004d48:	4620      	mov	r0, r4
 8004d4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d4c:	3468      	adds	r4, #104	; 0x68
 8004d4e:	e7d9      	b.n	8004d04 <__sfp+0x1c>
 8004d50:	2104      	movs	r1, #4
 8004d52:	4638      	mov	r0, r7
 8004d54:	f7ff ff62 	bl	8004c1c <__sfmoreglue>
 8004d58:	4604      	mov	r4, r0
 8004d5a:	6030      	str	r0, [r6, #0]
 8004d5c:	2800      	cmp	r0, #0
 8004d5e:	d1d5      	bne.n	8004d0c <__sfp+0x24>
 8004d60:	f7ff ff78 	bl	8004c54 <__sfp_lock_release>
 8004d64:	230c      	movs	r3, #12
 8004d66:	603b      	str	r3, [r7, #0]
 8004d68:	e7ee      	b.n	8004d48 <__sfp+0x60>
 8004d6a:	bf00      	nop
 8004d6c:	08005708 	.word	0x08005708
 8004d70:	ffff0001 	.word	0xffff0001

08004d74 <_fwalk_reent>:
 8004d74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d78:	4606      	mov	r6, r0
 8004d7a:	4688      	mov	r8, r1
 8004d7c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004d80:	2700      	movs	r7, #0
 8004d82:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004d86:	f1b9 0901 	subs.w	r9, r9, #1
 8004d8a:	d505      	bpl.n	8004d98 <_fwalk_reent+0x24>
 8004d8c:	6824      	ldr	r4, [r4, #0]
 8004d8e:	2c00      	cmp	r4, #0
 8004d90:	d1f7      	bne.n	8004d82 <_fwalk_reent+0xe>
 8004d92:	4638      	mov	r0, r7
 8004d94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d98:	89ab      	ldrh	r3, [r5, #12]
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d907      	bls.n	8004dae <_fwalk_reent+0x3a>
 8004d9e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004da2:	3301      	adds	r3, #1
 8004da4:	d003      	beq.n	8004dae <_fwalk_reent+0x3a>
 8004da6:	4629      	mov	r1, r5
 8004da8:	4630      	mov	r0, r6
 8004daa:	47c0      	blx	r8
 8004dac:	4307      	orrs	r7, r0
 8004dae:	3568      	adds	r5, #104	; 0x68
 8004db0:	e7e9      	b.n	8004d86 <_fwalk_reent+0x12>

08004db2 <__retarget_lock_init_recursive>:
 8004db2:	4770      	bx	lr

08004db4 <__retarget_lock_acquire_recursive>:
 8004db4:	4770      	bx	lr

08004db6 <__retarget_lock_release_recursive>:
 8004db6:	4770      	bx	lr

08004db8 <__swhatbuf_r>:
 8004db8:	b570      	push	{r4, r5, r6, lr}
 8004dba:	460e      	mov	r6, r1
 8004dbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dc0:	2900      	cmp	r1, #0
 8004dc2:	b096      	sub	sp, #88	; 0x58
 8004dc4:	4614      	mov	r4, r2
 8004dc6:	461d      	mov	r5, r3
 8004dc8:	da08      	bge.n	8004ddc <__swhatbuf_r+0x24>
 8004dca:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	602a      	str	r2, [r5, #0]
 8004dd2:	061a      	lsls	r2, r3, #24
 8004dd4:	d410      	bmi.n	8004df8 <__swhatbuf_r+0x40>
 8004dd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004dda:	e00e      	b.n	8004dfa <__swhatbuf_r+0x42>
 8004ddc:	466a      	mov	r2, sp
 8004dde:	f000 fbb1 	bl	8005544 <_fstat_r>
 8004de2:	2800      	cmp	r0, #0
 8004de4:	dbf1      	blt.n	8004dca <__swhatbuf_r+0x12>
 8004de6:	9a01      	ldr	r2, [sp, #4]
 8004de8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004dec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004df0:	425a      	negs	r2, r3
 8004df2:	415a      	adcs	r2, r3
 8004df4:	602a      	str	r2, [r5, #0]
 8004df6:	e7ee      	b.n	8004dd6 <__swhatbuf_r+0x1e>
 8004df8:	2340      	movs	r3, #64	; 0x40
 8004dfa:	2000      	movs	r0, #0
 8004dfc:	6023      	str	r3, [r4, #0]
 8004dfe:	b016      	add	sp, #88	; 0x58
 8004e00:	bd70      	pop	{r4, r5, r6, pc}
	...

08004e04 <__smakebuf_r>:
 8004e04:	898b      	ldrh	r3, [r1, #12]
 8004e06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004e08:	079d      	lsls	r5, r3, #30
 8004e0a:	4606      	mov	r6, r0
 8004e0c:	460c      	mov	r4, r1
 8004e0e:	d507      	bpl.n	8004e20 <__smakebuf_r+0x1c>
 8004e10:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004e14:	6023      	str	r3, [r4, #0]
 8004e16:	6123      	str	r3, [r4, #16]
 8004e18:	2301      	movs	r3, #1
 8004e1a:	6163      	str	r3, [r4, #20]
 8004e1c:	b002      	add	sp, #8
 8004e1e:	bd70      	pop	{r4, r5, r6, pc}
 8004e20:	ab01      	add	r3, sp, #4
 8004e22:	466a      	mov	r2, sp
 8004e24:	f7ff ffc8 	bl	8004db8 <__swhatbuf_r>
 8004e28:	9900      	ldr	r1, [sp, #0]
 8004e2a:	4605      	mov	r5, r0
 8004e2c:	4630      	mov	r0, r6
 8004e2e:	f7ff fc37 	bl	80046a0 <_malloc_r>
 8004e32:	b948      	cbnz	r0, 8004e48 <__smakebuf_r+0x44>
 8004e34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e38:	059a      	lsls	r2, r3, #22
 8004e3a:	d4ef      	bmi.n	8004e1c <__smakebuf_r+0x18>
 8004e3c:	f023 0303 	bic.w	r3, r3, #3
 8004e40:	f043 0302 	orr.w	r3, r3, #2
 8004e44:	81a3      	strh	r3, [r4, #12]
 8004e46:	e7e3      	b.n	8004e10 <__smakebuf_r+0xc>
 8004e48:	4b0d      	ldr	r3, [pc, #52]	; (8004e80 <__smakebuf_r+0x7c>)
 8004e4a:	62b3      	str	r3, [r6, #40]	; 0x28
 8004e4c:	89a3      	ldrh	r3, [r4, #12]
 8004e4e:	6020      	str	r0, [r4, #0]
 8004e50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e54:	81a3      	strh	r3, [r4, #12]
 8004e56:	9b00      	ldr	r3, [sp, #0]
 8004e58:	6163      	str	r3, [r4, #20]
 8004e5a:	9b01      	ldr	r3, [sp, #4]
 8004e5c:	6120      	str	r0, [r4, #16]
 8004e5e:	b15b      	cbz	r3, 8004e78 <__smakebuf_r+0x74>
 8004e60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e64:	4630      	mov	r0, r6
 8004e66:	f000 fb7f 	bl	8005568 <_isatty_r>
 8004e6a:	b128      	cbz	r0, 8004e78 <__smakebuf_r+0x74>
 8004e6c:	89a3      	ldrh	r3, [r4, #12]
 8004e6e:	f023 0303 	bic.w	r3, r3, #3
 8004e72:	f043 0301 	orr.w	r3, r3, #1
 8004e76:	81a3      	strh	r3, [r4, #12]
 8004e78:	89a0      	ldrh	r0, [r4, #12]
 8004e7a:	4305      	orrs	r5, r0
 8004e7c:	81a5      	strh	r5, [r4, #12]
 8004e7e:	e7cd      	b.n	8004e1c <__smakebuf_r+0x18>
 8004e80:	08004c11 	.word	0x08004c11

08004e84 <__malloc_lock>:
 8004e84:	4801      	ldr	r0, [pc, #4]	; (8004e8c <__malloc_lock+0x8>)
 8004e86:	f7ff bf95 	b.w	8004db4 <__retarget_lock_acquire_recursive>
 8004e8a:	bf00      	nop
 8004e8c:	20000180 	.word	0x20000180

08004e90 <__malloc_unlock>:
 8004e90:	4801      	ldr	r0, [pc, #4]	; (8004e98 <__malloc_unlock+0x8>)
 8004e92:	f7ff bf90 	b.w	8004db6 <__retarget_lock_release_recursive>
 8004e96:	bf00      	nop
 8004e98:	20000180 	.word	0x20000180

08004e9c <__sfputc_r>:
 8004e9c:	6893      	ldr	r3, [r2, #8]
 8004e9e:	3b01      	subs	r3, #1
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	b410      	push	{r4}
 8004ea4:	6093      	str	r3, [r2, #8]
 8004ea6:	da08      	bge.n	8004eba <__sfputc_r+0x1e>
 8004ea8:	6994      	ldr	r4, [r2, #24]
 8004eaa:	42a3      	cmp	r3, r4
 8004eac:	db01      	blt.n	8004eb2 <__sfputc_r+0x16>
 8004eae:	290a      	cmp	r1, #10
 8004eb0:	d103      	bne.n	8004eba <__sfputc_r+0x1e>
 8004eb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004eb6:	f7ff bd05 	b.w	80048c4 <__swbuf_r>
 8004eba:	6813      	ldr	r3, [r2, #0]
 8004ebc:	1c58      	adds	r0, r3, #1
 8004ebe:	6010      	str	r0, [r2, #0]
 8004ec0:	7019      	strb	r1, [r3, #0]
 8004ec2:	4608      	mov	r0, r1
 8004ec4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ec8:	4770      	bx	lr

08004eca <__sfputs_r>:
 8004eca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ecc:	4606      	mov	r6, r0
 8004ece:	460f      	mov	r7, r1
 8004ed0:	4614      	mov	r4, r2
 8004ed2:	18d5      	adds	r5, r2, r3
 8004ed4:	42ac      	cmp	r4, r5
 8004ed6:	d101      	bne.n	8004edc <__sfputs_r+0x12>
 8004ed8:	2000      	movs	r0, #0
 8004eda:	e007      	b.n	8004eec <__sfputs_r+0x22>
 8004edc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ee0:	463a      	mov	r2, r7
 8004ee2:	4630      	mov	r0, r6
 8004ee4:	f7ff ffda 	bl	8004e9c <__sfputc_r>
 8004ee8:	1c43      	adds	r3, r0, #1
 8004eea:	d1f3      	bne.n	8004ed4 <__sfputs_r+0xa>
 8004eec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004ef0 <_vfiprintf_r>:
 8004ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ef4:	460d      	mov	r5, r1
 8004ef6:	b09d      	sub	sp, #116	; 0x74
 8004ef8:	4614      	mov	r4, r2
 8004efa:	4698      	mov	r8, r3
 8004efc:	4606      	mov	r6, r0
 8004efe:	b118      	cbz	r0, 8004f08 <_vfiprintf_r+0x18>
 8004f00:	6983      	ldr	r3, [r0, #24]
 8004f02:	b90b      	cbnz	r3, 8004f08 <_vfiprintf_r+0x18>
 8004f04:	f7ff feb8 	bl	8004c78 <__sinit>
 8004f08:	4b89      	ldr	r3, [pc, #548]	; (8005130 <_vfiprintf_r+0x240>)
 8004f0a:	429d      	cmp	r5, r3
 8004f0c:	d11b      	bne.n	8004f46 <_vfiprintf_r+0x56>
 8004f0e:	6875      	ldr	r5, [r6, #4]
 8004f10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f12:	07d9      	lsls	r1, r3, #31
 8004f14:	d405      	bmi.n	8004f22 <_vfiprintf_r+0x32>
 8004f16:	89ab      	ldrh	r3, [r5, #12]
 8004f18:	059a      	lsls	r2, r3, #22
 8004f1a:	d402      	bmi.n	8004f22 <_vfiprintf_r+0x32>
 8004f1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f1e:	f7ff ff49 	bl	8004db4 <__retarget_lock_acquire_recursive>
 8004f22:	89ab      	ldrh	r3, [r5, #12]
 8004f24:	071b      	lsls	r3, r3, #28
 8004f26:	d501      	bpl.n	8004f2c <_vfiprintf_r+0x3c>
 8004f28:	692b      	ldr	r3, [r5, #16]
 8004f2a:	b9eb      	cbnz	r3, 8004f68 <_vfiprintf_r+0x78>
 8004f2c:	4629      	mov	r1, r5
 8004f2e:	4630      	mov	r0, r6
 8004f30:	f7ff fd1a 	bl	8004968 <__swsetup_r>
 8004f34:	b1c0      	cbz	r0, 8004f68 <_vfiprintf_r+0x78>
 8004f36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f38:	07dc      	lsls	r4, r3, #31
 8004f3a:	d50e      	bpl.n	8004f5a <_vfiprintf_r+0x6a>
 8004f3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f40:	b01d      	add	sp, #116	; 0x74
 8004f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f46:	4b7b      	ldr	r3, [pc, #492]	; (8005134 <_vfiprintf_r+0x244>)
 8004f48:	429d      	cmp	r5, r3
 8004f4a:	d101      	bne.n	8004f50 <_vfiprintf_r+0x60>
 8004f4c:	68b5      	ldr	r5, [r6, #8]
 8004f4e:	e7df      	b.n	8004f10 <_vfiprintf_r+0x20>
 8004f50:	4b79      	ldr	r3, [pc, #484]	; (8005138 <_vfiprintf_r+0x248>)
 8004f52:	429d      	cmp	r5, r3
 8004f54:	bf08      	it	eq
 8004f56:	68f5      	ldreq	r5, [r6, #12]
 8004f58:	e7da      	b.n	8004f10 <_vfiprintf_r+0x20>
 8004f5a:	89ab      	ldrh	r3, [r5, #12]
 8004f5c:	0598      	lsls	r0, r3, #22
 8004f5e:	d4ed      	bmi.n	8004f3c <_vfiprintf_r+0x4c>
 8004f60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f62:	f7ff ff28 	bl	8004db6 <__retarget_lock_release_recursive>
 8004f66:	e7e9      	b.n	8004f3c <_vfiprintf_r+0x4c>
 8004f68:	2300      	movs	r3, #0
 8004f6a:	9309      	str	r3, [sp, #36]	; 0x24
 8004f6c:	2320      	movs	r3, #32
 8004f6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f72:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f76:	2330      	movs	r3, #48	; 0x30
 8004f78:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800513c <_vfiprintf_r+0x24c>
 8004f7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f80:	f04f 0901 	mov.w	r9, #1
 8004f84:	4623      	mov	r3, r4
 8004f86:	469a      	mov	sl, r3
 8004f88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f8c:	b10a      	cbz	r2, 8004f92 <_vfiprintf_r+0xa2>
 8004f8e:	2a25      	cmp	r2, #37	; 0x25
 8004f90:	d1f9      	bne.n	8004f86 <_vfiprintf_r+0x96>
 8004f92:	ebba 0b04 	subs.w	fp, sl, r4
 8004f96:	d00b      	beq.n	8004fb0 <_vfiprintf_r+0xc0>
 8004f98:	465b      	mov	r3, fp
 8004f9a:	4622      	mov	r2, r4
 8004f9c:	4629      	mov	r1, r5
 8004f9e:	4630      	mov	r0, r6
 8004fa0:	f7ff ff93 	bl	8004eca <__sfputs_r>
 8004fa4:	3001      	adds	r0, #1
 8004fa6:	f000 80aa 	beq.w	80050fe <_vfiprintf_r+0x20e>
 8004faa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004fac:	445a      	add	r2, fp
 8004fae:	9209      	str	r2, [sp, #36]	; 0x24
 8004fb0:	f89a 3000 	ldrb.w	r3, [sl]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	f000 80a2 	beq.w	80050fe <_vfiprintf_r+0x20e>
 8004fba:	2300      	movs	r3, #0
 8004fbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004fc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004fc4:	f10a 0a01 	add.w	sl, sl, #1
 8004fc8:	9304      	str	r3, [sp, #16]
 8004fca:	9307      	str	r3, [sp, #28]
 8004fcc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004fd0:	931a      	str	r3, [sp, #104]	; 0x68
 8004fd2:	4654      	mov	r4, sl
 8004fd4:	2205      	movs	r2, #5
 8004fd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fda:	4858      	ldr	r0, [pc, #352]	; (800513c <_vfiprintf_r+0x24c>)
 8004fdc:	f7fb f8f8 	bl	80001d0 <memchr>
 8004fe0:	9a04      	ldr	r2, [sp, #16]
 8004fe2:	b9d8      	cbnz	r0, 800501c <_vfiprintf_r+0x12c>
 8004fe4:	06d1      	lsls	r1, r2, #27
 8004fe6:	bf44      	itt	mi
 8004fe8:	2320      	movmi	r3, #32
 8004fea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004fee:	0713      	lsls	r3, r2, #28
 8004ff0:	bf44      	itt	mi
 8004ff2:	232b      	movmi	r3, #43	; 0x2b
 8004ff4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ff8:	f89a 3000 	ldrb.w	r3, [sl]
 8004ffc:	2b2a      	cmp	r3, #42	; 0x2a
 8004ffe:	d015      	beq.n	800502c <_vfiprintf_r+0x13c>
 8005000:	9a07      	ldr	r2, [sp, #28]
 8005002:	4654      	mov	r4, sl
 8005004:	2000      	movs	r0, #0
 8005006:	f04f 0c0a 	mov.w	ip, #10
 800500a:	4621      	mov	r1, r4
 800500c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005010:	3b30      	subs	r3, #48	; 0x30
 8005012:	2b09      	cmp	r3, #9
 8005014:	d94e      	bls.n	80050b4 <_vfiprintf_r+0x1c4>
 8005016:	b1b0      	cbz	r0, 8005046 <_vfiprintf_r+0x156>
 8005018:	9207      	str	r2, [sp, #28]
 800501a:	e014      	b.n	8005046 <_vfiprintf_r+0x156>
 800501c:	eba0 0308 	sub.w	r3, r0, r8
 8005020:	fa09 f303 	lsl.w	r3, r9, r3
 8005024:	4313      	orrs	r3, r2
 8005026:	9304      	str	r3, [sp, #16]
 8005028:	46a2      	mov	sl, r4
 800502a:	e7d2      	b.n	8004fd2 <_vfiprintf_r+0xe2>
 800502c:	9b03      	ldr	r3, [sp, #12]
 800502e:	1d19      	adds	r1, r3, #4
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	9103      	str	r1, [sp, #12]
 8005034:	2b00      	cmp	r3, #0
 8005036:	bfbb      	ittet	lt
 8005038:	425b      	neglt	r3, r3
 800503a:	f042 0202 	orrlt.w	r2, r2, #2
 800503e:	9307      	strge	r3, [sp, #28]
 8005040:	9307      	strlt	r3, [sp, #28]
 8005042:	bfb8      	it	lt
 8005044:	9204      	strlt	r2, [sp, #16]
 8005046:	7823      	ldrb	r3, [r4, #0]
 8005048:	2b2e      	cmp	r3, #46	; 0x2e
 800504a:	d10c      	bne.n	8005066 <_vfiprintf_r+0x176>
 800504c:	7863      	ldrb	r3, [r4, #1]
 800504e:	2b2a      	cmp	r3, #42	; 0x2a
 8005050:	d135      	bne.n	80050be <_vfiprintf_r+0x1ce>
 8005052:	9b03      	ldr	r3, [sp, #12]
 8005054:	1d1a      	adds	r2, r3, #4
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	9203      	str	r2, [sp, #12]
 800505a:	2b00      	cmp	r3, #0
 800505c:	bfb8      	it	lt
 800505e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005062:	3402      	adds	r4, #2
 8005064:	9305      	str	r3, [sp, #20]
 8005066:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800514c <_vfiprintf_r+0x25c>
 800506a:	7821      	ldrb	r1, [r4, #0]
 800506c:	2203      	movs	r2, #3
 800506e:	4650      	mov	r0, sl
 8005070:	f7fb f8ae 	bl	80001d0 <memchr>
 8005074:	b140      	cbz	r0, 8005088 <_vfiprintf_r+0x198>
 8005076:	2340      	movs	r3, #64	; 0x40
 8005078:	eba0 000a 	sub.w	r0, r0, sl
 800507c:	fa03 f000 	lsl.w	r0, r3, r0
 8005080:	9b04      	ldr	r3, [sp, #16]
 8005082:	4303      	orrs	r3, r0
 8005084:	3401      	adds	r4, #1
 8005086:	9304      	str	r3, [sp, #16]
 8005088:	f814 1b01 	ldrb.w	r1, [r4], #1
 800508c:	482c      	ldr	r0, [pc, #176]	; (8005140 <_vfiprintf_r+0x250>)
 800508e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005092:	2206      	movs	r2, #6
 8005094:	f7fb f89c 	bl	80001d0 <memchr>
 8005098:	2800      	cmp	r0, #0
 800509a:	d03f      	beq.n	800511c <_vfiprintf_r+0x22c>
 800509c:	4b29      	ldr	r3, [pc, #164]	; (8005144 <_vfiprintf_r+0x254>)
 800509e:	bb1b      	cbnz	r3, 80050e8 <_vfiprintf_r+0x1f8>
 80050a0:	9b03      	ldr	r3, [sp, #12]
 80050a2:	3307      	adds	r3, #7
 80050a4:	f023 0307 	bic.w	r3, r3, #7
 80050a8:	3308      	adds	r3, #8
 80050aa:	9303      	str	r3, [sp, #12]
 80050ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050ae:	443b      	add	r3, r7
 80050b0:	9309      	str	r3, [sp, #36]	; 0x24
 80050b2:	e767      	b.n	8004f84 <_vfiprintf_r+0x94>
 80050b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80050b8:	460c      	mov	r4, r1
 80050ba:	2001      	movs	r0, #1
 80050bc:	e7a5      	b.n	800500a <_vfiprintf_r+0x11a>
 80050be:	2300      	movs	r3, #0
 80050c0:	3401      	adds	r4, #1
 80050c2:	9305      	str	r3, [sp, #20]
 80050c4:	4619      	mov	r1, r3
 80050c6:	f04f 0c0a 	mov.w	ip, #10
 80050ca:	4620      	mov	r0, r4
 80050cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80050d0:	3a30      	subs	r2, #48	; 0x30
 80050d2:	2a09      	cmp	r2, #9
 80050d4:	d903      	bls.n	80050de <_vfiprintf_r+0x1ee>
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d0c5      	beq.n	8005066 <_vfiprintf_r+0x176>
 80050da:	9105      	str	r1, [sp, #20]
 80050dc:	e7c3      	b.n	8005066 <_vfiprintf_r+0x176>
 80050de:	fb0c 2101 	mla	r1, ip, r1, r2
 80050e2:	4604      	mov	r4, r0
 80050e4:	2301      	movs	r3, #1
 80050e6:	e7f0      	b.n	80050ca <_vfiprintf_r+0x1da>
 80050e8:	ab03      	add	r3, sp, #12
 80050ea:	9300      	str	r3, [sp, #0]
 80050ec:	462a      	mov	r2, r5
 80050ee:	4b16      	ldr	r3, [pc, #88]	; (8005148 <_vfiprintf_r+0x258>)
 80050f0:	a904      	add	r1, sp, #16
 80050f2:	4630      	mov	r0, r6
 80050f4:	f3af 8000 	nop.w
 80050f8:	4607      	mov	r7, r0
 80050fa:	1c78      	adds	r0, r7, #1
 80050fc:	d1d6      	bne.n	80050ac <_vfiprintf_r+0x1bc>
 80050fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005100:	07d9      	lsls	r1, r3, #31
 8005102:	d405      	bmi.n	8005110 <_vfiprintf_r+0x220>
 8005104:	89ab      	ldrh	r3, [r5, #12]
 8005106:	059a      	lsls	r2, r3, #22
 8005108:	d402      	bmi.n	8005110 <_vfiprintf_r+0x220>
 800510a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800510c:	f7ff fe53 	bl	8004db6 <__retarget_lock_release_recursive>
 8005110:	89ab      	ldrh	r3, [r5, #12]
 8005112:	065b      	lsls	r3, r3, #25
 8005114:	f53f af12 	bmi.w	8004f3c <_vfiprintf_r+0x4c>
 8005118:	9809      	ldr	r0, [sp, #36]	; 0x24
 800511a:	e711      	b.n	8004f40 <_vfiprintf_r+0x50>
 800511c:	ab03      	add	r3, sp, #12
 800511e:	9300      	str	r3, [sp, #0]
 8005120:	462a      	mov	r2, r5
 8005122:	4b09      	ldr	r3, [pc, #36]	; (8005148 <_vfiprintf_r+0x258>)
 8005124:	a904      	add	r1, sp, #16
 8005126:	4630      	mov	r0, r6
 8005128:	f000 f880 	bl	800522c <_printf_i>
 800512c:	e7e4      	b.n	80050f8 <_vfiprintf_r+0x208>
 800512e:	bf00      	nop
 8005130:	0800572c 	.word	0x0800572c
 8005134:	0800574c 	.word	0x0800574c
 8005138:	0800570c 	.word	0x0800570c
 800513c:	0800576c 	.word	0x0800576c
 8005140:	08005776 	.word	0x08005776
 8005144:	00000000 	.word	0x00000000
 8005148:	08004ecb 	.word	0x08004ecb
 800514c:	08005772 	.word	0x08005772

08005150 <_printf_common>:
 8005150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005154:	4616      	mov	r6, r2
 8005156:	4699      	mov	r9, r3
 8005158:	688a      	ldr	r2, [r1, #8]
 800515a:	690b      	ldr	r3, [r1, #16]
 800515c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005160:	4293      	cmp	r3, r2
 8005162:	bfb8      	it	lt
 8005164:	4613      	movlt	r3, r2
 8005166:	6033      	str	r3, [r6, #0]
 8005168:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800516c:	4607      	mov	r7, r0
 800516e:	460c      	mov	r4, r1
 8005170:	b10a      	cbz	r2, 8005176 <_printf_common+0x26>
 8005172:	3301      	adds	r3, #1
 8005174:	6033      	str	r3, [r6, #0]
 8005176:	6823      	ldr	r3, [r4, #0]
 8005178:	0699      	lsls	r1, r3, #26
 800517a:	bf42      	ittt	mi
 800517c:	6833      	ldrmi	r3, [r6, #0]
 800517e:	3302      	addmi	r3, #2
 8005180:	6033      	strmi	r3, [r6, #0]
 8005182:	6825      	ldr	r5, [r4, #0]
 8005184:	f015 0506 	ands.w	r5, r5, #6
 8005188:	d106      	bne.n	8005198 <_printf_common+0x48>
 800518a:	f104 0a19 	add.w	sl, r4, #25
 800518e:	68e3      	ldr	r3, [r4, #12]
 8005190:	6832      	ldr	r2, [r6, #0]
 8005192:	1a9b      	subs	r3, r3, r2
 8005194:	42ab      	cmp	r3, r5
 8005196:	dc26      	bgt.n	80051e6 <_printf_common+0x96>
 8005198:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800519c:	1e13      	subs	r3, r2, #0
 800519e:	6822      	ldr	r2, [r4, #0]
 80051a0:	bf18      	it	ne
 80051a2:	2301      	movne	r3, #1
 80051a4:	0692      	lsls	r2, r2, #26
 80051a6:	d42b      	bmi.n	8005200 <_printf_common+0xb0>
 80051a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80051ac:	4649      	mov	r1, r9
 80051ae:	4638      	mov	r0, r7
 80051b0:	47c0      	blx	r8
 80051b2:	3001      	adds	r0, #1
 80051b4:	d01e      	beq.n	80051f4 <_printf_common+0xa4>
 80051b6:	6823      	ldr	r3, [r4, #0]
 80051b8:	68e5      	ldr	r5, [r4, #12]
 80051ba:	6832      	ldr	r2, [r6, #0]
 80051bc:	f003 0306 	and.w	r3, r3, #6
 80051c0:	2b04      	cmp	r3, #4
 80051c2:	bf08      	it	eq
 80051c4:	1aad      	subeq	r5, r5, r2
 80051c6:	68a3      	ldr	r3, [r4, #8]
 80051c8:	6922      	ldr	r2, [r4, #16]
 80051ca:	bf0c      	ite	eq
 80051cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051d0:	2500      	movne	r5, #0
 80051d2:	4293      	cmp	r3, r2
 80051d4:	bfc4      	itt	gt
 80051d6:	1a9b      	subgt	r3, r3, r2
 80051d8:	18ed      	addgt	r5, r5, r3
 80051da:	2600      	movs	r6, #0
 80051dc:	341a      	adds	r4, #26
 80051de:	42b5      	cmp	r5, r6
 80051e0:	d11a      	bne.n	8005218 <_printf_common+0xc8>
 80051e2:	2000      	movs	r0, #0
 80051e4:	e008      	b.n	80051f8 <_printf_common+0xa8>
 80051e6:	2301      	movs	r3, #1
 80051e8:	4652      	mov	r2, sl
 80051ea:	4649      	mov	r1, r9
 80051ec:	4638      	mov	r0, r7
 80051ee:	47c0      	blx	r8
 80051f0:	3001      	adds	r0, #1
 80051f2:	d103      	bne.n	80051fc <_printf_common+0xac>
 80051f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80051f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051fc:	3501      	adds	r5, #1
 80051fe:	e7c6      	b.n	800518e <_printf_common+0x3e>
 8005200:	18e1      	adds	r1, r4, r3
 8005202:	1c5a      	adds	r2, r3, #1
 8005204:	2030      	movs	r0, #48	; 0x30
 8005206:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800520a:	4422      	add	r2, r4
 800520c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005210:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005214:	3302      	adds	r3, #2
 8005216:	e7c7      	b.n	80051a8 <_printf_common+0x58>
 8005218:	2301      	movs	r3, #1
 800521a:	4622      	mov	r2, r4
 800521c:	4649      	mov	r1, r9
 800521e:	4638      	mov	r0, r7
 8005220:	47c0      	blx	r8
 8005222:	3001      	adds	r0, #1
 8005224:	d0e6      	beq.n	80051f4 <_printf_common+0xa4>
 8005226:	3601      	adds	r6, #1
 8005228:	e7d9      	b.n	80051de <_printf_common+0x8e>
	...

0800522c <_printf_i>:
 800522c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005230:	7e0f      	ldrb	r7, [r1, #24]
 8005232:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005234:	2f78      	cmp	r7, #120	; 0x78
 8005236:	4691      	mov	r9, r2
 8005238:	4680      	mov	r8, r0
 800523a:	460c      	mov	r4, r1
 800523c:	469a      	mov	sl, r3
 800523e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005242:	d807      	bhi.n	8005254 <_printf_i+0x28>
 8005244:	2f62      	cmp	r7, #98	; 0x62
 8005246:	d80a      	bhi.n	800525e <_printf_i+0x32>
 8005248:	2f00      	cmp	r7, #0
 800524a:	f000 80d8 	beq.w	80053fe <_printf_i+0x1d2>
 800524e:	2f58      	cmp	r7, #88	; 0x58
 8005250:	f000 80a3 	beq.w	800539a <_printf_i+0x16e>
 8005254:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005258:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800525c:	e03a      	b.n	80052d4 <_printf_i+0xa8>
 800525e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005262:	2b15      	cmp	r3, #21
 8005264:	d8f6      	bhi.n	8005254 <_printf_i+0x28>
 8005266:	a101      	add	r1, pc, #4	; (adr r1, 800526c <_printf_i+0x40>)
 8005268:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800526c:	080052c5 	.word	0x080052c5
 8005270:	080052d9 	.word	0x080052d9
 8005274:	08005255 	.word	0x08005255
 8005278:	08005255 	.word	0x08005255
 800527c:	08005255 	.word	0x08005255
 8005280:	08005255 	.word	0x08005255
 8005284:	080052d9 	.word	0x080052d9
 8005288:	08005255 	.word	0x08005255
 800528c:	08005255 	.word	0x08005255
 8005290:	08005255 	.word	0x08005255
 8005294:	08005255 	.word	0x08005255
 8005298:	080053e5 	.word	0x080053e5
 800529c:	08005309 	.word	0x08005309
 80052a0:	080053c7 	.word	0x080053c7
 80052a4:	08005255 	.word	0x08005255
 80052a8:	08005255 	.word	0x08005255
 80052ac:	08005407 	.word	0x08005407
 80052b0:	08005255 	.word	0x08005255
 80052b4:	08005309 	.word	0x08005309
 80052b8:	08005255 	.word	0x08005255
 80052bc:	08005255 	.word	0x08005255
 80052c0:	080053cf 	.word	0x080053cf
 80052c4:	682b      	ldr	r3, [r5, #0]
 80052c6:	1d1a      	adds	r2, r3, #4
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	602a      	str	r2, [r5, #0]
 80052cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80052d4:	2301      	movs	r3, #1
 80052d6:	e0a3      	b.n	8005420 <_printf_i+0x1f4>
 80052d8:	6820      	ldr	r0, [r4, #0]
 80052da:	6829      	ldr	r1, [r5, #0]
 80052dc:	0606      	lsls	r6, r0, #24
 80052de:	f101 0304 	add.w	r3, r1, #4
 80052e2:	d50a      	bpl.n	80052fa <_printf_i+0xce>
 80052e4:	680e      	ldr	r6, [r1, #0]
 80052e6:	602b      	str	r3, [r5, #0]
 80052e8:	2e00      	cmp	r6, #0
 80052ea:	da03      	bge.n	80052f4 <_printf_i+0xc8>
 80052ec:	232d      	movs	r3, #45	; 0x2d
 80052ee:	4276      	negs	r6, r6
 80052f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052f4:	485e      	ldr	r0, [pc, #376]	; (8005470 <_printf_i+0x244>)
 80052f6:	230a      	movs	r3, #10
 80052f8:	e019      	b.n	800532e <_printf_i+0x102>
 80052fa:	680e      	ldr	r6, [r1, #0]
 80052fc:	602b      	str	r3, [r5, #0]
 80052fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005302:	bf18      	it	ne
 8005304:	b236      	sxthne	r6, r6
 8005306:	e7ef      	b.n	80052e8 <_printf_i+0xbc>
 8005308:	682b      	ldr	r3, [r5, #0]
 800530a:	6820      	ldr	r0, [r4, #0]
 800530c:	1d19      	adds	r1, r3, #4
 800530e:	6029      	str	r1, [r5, #0]
 8005310:	0601      	lsls	r1, r0, #24
 8005312:	d501      	bpl.n	8005318 <_printf_i+0xec>
 8005314:	681e      	ldr	r6, [r3, #0]
 8005316:	e002      	b.n	800531e <_printf_i+0xf2>
 8005318:	0646      	lsls	r6, r0, #25
 800531a:	d5fb      	bpl.n	8005314 <_printf_i+0xe8>
 800531c:	881e      	ldrh	r6, [r3, #0]
 800531e:	4854      	ldr	r0, [pc, #336]	; (8005470 <_printf_i+0x244>)
 8005320:	2f6f      	cmp	r7, #111	; 0x6f
 8005322:	bf0c      	ite	eq
 8005324:	2308      	moveq	r3, #8
 8005326:	230a      	movne	r3, #10
 8005328:	2100      	movs	r1, #0
 800532a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800532e:	6865      	ldr	r5, [r4, #4]
 8005330:	60a5      	str	r5, [r4, #8]
 8005332:	2d00      	cmp	r5, #0
 8005334:	bfa2      	ittt	ge
 8005336:	6821      	ldrge	r1, [r4, #0]
 8005338:	f021 0104 	bicge.w	r1, r1, #4
 800533c:	6021      	strge	r1, [r4, #0]
 800533e:	b90e      	cbnz	r6, 8005344 <_printf_i+0x118>
 8005340:	2d00      	cmp	r5, #0
 8005342:	d04d      	beq.n	80053e0 <_printf_i+0x1b4>
 8005344:	4615      	mov	r5, r2
 8005346:	fbb6 f1f3 	udiv	r1, r6, r3
 800534a:	fb03 6711 	mls	r7, r3, r1, r6
 800534e:	5dc7      	ldrb	r7, [r0, r7]
 8005350:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005354:	4637      	mov	r7, r6
 8005356:	42bb      	cmp	r3, r7
 8005358:	460e      	mov	r6, r1
 800535a:	d9f4      	bls.n	8005346 <_printf_i+0x11a>
 800535c:	2b08      	cmp	r3, #8
 800535e:	d10b      	bne.n	8005378 <_printf_i+0x14c>
 8005360:	6823      	ldr	r3, [r4, #0]
 8005362:	07de      	lsls	r6, r3, #31
 8005364:	d508      	bpl.n	8005378 <_printf_i+0x14c>
 8005366:	6923      	ldr	r3, [r4, #16]
 8005368:	6861      	ldr	r1, [r4, #4]
 800536a:	4299      	cmp	r1, r3
 800536c:	bfde      	ittt	le
 800536e:	2330      	movle	r3, #48	; 0x30
 8005370:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005374:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005378:	1b52      	subs	r2, r2, r5
 800537a:	6122      	str	r2, [r4, #16]
 800537c:	f8cd a000 	str.w	sl, [sp]
 8005380:	464b      	mov	r3, r9
 8005382:	aa03      	add	r2, sp, #12
 8005384:	4621      	mov	r1, r4
 8005386:	4640      	mov	r0, r8
 8005388:	f7ff fee2 	bl	8005150 <_printf_common>
 800538c:	3001      	adds	r0, #1
 800538e:	d14c      	bne.n	800542a <_printf_i+0x1fe>
 8005390:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005394:	b004      	add	sp, #16
 8005396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800539a:	4835      	ldr	r0, [pc, #212]	; (8005470 <_printf_i+0x244>)
 800539c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80053a0:	6829      	ldr	r1, [r5, #0]
 80053a2:	6823      	ldr	r3, [r4, #0]
 80053a4:	f851 6b04 	ldr.w	r6, [r1], #4
 80053a8:	6029      	str	r1, [r5, #0]
 80053aa:	061d      	lsls	r5, r3, #24
 80053ac:	d514      	bpl.n	80053d8 <_printf_i+0x1ac>
 80053ae:	07df      	lsls	r7, r3, #31
 80053b0:	bf44      	itt	mi
 80053b2:	f043 0320 	orrmi.w	r3, r3, #32
 80053b6:	6023      	strmi	r3, [r4, #0]
 80053b8:	b91e      	cbnz	r6, 80053c2 <_printf_i+0x196>
 80053ba:	6823      	ldr	r3, [r4, #0]
 80053bc:	f023 0320 	bic.w	r3, r3, #32
 80053c0:	6023      	str	r3, [r4, #0]
 80053c2:	2310      	movs	r3, #16
 80053c4:	e7b0      	b.n	8005328 <_printf_i+0xfc>
 80053c6:	6823      	ldr	r3, [r4, #0]
 80053c8:	f043 0320 	orr.w	r3, r3, #32
 80053cc:	6023      	str	r3, [r4, #0]
 80053ce:	2378      	movs	r3, #120	; 0x78
 80053d0:	4828      	ldr	r0, [pc, #160]	; (8005474 <_printf_i+0x248>)
 80053d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80053d6:	e7e3      	b.n	80053a0 <_printf_i+0x174>
 80053d8:	0659      	lsls	r1, r3, #25
 80053da:	bf48      	it	mi
 80053dc:	b2b6      	uxthmi	r6, r6
 80053de:	e7e6      	b.n	80053ae <_printf_i+0x182>
 80053e0:	4615      	mov	r5, r2
 80053e2:	e7bb      	b.n	800535c <_printf_i+0x130>
 80053e4:	682b      	ldr	r3, [r5, #0]
 80053e6:	6826      	ldr	r6, [r4, #0]
 80053e8:	6961      	ldr	r1, [r4, #20]
 80053ea:	1d18      	adds	r0, r3, #4
 80053ec:	6028      	str	r0, [r5, #0]
 80053ee:	0635      	lsls	r5, r6, #24
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	d501      	bpl.n	80053f8 <_printf_i+0x1cc>
 80053f4:	6019      	str	r1, [r3, #0]
 80053f6:	e002      	b.n	80053fe <_printf_i+0x1d2>
 80053f8:	0670      	lsls	r0, r6, #25
 80053fa:	d5fb      	bpl.n	80053f4 <_printf_i+0x1c8>
 80053fc:	8019      	strh	r1, [r3, #0]
 80053fe:	2300      	movs	r3, #0
 8005400:	6123      	str	r3, [r4, #16]
 8005402:	4615      	mov	r5, r2
 8005404:	e7ba      	b.n	800537c <_printf_i+0x150>
 8005406:	682b      	ldr	r3, [r5, #0]
 8005408:	1d1a      	adds	r2, r3, #4
 800540a:	602a      	str	r2, [r5, #0]
 800540c:	681d      	ldr	r5, [r3, #0]
 800540e:	6862      	ldr	r2, [r4, #4]
 8005410:	2100      	movs	r1, #0
 8005412:	4628      	mov	r0, r5
 8005414:	f7fa fedc 	bl	80001d0 <memchr>
 8005418:	b108      	cbz	r0, 800541e <_printf_i+0x1f2>
 800541a:	1b40      	subs	r0, r0, r5
 800541c:	6060      	str	r0, [r4, #4]
 800541e:	6863      	ldr	r3, [r4, #4]
 8005420:	6123      	str	r3, [r4, #16]
 8005422:	2300      	movs	r3, #0
 8005424:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005428:	e7a8      	b.n	800537c <_printf_i+0x150>
 800542a:	6923      	ldr	r3, [r4, #16]
 800542c:	462a      	mov	r2, r5
 800542e:	4649      	mov	r1, r9
 8005430:	4640      	mov	r0, r8
 8005432:	47d0      	blx	sl
 8005434:	3001      	adds	r0, #1
 8005436:	d0ab      	beq.n	8005390 <_printf_i+0x164>
 8005438:	6823      	ldr	r3, [r4, #0]
 800543a:	079b      	lsls	r3, r3, #30
 800543c:	d413      	bmi.n	8005466 <_printf_i+0x23a>
 800543e:	68e0      	ldr	r0, [r4, #12]
 8005440:	9b03      	ldr	r3, [sp, #12]
 8005442:	4298      	cmp	r0, r3
 8005444:	bfb8      	it	lt
 8005446:	4618      	movlt	r0, r3
 8005448:	e7a4      	b.n	8005394 <_printf_i+0x168>
 800544a:	2301      	movs	r3, #1
 800544c:	4632      	mov	r2, r6
 800544e:	4649      	mov	r1, r9
 8005450:	4640      	mov	r0, r8
 8005452:	47d0      	blx	sl
 8005454:	3001      	adds	r0, #1
 8005456:	d09b      	beq.n	8005390 <_printf_i+0x164>
 8005458:	3501      	adds	r5, #1
 800545a:	68e3      	ldr	r3, [r4, #12]
 800545c:	9903      	ldr	r1, [sp, #12]
 800545e:	1a5b      	subs	r3, r3, r1
 8005460:	42ab      	cmp	r3, r5
 8005462:	dcf2      	bgt.n	800544a <_printf_i+0x21e>
 8005464:	e7eb      	b.n	800543e <_printf_i+0x212>
 8005466:	2500      	movs	r5, #0
 8005468:	f104 0619 	add.w	r6, r4, #25
 800546c:	e7f5      	b.n	800545a <_printf_i+0x22e>
 800546e:	bf00      	nop
 8005470:	0800577d 	.word	0x0800577d
 8005474:	0800578e 	.word	0x0800578e

08005478 <__sread>:
 8005478:	b510      	push	{r4, lr}
 800547a:	460c      	mov	r4, r1
 800547c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005480:	f000 f894 	bl	80055ac <_read_r>
 8005484:	2800      	cmp	r0, #0
 8005486:	bfab      	itete	ge
 8005488:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800548a:	89a3      	ldrhlt	r3, [r4, #12]
 800548c:	181b      	addge	r3, r3, r0
 800548e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005492:	bfac      	ite	ge
 8005494:	6563      	strge	r3, [r4, #84]	; 0x54
 8005496:	81a3      	strhlt	r3, [r4, #12]
 8005498:	bd10      	pop	{r4, pc}

0800549a <__swrite>:
 800549a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800549e:	461f      	mov	r7, r3
 80054a0:	898b      	ldrh	r3, [r1, #12]
 80054a2:	05db      	lsls	r3, r3, #23
 80054a4:	4605      	mov	r5, r0
 80054a6:	460c      	mov	r4, r1
 80054a8:	4616      	mov	r6, r2
 80054aa:	d505      	bpl.n	80054b8 <__swrite+0x1e>
 80054ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054b0:	2302      	movs	r3, #2
 80054b2:	2200      	movs	r2, #0
 80054b4:	f000 f868 	bl	8005588 <_lseek_r>
 80054b8:	89a3      	ldrh	r3, [r4, #12]
 80054ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054c2:	81a3      	strh	r3, [r4, #12]
 80054c4:	4632      	mov	r2, r6
 80054c6:	463b      	mov	r3, r7
 80054c8:	4628      	mov	r0, r5
 80054ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054ce:	f000 b817 	b.w	8005500 <_write_r>

080054d2 <__sseek>:
 80054d2:	b510      	push	{r4, lr}
 80054d4:	460c      	mov	r4, r1
 80054d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054da:	f000 f855 	bl	8005588 <_lseek_r>
 80054de:	1c43      	adds	r3, r0, #1
 80054e0:	89a3      	ldrh	r3, [r4, #12]
 80054e2:	bf15      	itete	ne
 80054e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80054e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80054ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80054ee:	81a3      	strheq	r3, [r4, #12]
 80054f0:	bf18      	it	ne
 80054f2:	81a3      	strhne	r3, [r4, #12]
 80054f4:	bd10      	pop	{r4, pc}

080054f6 <__sclose>:
 80054f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054fa:	f000 b813 	b.w	8005524 <_close_r>
	...

08005500 <_write_r>:
 8005500:	b538      	push	{r3, r4, r5, lr}
 8005502:	4d07      	ldr	r5, [pc, #28]	; (8005520 <_write_r+0x20>)
 8005504:	4604      	mov	r4, r0
 8005506:	4608      	mov	r0, r1
 8005508:	4611      	mov	r1, r2
 800550a:	2200      	movs	r2, #0
 800550c:	602a      	str	r2, [r5, #0]
 800550e:	461a      	mov	r2, r3
 8005510:	f7fe fc3c 	bl	8003d8c <_write>
 8005514:	1c43      	adds	r3, r0, #1
 8005516:	d102      	bne.n	800551e <_write_r+0x1e>
 8005518:	682b      	ldr	r3, [r5, #0]
 800551a:	b103      	cbz	r3, 800551e <_write_r+0x1e>
 800551c:	6023      	str	r3, [r4, #0]
 800551e:	bd38      	pop	{r3, r4, r5, pc}
 8005520:	20000184 	.word	0x20000184

08005524 <_close_r>:
 8005524:	b538      	push	{r3, r4, r5, lr}
 8005526:	4d06      	ldr	r5, [pc, #24]	; (8005540 <_close_r+0x1c>)
 8005528:	2300      	movs	r3, #0
 800552a:	4604      	mov	r4, r0
 800552c:	4608      	mov	r0, r1
 800552e:	602b      	str	r3, [r5, #0]
 8005530:	f7fb ff61 	bl	80013f6 <_close>
 8005534:	1c43      	adds	r3, r0, #1
 8005536:	d102      	bne.n	800553e <_close_r+0x1a>
 8005538:	682b      	ldr	r3, [r5, #0]
 800553a:	b103      	cbz	r3, 800553e <_close_r+0x1a>
 800553c:	6023      	str	r3, [r4, #0]
 800553e:	bd38      	pop	{r3, r4, r5, pc}
 8005540:	20000184 	.word	0x20000184

08005544 <_fstat_r>:
 8005544:	b538      	push	{r3, r4, r5, lr}
 8005546:	4d07      	ldr	r5, [pc, #28]	; (8005564 <_fstat_r+0x20>)
 8005548:	2300      	movs	r3, #0
 800554a:	4604      	mov	r4, r0
 800554c:	4608      	mov	r0, r1
 800554e:	4611      	mov	r1, r2
 8005550:	602b      	str	r3, [r5, #0]
 8005552:	f7fb ff5c 	bl	800140e <_fstat>
 8005556:	1c43      	adds	r3, r0, #1
 8005558:	d102      	bne.n	8005560 <_fstat_r+0x1c>
 800555a:	682b      	ldr	r3, [r5, #0]
 800555c:	b103      	cbz	r3, 8005560 <_fstat_r+0x1c>
 800555e:	6023      	str	r3, [r4, #0]
 8005560:	bd38      	pop	{r3, r4, r5, pc}
 8005562:	bf00      	nop
 8005564:	20000184 	.word	0x20000184

08005568 <_isatty_r>:
 8005568:	b538      	push	{r3, r4, r5, lr}
 800556a:	4d06      	ldr	r5, [pc, #24]	; (8005584 <_isatty_r+0x1c>)
 800556c:	2300      	movs	r3, #0
 800556e:	4604      	mov	r4, r0
 8005570:	4608      	mov	r0, r1
 8005572:	602b      	str	r3, [r5, #0]
 8005574:	f7fb ff5b 	bl	800142e <_isatty>
 8005578:	1c43      	adds	r3, r0, #1
 800557a:	d102      	bne.n	8005582 <_isatty_r+0x1a>
 800557c:	682b      	ldr	r3, [r5, #0]
 800557e:	b103      	cbz	r3, 8005582 <_isatty_r+0x1a>
 8005580:	6023      	str	r3, [r4, #0]
 8005582:	bd38      	pop	{r3, r4, r5, pc}
 8005584:	20000184 	.word	0x20000184

08005588 <_lseek_r>:
 8005588:	b538      	push	{r3, r4, r5, lr}
 800558a:	4d07      	ldr	r5, [pc, #28]	; (80055a8 <_lseek_r+0x20>)
 800558c:	4604      	mov	r4, r0
 800558e:	4608      	mov	r0, r1
 8005590:	4611      	mov	r1, r2
 8005592:	2200      	movs	r2, #0
 8005594:	602a      	str	r2, [r5, #0]
 8005596:	461a      	mov	r2, r3
 8005598:	f7fb ff54 	bl	8001444 <_lseek>
 800559c:	1c43      	adds	r3, r0, #1
 800559e:	d102      	bne.n	80055a6 <_lseek_r+0x1e>
 80055a0:	682b      	ldr	r3, [r5, #0]
 80055a2:	b103      	cbz	r3, 80055a6 <_lseek_r+0x1e>
 80055a4:	6023      	str	r3, [r4, #0]
 80055a6:	bd38      	pop	{r3, r4, r5, pc}
 80055a8:	20000184 	.word	0x20000184

080055ac <_read_r>:
 80055ac:	b538      	push	{r3, r4, r5, lr}
 80055ae:	4d07      	ldr	r5, [pc, #28]	; (80055cc <_read_r+0x20>)
 80055b0:	4604      	mov	r4, r0
 80055b2:	4608      	mov	r0, r1
 80055b4:	4611      	mov	r1, r2
 80055b6:	2200      	movs	r2, #0
 80055b8:	602a      	str	r2, [r5, #0]
 80055ba:	461a      	mov	r2, r3
 80055bc:	f7fb fefe 	bl	80013bc <_read>
 80055c0:	1c43      	adds	r3, r0, #1
 80055c2:	d102      	bne.n	80055ca <_read_r+0x1e>
 80055c4:	682b      	ldr	r3, [r5, #0]
 80055c6:	b103      	cbz	r3, 80055ca <_read_r+0x1e>
 80055c8:	6023      	str	r3, [r4, #0]
 80055ca:	bd38      	pop	{r3, r4, r5, pc}
 80055cc:	20000184 	.word	0x20000184

080055d0 <_init>:
 80055d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055d2:	bf00      	nop
 80055d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055d6:	bc08      	pop	{r3}
 80055d8:	469e      	mov	lr, r3
 80055da:	4770      	bx	lr

080055dc <_fini>:
 80055dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055de:	bf00      	nop
 80055e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055e2:	bc08      	pop	{r3}
 80055e4:	469e      	mov	lr, r3
 80055e6:	4770      	bx	lr
